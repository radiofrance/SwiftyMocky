import Foundation
import PathKit

public enum Assets {

    public enum swifttemplate {
        public static let allTypes: AssetFile = Files.allTypes
        public static let mock: AssetFile = Files.mock
        public static let prototype: AssetFile = Files.prototype
    }

    public static var mockfileTemplate: String { return """
        # Mockfile is a SwiftyMocky YAML configuration file
        sourceryCommand: null
        unit.tests.mock:    # Name of your mock
          sources:
            include:        # All swift files here would be scanned for AutoMockable types
                - ./MyApp
            exclude: []     # You can exclude files as well
          output:           # Generated mock file location and name
            ./MyAppUnitTests/Mocks/Mock.generated.swift
          targets:          # Specify XCodeproj targets for your mock. Used for linting
            - MyAppUnitTests
          testable: []      # Specify  list of imported/@testable modules referenced in mock
          import: []        # You can use 'swiftymocky autoimport' to update it automatically
        """
    }
}

public protocol AssetFile {

    var name: String { get }
    var data: Data { get }

    func write(to path: Path) throws
}

private struct File: AssetFile {

    let name: String
    let contents: String
    var data: Data { return Data(base64Encoded: contents) ?? Data() }

    func write(to path: Path) throws {
        try path.write(data)
    }
}

private enum Files {
    static let allTypes = File(
        name: "AllTypes.swifttemplate",
        contents: "dHlwZXM6CjwlXyB2YXIgYWxsID0gdHlwZXMuYWxsCiAgICBhbGwgKz0gdHlwZXMucHJvdG9jb2xzLm1hcCB7ICQwIH0KICAgIGFsbCArPSB0eXBlcy5wcm90b2NvbENvbXBvc2l0aW9ucy5tYXAgeyAkMCB9IC0lPgo8JV8gZm9yIHR5cGUgaW4gYWxsIHsgLSU+PCVfIC0lPgogIDwlXyBsZXQgYXV0b01vY2thYmxlOiBCb29sID0gdHlwZS5pbmhlcml0ZWRUeXBlcy5jb250YWlucygiQXV0b01vY2thYmxlIikgfHwgdHlwZS5hbm5vdGF0aW9uc1siQXV0b01vY2thYmxlIl0gIT0gbmlsIC0lPgogIDwlXyBpZiBhdXRvTW9ja2FibGUgeyAtJT4KICAgIC0gPCU9IHR5cGUubmFtZSAlPgogIDwlXyB9IC0lPgo8JV8gfSAtJT4K"
    )
    static let mock = File(
        name: "Mock.swifttemplate",
        contents: "PCVfCmxldCBtb2NrVHlwZU5hbWUgPSAiTW9jayIKZnVuYyBzd2lmdExpbnRSdWxlcyhfIGFyZ3VtZW50czogW1N0cmluZzogQW55XSkgLT4gW1N0cmluZ10gewogICAgcmV0dXJuIHN0cmluZ0FycmF5KGZyb21Bcmd1bWVudHM6IGFyZ3VtZW50cywgZm9yS2V5OiAiZXhjbHVkZWRTd2lmdExpbnRSdWxlcyIpLm1hcCB7IHJ1bGUgaW4KICAgICAgICByZXR1cm4gIi8vc3dpZnRsaW50OmRpc2FibGUgXChydWxlKSIKICAgIH0KfQoKZnVuYyBwcm9qZWN0SW1wb3J0cyhfIGFyZ3VtZW50czogW1N0cmluZzogQW55XSkgLT4gW1N0cmluZ10gewogICAgcmV0dXJuIGltcG9ydHMoYXJndW1lbnRzKSArIHRlc3RhYmxlSW1wb3J0cyhhcmd1bWVudHMpCn0KCmZ1bmMgaW1wb3J0cyhfIGFyZ3VtZW50czogW1N0cmluZzogQW55XSkgLT4gW1N0cmluZ10gewogICAgcmV0dXJuIHN0cmluZ0FycmF5KGZyb21Bcmd1bWVudHM6IGFyZ3VtZW50cywgZm9yS2V5OiAiaW1wb3J0IikKICAgICAgICAubWFwIHsgcmV0dXJuICJpbXBvcnQgXCgkMCkiIH0KfQoKZnVuYyB0ZXN0YWJsZUltcG9ydHMoXyBhcmd1bWVudHM6IFtTdHJpbmc6IEFueV0pIC0+IFtTdHJpbmddIHsKICAgIHJldHVybiBzdHJpbmdBcnJheShmcm9tQXJndW1lbnRzOiBhcmd1bWVudHMsIGZvcktleTogInRlc3RhYmxlIikKICAgICAgICAubWFwIHsgcmV0dXJuICJAdGVzdGFibGUgaW1wb3J0IFwoJDApIiB9Cn0KCi8vLyBbSW50ZXJuYWxdIEdldCB2YWx1ZSBmcm9tIGRpY3Rpb25hcnkKLy8vIC0gUGFyYW1ldGVyczoKLy8vICAgLSBmcm9tQXJndW1lbnRzOiBkaWN0aW9uYXJ5Ci8vLyAgIC0gZm9yS2V5OiBkaWN0aW9uYXJ5IGtleQovLy8gLSBSZXR1cm5zOiBhcnJheSBvZiBzdHJpbmdzLCBpZiBrZXkgbm90IGZvdW5kLCByZXR1cm5zIGVtcHR5IGFycmF5LgovLy8gLSBOb3RlOiBJZiBzb3VyY2VyeSBhcmd1bWVudHMgY29udGFpbnRzIG9ubHkgb25lIGVsZW1lbnQsIHRoZW4gc2luZ2xlIHZhbHVlIGlzIHN0b3JlZCwgb3RoZXJ3aXNlIGFycmF5IG9mIGVsZW1lbnRzLiBUaGlzIG1ldGhvZCBhbHdheXMgZ2V0cyBhcnJheSBvZiBlbGVtZW50cy4KZnVuYyBzdHJpbmdBcnJheShmcm9tQXJndW1lbnRzIGFyZ3VtZW50czogW1N0cmluZzogQW55XSwgZm9yS2V5IGtleTogU3RyaW5nKSAtPiBbU3RyaW5nXSB7CgogICAgaWYgbGV0IGFyZ3VtZW50ID0gYXJndW1lbnRzW2tleV0gYXM/IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIFthcmd1bWVudF0KICAgIH0gZWxzZSBpZiBsZXQgbWFueUFyZ3VtZW50cyA9IGFyZ3VtZW50c1trZXldIGFzPyBbU3RyaW5nXSB7CiAgICAgICAgcmV0dXJuIG1hbnlBcmd1bWVudHMKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIFtdCiAgICB9Cn0KXyU+Ci8vIEdlbmVyYXRlZCB3aXRoIFN3aWZ0eU1vY2t5IDQuMi4wIEFwcGxlLVNpbGljb24KLy8gUmVxdWlyZWQgU291cmNlcnk6IDIuMS4xCgo8JV8gZm9yIHJ1bGUgaW4gc3dpZnRMaW50UnVsZXMoYXJndW1lbnQpIHsgLSU+CiAgICA8JV8gJT48JT0gcnVsZSAlPgo8JV8gfSAtJT4KCmltcG9ydCBTd2lmdHlNb2NreQppbXBvcnQgWENUZXN0CjwlIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBJTVBPUlRTIC0lPjwlXyAtJT4KICAgIDwlXyBmb3IgcHJvamVjdEltcG9ydCBpbiBwcm9qZWN0SW1wb3J0cyhhcmd1bWVudCkgeyAtJT4KICAgICAgICA8JV8gJT48JT0gcHJvamVjdEltcG9ydCAlPgogICAgPCVfIH0gLSU+CiAgICA8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PSBJTVBPUlRTIEluQVBQIChhZ2dyZWdhdGVkIGFyZ3VtZW50KSAtJT48JV8gLSU+CiAgICA8JV8gaWYgbGV0IHN3aWZ0eU1vY2t5QXJncyA9IGFyZ3VtZW50WyJzd2lmdHlNb2NreSJdIGFzPyBbU3RyaW5nOiBBbnldIHsgLSU+CiAgICAgICAgPCVfIGZvciBwcm9qZWN0SW1wb3J0IGluIHByb2plY3RJbXBvcnRzKHN3aWZ0eU1vY2t5QXJncykgeyAtJT4KICAgICAgICAgICAgPCVfICU+PCU9IHByb2plY3RJbXBvcnQgJT4KICAgICAgICA8JV8gfSAtJT4KICAgIDwlXyB9IC0lPgo8JV8KY2xhc3MgQ3VycmVudCB7CiAgICBzdGF0aWMgdmFyIHNlbGZUeXBlOiBTdHJpbmcgPSAiU2VsZiIKICAgIHN0YXRpYyB2YXIgYWNjZXNzTW9kaWZpZXI6IFN0cmluZyA9ICJvcGVuIgp9Ci8vIENvbGxpc2lvbiBtYW5hZ2VtZW50CmZ1bmMgYXJlVGhlcmVDb2xsaXNpb25zKGJldHdlZW4gbWV0aG9kczogW01ldGhvZFdyYXBwZXJdKSAtPiBCb29sIHsKICAgIGxldCBnaXZlblNldCA9IFNldDxTdHJpbmc+KG1ldGhvZHMubWFwKHsgJDAuZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUocHJlZml4OiAiIikgfSkpCiAgICBndWFyZCBnaXZlblNldC5jb3VudCA9PSBtZXRob2RzLmNvdW50IGVsc2UgeyByZXR1cm4gdHJ1ZSB9IC8vIHRoZXJlIHdvdWxkIGJlIGNvbmZsaWN0cyBpbiBHaXZlbgogICAgbGV0IHZlcmlmeVNldCA9IFNldDxTdHJpbmc+KG1ldGhvZHMubWFwKHsgJDAudmVyaWZpY2F0aW9uUHJveHlDb25zdHJ1Y3Rvck5hbWUocHJlZml4OiAiIikgfSkpCiAgICBndWFyZCB2ZXJpZnlTZXQuY291bnQgPT0gbWV0aG9kcy5jb3VudCBlbHNlIHsgcmV0dXJuIHRydWUgfSAvLyB0aGVyZSB3b3VsZCBiZSBjb25mbGljdHMgaW4gVmVyaWZ5CiAgICByZXR1cm4gZmFsc2UKfQoKLy8gaGVybHBlcnMKZnVuYyB1bmlxdWVzKG1ldGhvZHM6IFtTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kXSkgLT4gW1NvdXJjZXJ5UnVudGltZS5NZXRob2RdIHsKICAgIGZ1bmMgcmV0dXJuVHlwZVN0cmlwcGVkKF8gbWV0aG9kOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlUmF3ID0gIlwobWV0aG9kLnJldHVyblR5cGVOYW1lKSIKICAgICAgICB2YXIgc3RyaXBwZWQ6IFN0cmluZyA9IHsKICAgICAgICAgICAgZ3VhcmQgbGV0IHJhbmdlID0gcmV0dXJuVHlwZVJhdy5yYW5nZShvZjogIndoZXJlIikgZWxzZSB7IHJldHVybiByZXR1cm5UeXBlUmF3IH0KICAgICAgICAgICAgdmFyIHN0cmlwcGVkID0gcmV0dXJuVHlwZVJhdwogICAgICAgICAgICBzdHJpcHBlZC5yZW1vdmVTdWJyYW5nZSgocmFuZ2UubG93ZXJCb3VuZCkuLi4pCiAgICAgICAgICAgIHJldHVybiBzdHJpcHBlZAogICAgICAgIH0oKQogICAgICAgIHN0cmlwcGVkID0gc3RyaXBwZWQudHJpbW1pbmdDaGFyYWN0ZXJzKGluOiBDaGFyYWN0ZXJTZXQoY2hhcmFjdGVyc0luOiAiICIpKQogICAgICAgIHJldHVybiBzdHJpcHBlZAogICAgfQoKICAgIGZ1bmMgYXJlU2FtZVBhcmFtcyhfIHAxOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kUGFyYW1ldGVyLCBfIHAyOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kUGFyYW1ldGVyKSAtPiBCb29sIHsKICAgICAgICBndWFyZCBwMS5hcmd1bWVudExhYmVsID09IHAyLmFyZ3VtZW50TGFiZWwgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgZ3VhcmQgcDEubmFtZSA9PSBwMi5uYW1lIGVsc2UgeyByZXR1cm4gZmFsc2UgfQogICAgICAgIGd1YXJkIHAxLmFyZ3VtZW50TGFiZWwgPT0gcDIuYXJndW1lbnRMYWJlbCBlbHNlIHsgcmV0dXJuIGZhbHNlIH0KICAgICAgICBndWFyZCBwMS50eXBlTmFtZS5uYW1lID09IHAyLnR5cGVOYW1lLm5hbWUgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgZ3VhcmQgcDEuYWN0dWFsVHlwZU5hbWU/Lm5hbWUgPT0gcDIuYWN0dWFsVHlwZU5hbWU/Lm5hbWUgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICBmdW5jIGFyZVNhbWVNZXRob2RzKF8gbTE6IFNvdXJjZXJ5UnVudGltZS5NZXRob2QsIF8gbTI6IFNvdXJjZXJ5UnVudGltZS5NZXRob2QpIC0+IEJvb2wgewogICAgICAgIGd1YXJkIG0xLm5hbWUgIT0gbTIubmFtZSBlbHNlIHsgcmV0dXJuIG0xLnJldHVyblR5cGVOYW1lID09IG0yLnJldHVyblR5cGVOYW1lIH0KICAgICAgICBndWFyZCBtMS5zZWxlY3Rvck5hbWUgPT0gbTIuc2VsZWN0b3JOYW1lIGVsc2UgeyByZXR1cm4gZmFsc2UgfQogICAgICAgIGd1YXJkIG0xLnBhcmFtZXRlcnMuY291bnQgPT0gbTIucGFyYW1ldGVycy5jb3VudCBlbHNlIHsgcmV0dXJuIGZhbHNlIH0KCiAgICAgICAgbGV0IHAxID0gbTEucGFyYW1ldGVycwogICAgICAgIGxldCBwMiA9IG0yLnBhcmFtZXRlcnMKCiAgICAgICAgZm9yIGkgaW4gMC4uPHAxLmNvdW50IHsKICAgICAgICAgICAgaWYgIWFyZVNhbWVQYXJhbXMocDFbaV0scDJbaV0pIHsgcmV0dXJuIGZhbHNlIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBtMS5yZXR1cm5UeXBlTmFtZSA9PSBtMi5yZXR1cm5UeXBlTmFtZQogICAgfQoKICAgIHJldHVybiBtZXRob2RzLnJlZHVjZShbXSwgeyAocmVzdWx0LCBlbGVtZW50KSAtPiBbU291cmNlcnlSdW50aW1lLk1ldGhvZF0gaW4KICAgICAgICBndWFyZCAhcmVzdWx0LmNvbnRhaW5zKHdoZXJlOiB7IGFyZVNhbWVNZXRob2RzKCQwLGVsZW1lbnQpIH0pIGVsc2UgeyByZXR1cm4gcmVzdWx0IH0KICAgICAgICByZXR1cm4gcmVzdWx0ICsgW2VsZW1lbnRdCiAgICB9KQp9CgpmdW5jIHVuaXF1ZXNXaXRob3V0R2VuZXJpY0NvbnN0cmFpbnRzKG1ldGhvZHM6IFtTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kXSkgLT4gW1NvdXJjZXJ5UnVudGltZS5NZXRob2RdIHsKICAgIGZ1bmMgcmV0dXJuVHlwZVN0cmlwcGVkKF8gbWV0aG9kOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlUmF3ID0gIlwobWV0aG9kLnJldHVyblR5cGVOYW1lKSIKICAgICAgICB2YXIgc3RyaXBwZWQ6IFN0cmluZyA9IHsKICAgICAgICAgICAgZ3VhcmQgbGV0IHJhbmdlID0gcmV0dXJuVHlwZVJhdy5yYW5nZShvZjogIndoZXJlIikgZWxzZSB7IHJldHVybiByZXR1cm5UeXBlUmF3IH0KICAgICAgICAgICAgdmFyIHN0cmlwcGVkID0gcmV0dXJuVHlwZVJhdwogICAgICAgICAgICBzdHJpcHBlZC5yZW1vdmVTdWJyYW5nZSgocmFuZ2UubG93ZXJCb3VuZCkuLi4pCiAgICAgICAgICAgIHJldHVybiBzdHJpcHBlZAogICAgICAgIH0oKQogICAgICAgIHN0cmlwcGVkID0gc3RyaXBwZWQudHJpbW1pbmdDaGFyYWN0ZXJzKGluOiBDaGFyYWN0ZXJTZXQoY2hhcmFjdGVyc0luOiAiICIpKQogICAgICAgIHJldHVybiBzdHJpcHBlZAogICAgfQoKICAgIGZ1bmMgYXJlU2FtZVBhcmFtcyhfIHAxOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kUGFyYW1ldGVyLCBfIHAyOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kUGFyYW1ldGVyKSAtPiBCb29sIHsKICAgICAgICBndWFyZCBwMS5hcmd1bWVudExhYmVsID09IHAyLmFyZ3VtZW50TGFiZWwgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgZ3VhcmQgcDEubmFtZSA9PSBwMi5uYW1lIGVsc2UgeyByZXR1cm4gZmFsc2UgfQogICAgICAgIGd1YXJkIHAxLmFyZ3VtZW50TGFiZWwgPT0gcDIuYXJndW1lbnRMYWJlbCBlbHNlIHsgcmV0dXJuIGZhbHNlIH0KICAgICAgICBndWFyZCBwMS50eXBlTmFtZS5uYW1lID09IHAyLnR5cGVOYW1lLm5hbWUgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgZ3VhcmQgcDEuYWN0dWFsVHlwZU5hbWU/Lm5hbWUgPT0gcDIuYWN0dWFsVHlwZU5hbWU/Lm5hbWUgZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICBmdW5jIGFyZVNhbWVNZXRob2RzKF8gbTE6IFNvdXJjZXJ5UnVudGltZS5NZXRob2QsIF8gbTI6IFNvdXJjZXJ5UnVudGltZS5NZXRob2QpIC0+IEJvb2wgewogICAgICAgIGd1YXJkIG0xLm5hbWUgIT0gbTIubmFtZSBlbHNlIHsgcmV0dXJuIHJldHVyblR5cGVTdHJpcHBlZChtMSkgPT0gcmV0dXJuVHlwZVN0cmlwcGVkKG0yKSB9CiAgICAgICAgZ3VhcmQgbTEuc2VsZWN0b3JOYW1lID09IG0yLnNlbGVjdG9yTmFtZSBlbHNlIHsgcmV0dXJuIGZhbHNlIH0KICAgICAgICBndWFyZCBtMS5wYXJhbWV0ZXJzLmNvdW50ID09IG0yLnBhcmFtZXRlcnMuY291bnQgZWxzZSB7IHJldHVybiBmYWxzZSB9CgogICAgICAgIGxldCBwMSA9IG0xLnBhcmFtZXRlcnMKICAgICAgICBsZXQgcDIgPSBtMi5wYXJhbWV0ZXJzCgogICAgICAgIGZvciBpIGluIDAuLjxwMS5jb3VudCB7CiAgICAgICAgICAgIGlmICFhcmVTYW1lUGFyYW1zKHAxW2ldLHAyW2ldKSB7IHJldHVybiBmYWxzZSB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmV0dXJuVHlwZVN0cmlwcGVkKG0xKSA9PSByZXR1cm5UeXBlU3RyaXBwZWQobTIpCiAgICB9CgogICAgcmV0dXJuIG1ldGhvZHMucmVkdWNlKFtdLCB7IChyZXN1bHQsIGVsZW1lbnQpIC0+IFtTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kXSBpbgogICAgICAgIGd1YXJkICFyZXN1bHQuY29udGFpbnMod2hlcmU6IHsgYXJlU2FtZU1ldGhvZHMoJDAsZWxlbWVudCkgfSkgZWxzZSB7IHJldHVybiByZXN1bHQgfQogICAgICAgIHJldHVybiByZXN1bHQgKyBbZWxlbWVudF0KICAgIH0pCn0KCmZ1bmMgdW5pcXVlcyh2YXJpYWJsZXM6IFtTb3VyY2VyeVJ1bnRpbWUuVmFyaWFibGVdKSAtPiBbU291cmNlcnlSdW50aW1lLlZhcmlhYmxlXSB7CiAgICByZXR1cm4gdmFyaWFibGVzLnJlZHVjZShbXSwgeyAocmVzdWx0LCBlbGVtZW50KSAtPiBbU291cmNlcnlSdW50aW1lLlZhcmlhYmxlXSBpbgogICAgICAgIGd1YXJkICFyZXN1bHQuY29udGFpbnMod2hlcmU6IHsgJDAubmFtZSA9PSBlbGVtZW50Lm5hbWUgfSkgZWxzZSB7IHJldHVybiByZXN1bHQgfQogICAgICAgIHJldHVybiByZXN1bHQgKyBbZWxlbWVudF0KICAgIH0pCn0KCmZ1bmMgd3JhcE1ldGhvZChfIG1ldGhvZDogU291cmNlcnlSdW50aW1lLk1ldGhvZCkgLT4gTWV0aG9kV3JhcHBlciB7CiAgICByZXR1cm4gTWV0aG9kV3JhcHBlcihtZXRob2QpCn0KCmZ1bmMgd3JhcFN1YnNjcmlwdChfIHdyYXBwZWQ6IFNvdXJjZXJ5UnVudGltZS5TdWJzY3JpcHQpIC0+IFN1YnNjcmlwdFdyYXBwZXIgewogICAgcmV0dXJuIFN1YnNjcmlwdFdyYXBwZXIod3JhcHBlZCkKfQoKZnVuYyBqdXN0V3JhcChfIHZhcmlhYmxlOiBTb3VyY2VyeVJ1bnRpbWUuVmFyaWFibGUpIC0+IFZhcmlhYmxlV3JhcHBlciB7IHJldHVybiB3cmFwUHJvcGVydHkodmFyaWFibGUpIH0KZnVuYyB3cmFwUHJvcGVydHkoXyB2YXJpYWJsZTogU291cmNlcnlSdW50aW1lLlZhcmlhYmxlLCBfIHNjb3BlOiBTdHJpbmcgPSAiIikgLT4gVmFyaWFibGVXcmFwcGVyIHsKICAgIHJldHVybiBWYXJpYWJsZVdyYXBwZXIodmFyaWFibGUsIHNjb3BlOiBzY29wZSkKfQoKZnVuYyBzdHViUHJvcGVydHkoXyB2YXJpYWJsZTogU291cmNlcnlSdW50aW1lLlZhcmlhYmxlLCBfIHNjb3BlOiBTdHJpbmcpIC0+IFN0cmluZyB7CiAgICBsZXQgd3JhcHBlciA9IFZhcmlhYmxlV3JhcHBlcih2YXJpYWJsZSwgc2NvcGU6IHNjb3BlKQogICAgcmV0dXJuICJcKHdyYXBwZXIucHJvdG90eXBlKVxuXHRcKHdyYXBwZXIucHJpdmF0ZVByb3RvdHlwZSkiCn0KCmZ1bmMgcHJvcGVydHlUeXBlcyhfIHZhcmlhYmxlOiBTb3VyY2VyeVJ1bnRpbWUuVmFyaWFibGUpIC0+IFN0cmluZyB7CiAgICBsZXQgd3JhcHBlciA9IFZhcmlhYmxlV3JhcHBlcih2YXJpYWJsZSwgc2NvcGU6ICJzY29wZSIpCiAgICByZXR1cm4gIlwod3JhcHBlci5wcm9wZXJ0eUdldCgpKSIgKyAod3JhcHBlci5yZWFkb25seSA/ICIiIDogIlxuXHRcdFwod3JhcHBlci5wcm9wZXJ0eVNldCgpKSIpCn0KCmZ1bmMgcHJvcGVydHlNZXRob2RUeXBlcyhfIHZhcmlhYmxlOiBTb3VyY2VyeVJ1bnRpbWUuVmFyaWFibGUpIC0+IFN0cmluZyB7CiAgICBsZXQgd3JhcHBlciA9IFZhcmlhYmxlV3JhcHBlcih2YXJpYWJsZSwgc2NvcGU6ICIiKQogICAgcmV0dXJuICJcKHdyYXBwZXIucHJvcGVydHlDYXNlR2V0KCkpIiArICh3cmFwcGVyLnJlYWRvbmx5ID8gIiIgOiAiXG5cdFx0XCh3cmFwcGVyLnByb3BlcnR5Q2FzZVNldCgpKSIpCn0KCmZ1bmMgcHJvcGVydHlNZXRob2RUeXBlc0ludFZhbHVlKF8gdmFyaWFibGU6IFNvdXJjZXJ5UnVudGltZS5WYXJpYWJsZSkgLT4gU3RyaW5nIHsKICAgIGxldCB3cmFwcGVyID0gVmFyaWFibGVXcmFwcGVyKHZhcmlhYmxlLCBzY29wZTogIiIpCiAgICByZXR1cm4gIlwod3JhcHBlci5wcm9wZXJ0eUNhc2VHZXRJbnRWYWx1ZSgpKSIgKyAod3JhcHBlci5yZWFkb25seSA/ICIiIDogIlxuXHRcdFx0XCh3cmFwcGVyLnByb3BlcnR5Q2FzZVNldEludFZhbHVlKCkpIikKfQoKZnVuYyBwcm9wZXJ0eVJlZ2lzdGVyKF8gdmFyaWFibGU6IFNvdXJjZXJ5UnVudGltZS5WYXJpYWJsZSkgewogICAgbGV0IHdyYXBwZXIgPSBWYXJpYWJsZVdyYXBwZXIodmFyaWFibGUsIHNjb3BlOiAiIikKICAgIE1ldGhvZFdyYXBwZXIucmVnaXN0ZXIod3JhcHBlci5wcm9wZXJ0eUNhc2VHZXROYW1lLHdyYXBwZXIucHJvcGVydHlDYXNlR2V0TmFtZSx3cmFwcGVyLnByb3BlcnR5Q2FzZUdldE5hbWUpCiAgICBndWFyZCAhd3JhcHBlci5yZWFkb25seSBlbHNlIHsgcmV0dXJuIH0KICAgIE1ldGhvZFdyYXBwZXIucmVnaXN0ZXIod3JhcHBlci5wcm9wZXJ0eUNhc2VTZXROYW1lLHdyYXBwZXIucHJvcGVydHlDYXNlU2V0TmFtZSx3cmFwcGVyLnByb3BlcnR5Q2FzZUdldE5hbWUpCn0KY2xhc3MgSGVscGVycyB7CiAgICBzdGF0aWMgZnVuYyBzcGxpdChfIHN0cmluZzogU3RyaW5nLCBieUZpcnN0T2NjdXJlbmNlT2Ygd29yZDogU3RyaW5nKSAtPiAoU3RyaW5nLCBTdHJpbmcpIHsKICAgICAgICBndWFyZCBsZXQgd29yZFJhbmdlID0gc3RyaW5nLnJhbmdlKG9mOiB3b3JkKSBlbHNlIHsgcmV0dXJuIChzdHJpbmcsICIiKSB9CiAgICAgICAgbGV0IHNlbGZSYW5nZSA9IHN0cmluZy5yYW5nZShvZjogc3RyaW5nKSEKICAgICAgICBsZXQgYmVmb3JlID0gU3RyaW5nKHN0cmluZ1tzZWxmUmFuZ2UubG93ZXJCb3VuZC4uPHdvcmRSYW5nZS5sb3dlckJvdW5kXSkKICAgICAgICBsZXQgYWZ0ZXIgPSBTdHJpbmcoc3RyaW5nW3dvcmRSYW5nZS51cHBlckJvdW5kLi48c2VsZlJhbmdlLnVwcGVyQm91bmRdKQogICAgICAgIHJldHVybiAoYmVmb3JlLCBhZnRlcikKICAgIH0KICAgIHN0YXRpYyBmdW5jIGV4dHJhY3RBc3NvY2lhdGVkVHlwZXMoZnJvbSBhbm5vdGF0ZWQ6IFNvdXJjZXJ5UnVudGltZS5Bbm5vdGF0ZWQpIC0+IFtTdHJpbmddPyB7CiAgICAgICAgaWYgbGV0IHR5cGVzID0gYW5ub3RhdGVkLmFubm90YXRpb25zWyJhc3NvY2lhdGVkdHlwZSJdIGFzPyBbU3RyaW5nXSB7CiAgICAgICAgICAgIHJldHVybiB0eXBlcy5yZXZlcnNlZCgpCiAgICAgICAgfSBlbHNlIGlmIGxldCB0eXBlID0gYW5ub3RhdGVkLmFubm90YXRpb25zWyJhc3NvY2lhdGVkdHlwZSJdIGFzPyBTdHJpbmcgewogICAgICAgICAgICByZXR1cm4gW3R5cGVdCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIG5pbAogICAgICAgIH0KICAgIH0KICAgIHN0YXRpYyBmdW5jIGV4dHJhY3RXaGVyZUNsYXVzZShmcm9tIGFubm90YXRlZDogU291cmNlcnlSdW50aW1lLkFubm90YXRlZCkgLT4gU3RyaW5nPyB7CiAgICAgICAgaWYgbGV0IGNvbnN0cmFpbnRzID0gYW5ub3RhdGVkLmFubm90YXRpb25zWyJ3aGVyZSJdIGFzPyBbU3RyaW5nXSB7CiAgICAgICAgICAgIHJldHVybiAiIHdoZXJlIFwoY29uc3RyYWludHMucmV2ZXJzZWQoKS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKSkiCiAgICAgICAgfSBlbHNlIGlmIGxldCBjb25zdHJhaW50ID0gYW5ub3RhdGVkLmFubm90YXRpb25zWyJ3aGVyZSJdIGFzPyBTdHJpbmcgewogICAgICAgICAgICByZXR1cm4gIiB3aGVyZSBcKGNvbnN0cmFpbnQpIgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBuaWwKICAgICAgICB9CiAgICB9CiAgICAvLy8gRXh0cmFjdCBhbGwgdHlwZWFsaWFzZXMgZnJvbSAiYW5ub3RhdGlvbnMiCiAgICBzdGF0aWMgZnVuYyBleHRyYWN0VHlwZWFsaWFzZXMoZnJvbSBhbm5vdGF0ZWQ6IFNvdXJjZXJ5UnVudGltZS5Bbm5vdGF0ZWQpIC0+IFtTdHJpbmddIHsKICAgICAgICBpZiBsZXQgdHlwZXMgPSBhbm5vdGF0ZWQuYW5ub3RhdGlvbnNbInR5cGVhbGlhcyJdIGFzPyBbU3RyaW5nXSB7CiAgICAgICAgICAgIHJldHVybiB0eXBlcy5yZXZlcnNlZCgpCiAgICAgICAgfSBlbHNlIGlmIGxldCB0eXBlID0gYW5ub3RhdGVkLmFubm90YXRpb25zWyJ0eXBlYWxpYXMiXSBhcz8gU3RyaW5nIHsKICAgICAgICAgICAgcmV0dXJuIFt0eXBlXQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgIH0KICAgIH0KICAgIHN0YXRpYyBmdW5jIGV4dHJhY3RHZW5lcmljc0xpc3QoXyBhc3NvY2lhdGVkVHlwZXM6IFtTdHJpbmddPykgLT4gW1N0cmluZ10gewogICAgICAgIHJldHVybiBhc3NvY2lhdGVkVHlwZXM/LmZsYXRNYXAgewogICAgICAgICAgICBzcGxpdCgkMCwgYnlGaXJzdE9jY3VyZW5jZU9mOiAiIHdoZXJlICIpLjAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICIgIiwgd2l0aDogIiIpLnNwbGl0KHNlcGFyYXRvcjogIjoiKS5tYXAoU3RyaW5nLmluaXQpLmZpcnN0CiAgICAgICAgfS5tYXAgeyAiXCgkMCkiIH0gPz8gW10KICAgIH0KICAgIHN0YXRpYyBmdW5jIGV4dHJhY3RHZW5lcmljVHlwZXNNb2RpZmllcihfIGFzc29jaWF0ZWRUeXBlczogW1N0cmluZ10/KSAtPiBTdHJpbmcgewogICAgICAgIGxldCBhbGwgPSBleHRyYWN0R2VuZXJpY3NMaXN0KGFzc29jaWF0ZWRUeXBlcykKICAgICAgICBndWFyZCAhYWxsLmlzRW1wdHkgZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgcmV0dXJuICI8XChhbGwuam9pbmVkKHNlcGFyYXRvcjogIiwiKSk+IgogICAgfQogICAgc3RhdGljIGZ1bmMgZXh0cmFjdEdlbmVyaWNUeXBlc0NvbnN0cmFpbnRzKF8gYXNzb2NpYXRlZFR5cGVzOiBbU3RyaW5nXT8pIC0+IFN0cmluZyB7CiAgICAgICAgZ3VhcmQgbGV0IGFsbCA9IGFzc29jaWF0ZWRUeXBlcyBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICBsZXQgY29uc3RyYWludHMgPSBhbGwuZmxhdE1hcCB7IHQgLT4gU3RyaW5nPyBpbgogICAgICAgICAgICBsZXQgc3BsaXR0ZWQgPSBzcGxpdCh0LCBieUZpcnN0T2NjdXJlbmNlT2Y6ICIgd2hlcmUgIikKICAgICAgICAgICAgbGV0IGNvbnN0cmFpbnQgPSBzcGxpdHRlZC4wLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiICIsIHdpdGg6ICIiKS5zcGxpdChzZXBhcmF0b3I6ICI6IikubWFwKFN0cmluZy5pbml0KQogICAgICAgICAgICBndWFyZCBjb25zdHJhaW50LmNvdW50ID09IDIgZWxzZSB7IHJldHVybiBuaWwgfQogICAgICAgICAgICBsZXQgYWRvcHRzID0gY29uc3RyYWludFsxXS5zcGxpdChzZXBhcmF0b3I6ICIsIikubWFwKFN0cmluZy5pbml0KQogICAgICAgICAgICB2YXIgbWFwcGVkID0gYWRvcHRzLm1hcCB7ICJcKGNvbnN0cmFpbnRbMF0pOiBcKCQwKSIgfQogICAgICAgICAgICBpZiAhc3BsaXR0ZWQuMS5pc0VtcHR5IHsKICAgICAgICAgICAgICAgIG1hcHBlZC5hcHBlbmQoc3BsaXR0ZWQuMSkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbWFwcGVkLmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgZ3VhcmQgIWNvbnN0cmFpbnRzLmlzRW1wdHkgZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgcmV0dXJuICIgd2hlcmUgXChjb25zdHJhaW50cykiCiAgICB9CiAgICBzdGF0aWMgZnVuYyBleHRyYWN0QXR0cmlidXRlcygKICAgICAgICBmcm9tIGF0dHJpYnV0ZXM6IFtTdHJpbmc6IFtTb3VyY2VyeVJ1bnRpbWUuQXR0cmlidXRlXV0sCiAgICAgICAgZmlsdGVyT3V0U3RhcnRpbmdXaXRoIGRpc2FsbG93ZWRQcmVmaXhlczogW1N0cmluZ10gPSBbXQogICAgKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiBhdHRyaWJ1dGVzCiAgICAgICAgLnJlZHVjZShbU291cmNlcnlSdW50aW1lLkF0dHJpYnV0ZV0oKSkgeyAkMCArICQxLjEgfQogICAgICAgIC5tYXAgeyAkMC5kZXNjcmlwdGlvbiB9CiAgICAgICAgLmZpbHRlciB7ICFbInByaXZhdGUiLCAiaW50ZXJuYWwiLCAicHVibGljIiwgIm9wZW4iLCAib3B0aW9uYWwiXS5jb250YWlucygkMCkgfQogICAgICAgIC5maWx0ZXIgeyBlbGVtZW50IGluCiAgICAgICAgICAgICFkaXNhbGxvd2VkUHJlZml4ZXMuY29udGFpbnMod2hlcmU6IGVsZW1lbnQuaGFzUHJlZml4KQogICAgICAgIH0KICAgICAgICAuc29ydGVkKCkKICAgICAgICAuam9pbmVkKHNlcGFyYXRvcjogIiAiKQogICAgfQp9CmNsYXNzIFBhcmFtZXRlcldyYXBwZXIgewogICAgbGV0IHBhcmFtZXRlcjogTWV0aG9kUGFyYW1ldGVyCgogICAgdmFyIGlzVmFyaWFkaWMgPSBmYWxzZQoKICAgIHZhciB3cmFwcGVkRm9yQ2FsbDogU3RyaW5nIHsKICAgICAgICBsZXQgdHlwZVN0cmluZyA9ICJcKHR5cGUuYWN0dWFsVHlwZU5hbWUgPz8gdHlwZSkiCiAgICAgICAgbGV0IGlzRXNjYXBpbmcgPSB0eXBlU3RyaW5nLmNvbnRhaW5zKCJAZXNjYXBpbmciKQogICAgICAgIGxldCBpc09wdGlvbmFsID0gKHR5cGUuYWN0dWFsVHlwZU5hbWUgPz8gdHlwZSkuaXNPcHRpb25hbAogICAgICAgIGlmIHBhcmFtZXRlci5pc0Nsb3N1cmUgJiYgIWlzRXNjYXBpbmcgJiYgIWlzT3B0aW9uYWwgewogICAgICAgICAgICByZXR1cm4gIlwobmVzdGVkVHlwZSkuYW55IgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAiXChuZXN0ZWRUeXBlKS52YWx1ZShcKGVzY2FwZWROYW1lKSkiCiAgICAgICAgfQogICAgfQogICAgdmFyIG5lc3RlZFR5cGU6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJcKFR5cGVXcmFwcGVyKHR5cGUsIGlzVmFyaWFkaWMpLm5lc3RlZFBhcmFtZXRlcikiCiAgICB9CiAgICB2YXIganVzdFR5cGU6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJcKFR5cGVXcmFwcGVyKHR5cGUsIGlzVmFyaWFkaWMpLnJlcGxhY2luZ1NlbGYoKSkiCiAgICB9CiAgICB2YXIganVzdFBlcmZvcm1UeXBlOiBTdHJpbmcgewogICAgICAgIHJldHVybiAiXChUeXBlV3JhcHBlcih0eXBlLCBpc1ZhcmlhZGljKS5yZXBsYWNpbmdTZWxmUmVzcGVjdGluZ1ZhcmlhZGljKCkpIi5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiEiLCB3aXRoOiAiPyIpCiAgICB9CiAgICB2YXIgZ2VuZXJpY1R5cGU6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIGlzVmFyaWFkaWMgPyAiUGFyYW1ldGVyPFtHZW5lcmljQXR0cmlidXRlXT4iIDogIlBhcmFtZXRlcjxHZW5lcmljQXR0cmlidXRlPiIKICAgIH0KICAgIHZhciB0eXBlRXJhc2VkVHlwZTogU3RyaW5nIHsKICAgICAgICByZXR1cm4gaXNWYXJpYWRpYyA/ICJQYXJhbWV0ZXI8W1R5cGVFcmFzZWRBdHRyaWJ1dGVdPiIgOiAiUGFyYW1ldGVyPFR5cGVFcmFzZWRBdHRyaWJ1dGU+IgogICAgfQogICAgdmFyIHR5cGU6IFNvdXJjZXJ5UnVudGltZS5UeXBlTmFtZSB7CiAgICAgICAgcmV0dXJuIHBhcmFtZXRlci50eXBlTmFtZQogICAgfQogICAgdmFyIG5hbWU6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHBhcmFtZXRlci5uYW1lCiAgICB9CiAgICB2YXIgZXNjYXBlZE5hbWU6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJgXChwYXJhbWV0ZXIubmFtZSlgIgogICAgfQogICAgdmFyIGNvbXBhcmF0b3I6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJndWFyZCBQYXJhbWV0ZXIuY29tcGFyZShsaHM6IGxoc1wocGFyYW1ldGVyLm5hbWUuY2FwaXRhbGl6ZWQpLCByaHM6IHJoc1wocGFyYW1ldGVyLm5hbWUuY2FwaXRhbGl6ZWQpLCB3aXRoOiBtYXRjaGVyKSBlbHNlIHsgcmV0dXJuIGZhbHNlIH0iCiAgICB9CiAgICBmdW5jIGNvbXBhcmF0b3JSZXN1bHQoKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBsaHNOYW1lID0gImxoc1wocGFyYW1ldGVyLm5hbWUuY2FwaXRhbGl6ZWQpIgogICAgICAgIGxldCByaHNOYW1lID0gInJoc1wocGFyYW1ldGVyLm5hbWUuY2FwaXRhbGl6ZWQpIgogICAgICAgIHJldHVybiAicmVzdWx0cy5hcHBlbmQoTWF0Y2hlci5QYXJhbWV0ZXJDb21wYXJpc29uUmVzdWx0KFBhcmFtZXRlci5jb21wYXJlKGxoczogXChsaHNOYW1lKSwgcmhzOiBcKHJoc05hbWUpLCB3aXRoOiBtYXRjaGVyKSwgXChsaHNOYW1lKSwgXChyaHNOYW1lKSwgXCJcKGxhYmVsQW5kTmFtZSgpKVwiKSkiCiAgICB9CgogICAgaW5pdChfIHBhcmFtZXRlcjogU291cmNlcnlSdW50aW1lLk1ldGhvZFBhcmFtZXRlciwgXyB2YXJpYWRpY3M6IFtTdHJpbmddID0gW10pIHsKICAgICAgICBzZWxmLnBhcmFtZXRlciA9IHBhcmFtZXRlcgogICAgICAgIHNlbGYuaXNWYXJpYWRpYyA9ICF2YXJpYWRpY3MuaXNFbXB0eSAmJiB2YXJpYWRpY3MuY29udGFpbnMocGFyYW1ldGVyLm5hbWUpCiAgICB9CgogICAgZnVuYyBpc0dlbmVyaWMoXyB0eXBlczogW1N0cmluZ10pIC0+IEJvb2wgewogICAgICAgIHJldHVybiBUeXBlV3JhcHBlcih0eXBlKS5pc0dlbmVyaWModHlwZXMpCiAgICB9CgogICAgZnVuYyB3cmFwcGVkRm9yUHJveHkoXyBnZW5lcmljczogW1N0cmluZ10sIF8gYXZhaWxhYmlsaXR5OiBCb29sID0gZmFsc2UpIC0+IFN0cmluZyB7CiAgICAgICAgaWYgaXNHZW5lcmljKGdlbmVyaWNzKSB7CiAgICAgICAgICAgIHJldHVybiAiXChlc2NhcGVkTmFtZSkud3JhcEFzR2VuZXJpYygpIgogICAgICAgIH0KICAgICAgICBpZiAoYXZhaWxhYmlsaXR5KSB7CiAgICAgICAgICAgIHJldHVybiAiXChlc2NhcGVkTmFtZSkudHlwZUVyYXNlZEF0dHJpYnV0ZSgpIgogICAgICAgIH0KICAgICAgICByZXR1cm4gIlwoZXNjYXBlZE5hbWUpIgogICAgfQogICAgZnVuYyB3cmFwcGVkRm9yQ2FsbHMoXyBnZW5lcmljczogW1N0cmluZ10sIF8gYXZhaWxhYmlsaXR5OiBCb29sID0gZmFsc2UpIC0+IFN0cmluZyB7CiAgICAgICAgaWYgaXNHZW5lcmljKGdlbmVyaWNzKSB7CiAgICAgICAgICAgIHJldHVybiAiXCh3cmFwcGVkRm9yQ2FsbCkud3JhcEFzR2VuZXJpYygpIgogICAgICAgIH0KICAgICAgICBpZiAoYXZhaWxhYmlsaXR5KSB7CiAgICAgICAgICAgIHJldHVybiAiXCh3cmFwcGVkRm9yQ2FsbCkudHlwZUVyYXNlZEF0dHJpYnV0ZSgpIgogICAgICAgIH0KICAgICAgICByZXR1cm4gIlwod3JhcHBlZEZvckNhbGwpIgogICAgfQoKICAgIGZ1bmMgYXNNZXRob2RBcmd1bWVudCgpIC0+IFN0cmluZyB7CiAgICAgICAgaWYgcGFyYW1ldGVyLmFyZ3VtZW50TGFiZWwgIT0gcGFyYW1ldGVyLm5hbWUgewogICAgICAgICAgICByZXR1cm4gIlwocGFyYW1ldGVyLmFyZ3VtZW50TGFiZWwgPz8gIl8iKSBcKHBhcmFtZXRlci5uYW1lKTogXChwYXJhbWV0ZXIudHlwZU5hbWUpIgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAiXChwYXJhbWV0ZXIubmFtZSk6IFwocGFyYW1ldGVyLnR5cGVOYW1lKSIKICAgICAgICB9CiAgICB9CiAgICBmdW5jIGxhYmVsQW5kTmFtZSgpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IGxhYmVsID0gcGFyYW1ldGVyLmFyZ3VtZW50TGFiZWwgPz8gIl8iCiAgICAgICAgcmV0dXJuIGxhYmVsICE9IHBhcmFtZXRlci5uYW1lID8gIlwobGFiZWwpIFwocGFyYW1ldGVyLm5hbWUpIiA6IGxhYmVsCiAgICB9CiAgICBmdW5jIHNhbml0aXplZEZvckVudW1DYXNlTmFtZSgpIC0+IFN0cmluZyB7CiAgICAgICAgaWYgbGV0IGxhYmVsID0gcGFyYW1ldGVyLmFyZ3VtZW50TGFiZWwsIGxhYmVsICE9IHBhcmFtZXRlci5uYW1lIHsKICAgICAgICAgICAgcmV0dXJuICJcKGxhYmVsKV9cKHBhcmFtZXRlci5uYW1lKSIucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJgIiwgd2l0aDogIiIpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJcKHBhcmFtZXRlci5uYW1lKSIucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJgIiwgd2l0aDogIiIpCiAgICAgICAgfQogICAgfQp9CmNsYXNzIFR5cGVXcmFwcGVyIHsKICAgIGxldCB0eXBlOiBTb3VyY2VyeVJ1bnRpbWUuVHlwZU5hbWUKICAgIGxldCBpc1ZhcmlhZGljOiBCb29sCgogICAgdmFyIHZQcmVmOiBTdHJpbmcgeyByZXR1cm4gaXNWYXJpYWRpYyA/ICJbIiA6ICIiIH0KICAgIHZhciB2U3VmZjogU3RyaW5nIHsgcmV0dXJuIGlzVmFyaWFkaWMgPyAiXSIgOiAiIiB9CgogICAgdmFyIHVud3JhcHBlZDogU3RyaW5nIHsKICAgICAgICByZXR1cm4gdHlwZS51bndyYXBwZWRUeXBlTmFtZQogICAgfQogICAgdmFyIHVud3JhcHBlZFJlcGxhY2luZ1NlbGY6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHJlcGxhY2luZ1NlbGYodW53cmFwOiB0cnVlKQogICAgfQogICAgdmFyIHN0cmlwcGVkOiBTdHJpbmcgewogICAgICAgIGlmIHR5cGUuaXNJbXBsaWNpdGx5VW53cmFwcGVkT3B0aW9uYWwgewogICAgICAgICAgICByZXR1cm4gIlwodlByZWYpXCh1bndyYXBwZWRSZXBsYWNpbmdTZWxmKT9cKHZTdWZmKSIKICAgICAgICB9IGVsc2UgaWYgdHlwZS5pc09wdGlvbmFsIHsKICAgICAgICAgICAgcmV0dXJuICJcKHZQcmVmKVwodW53cmFwcGVkUmVwbGFjaW5nU2VsZik/XCh2U3VmZikiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJcKHZQcmVmKVwodW53cmFwcGVkUmVwbGFjaW5nU2VsZilcKHZTdWZmKSIKICAgICAgICB9CiAgICB9CiAgICB2YXIgbmVzdGVkUGFyYW1ldGVyOiBTdHJpbmcgewogICAgICAgIGlmIHR5cGUuaXNJbXBsaWNpdGx5VW53cmFwcGVkT3B0aW9uYWwgewogICAgICAgICAgICByZXR1cm4gIlBhcmFtZXRlcjxcKHZQcmVmKVwodW53cmFwcGVkUmVwbGFjaW5nU2VsZik/XCh2U3VmZik+IgogICAgICAgIH0gZWxzZSBpZiB0eXBlLmlzT3B0aW9uYWwgewogICAgICAgICAgICByZXR1cm4gIlBhcmFtZXRlcjxcKHZQcmVmKVwodW53cmFwcGVkUmVwbGFjaW5nU2VsZik/XCh2U3VmZik+IgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAiUGFyYW1ldGVyPFwodlByZWYpXCh1bndyYXBwZWRSZXBsYWNpbmdTZWxmKVwodlN1ZmYpPiIKICAgICAgICB9CiAgICB9CiAgICB2YXIgaXNTZWxmVHlwZTogQm9vbCB7CiAgICAgICAgcmV0dXJuIHVud3JhcHBlZCA9PSAiU2VsZiIKICAgIH0KICAgIGZ1bmMgaXNTZWxmVHlwZVJlY3Vyc2l2ZSgpIC0+IEJvb2wgewogICAgICAgIGlmIGxldCB0dXBsZSA9IHR5cGUudHVwbGUgewogICAgICAgICAgICBmb3IgZWxlbWVudCBpbiB0dXBsZS5lbGVtZW50cyB7CiAgICAgICAgICAgICAgICBndWFyZCAhVHlwZVdyYXBwZXIoZWxlbWVudC50eXBlTmFtZSkuaXNTZWxmVHlwZVJlY3Vyc2l2ZSgpIGVsc2UgeyByZXR1cm4gdHJ1ZSB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgbGV0IGFycmF5ID0gdHlwZS5hcnJheSB7CiAgICAgICAgICAgIHJldHVybiBUeXBlV3JhcHBlcihhcnJheS5lbGVtZW50VHlwZU5hbWUpLmlzU2VsZlR5cGVSZWN1cnNpdmUoKQogICAgICAgIH0gZWxzZSBpZiBsZXQgZGljdGlvbmFyeSA9IHR5cGUuZGljdGlvbmFyeSB7CiAgICAgICAgICAgIGd1YXJkICFUeXBlV3JhcHBlcihkaWN0aW9uYXJ5LnZhbHVlVHlwZU5hbWUpLmlzU2VsZlR5cGVSZWN1cnNpdmUoKSBlbHNlIHsgcmV0dXJuIHRydWUgfQogICAgICAgICAgICBndWFyZCAhVHlwZVdyYXBwZXIoZGljdGlvbmFyeS5rZXlUeXBlTmFtZSkuaXNTZWxmVHlwZVJlY3Vyc2l2ZSgpIGVsc2UgeyByZXR1cm4gdHJ1ZSB9CiAgICAgICAgfSBlbHNlIGlmIGxldCBjbG9zdXJlID0gdHlwZS5jbG9zdXJlIHsKICAgICAgICAgICAgZ3VhcmQgIVR5cGVXcmFwcGVyKGNsb3N1cmUuYWN0dWFsUmV0dXJuVHlwZU5hbWUpLmlzU2VsZlR5cGVSZWN1cnNpdmUoKSBlbHNlIHsgcmV0dXJuIHRydWUgfQogICAgICAgICAgICBmb3IgcGFyYW1ldGVyIGluIGNsb3N1cmUucGFyYW1ldGVycyB7CiAgICAgICAgICAgICAgICBndWFyZCAhVHlwZVdyYXBwZXIocGFyYW1ldGVyLnR5cGVOYW1lKS5pc1NlbGZUeXBlUmVjdXJzaXZlKCkgZWxzZSB7IHJldHVybiB0cnVlIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGlzU2VsZlR5cGUKICAgIH0KCiAgICBpbml0KF8gdHlwZTogU291cmNlcnlSdW50aW1lLlR5cGVOYW1lLCBfIGlzVmFyaWFkaWM6IEJvb2wgPSBmYWxzZSkgewogICAgICAgIHNlbGYudHlwZSA9IHR5cGUKICAgICAgICBzZWxmLmlzVmFyaWFkaWMgPSBpc1ZhcmlhZGljCiAgICB9CgogICAgZnVuYyBpc0dlbmVyaWMoXyB0eXBlczogW1N0cmluZ10pIC0+IEJvb2wgewogICAgICAgIGd1YXJkICF0eXBlLmlzVm9pZCBlbHNlIHsgcmV0dXJuIGZhbHNlIH0KCiAgICAgICAgcmV0dXJuIGlzR2VuZXJpYyhuYW1lOiB1bndyYXBwZWQsIGdlbmVyaWNzOiB0eXBlcykKICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgaXNHZW5lcmljKG5hbWU6IFN0cmluZywgZ2VuZXJpY3M6IFtTdHJpbmddKSAtPiBCb29sIHsKICAgICAgICBsZXQgbmFtZSA9ICIoXChuYW1lLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiICIsIHdpdGg6ICIiKSkpIgogICAgICAgIGxldCBtb2RpZmllcnMgPSAiW1xcP1xcIV0qIgogICAgICAgIHJldHVybiBnZW5lcmljcy5jb250YWlucyh3aGVyZTogeyBnZW5lcmljIGluCiAgICAgICAgICAgIGxldCB3cmFwcGVkID0gIihbXFwoXVwoZ2VuZXJpYylcKG1vZGlmaWVycylbXFwpXFwuXSkiCiAgICAgICAgICAgIGxldCBjb25zdHJhaW50ID0gIihbPCxdXChnZW5lcmljKVwobW9kaWZpZXJzKVs+LFxcLl0pIgogICAgICAgICAgICBsZXQgYXJyYXlzID0gIihbXFxbOl1cKGdlbmVyaWMpXChtb2RpZmllcnMpW1xcXSxcXC46XSkiCiAgICAgICAgICAgIGxldCB0dXBsZXMgPSAiKFtcXCgsXShpbm91dCkqXChnZW5lcmljKVwobW9kaWZpZXJzKVssXFwuXFwpXSkiCiAgICAgICAgICAgIGxldCBjbG9zdXJlcyA9ICIoKFxcLVxcPilcKGdlbmVyaWMpXChtb2RpZmllcnMpWyxcXC5cXCldKSIKICAgICAgICAgICAgbGV0IHBhdHRlcm4gPSAiXCh3cmFwcGVkKXxcKGNvbnN0cmFpbnQpfFwoYXJyYXlzKXxcKHR1cGxlcyl8XChjbG9zdXJlcykiCiAgICAgICAgICAgIGd1YXJkIGxldCByZWdleCA9IHRyeT8gTlNSZWd1bGFyRXhwcmVzc2lvbihwYXR0ZXJuOiBwYXR0ZXJuKSBlbHNlIHsgcmV0dXJuIGZhbHNlIH0KICAgICAgICAgICAgcmV0dXJuIHJlZ2V4LmZpcnN0TWF0Y2goaW46IG5hbWUsIG9wdGlvbnM6IFtdLCByYW5nZTogTlNSYW5nZShsb2NhdGlvbjogMCwgbGVuZ3RoOiAobmFtZSBhcyBOU1N0cmluZykubGVuZ3RoKSkgIT0gbmlsCiAgICAgICAgfSkKICAgIH0KCiAgICBmdW5jIHJlcGxhY2luZ1NlbGYodW53cmFwOiBCb29sID0gZmFsc2UpIC0+IFN0cmluZyB7CiAgICAgICAgZ3VhcmQgaXNTZWxmVHlwZVJlY3Vyc2l2ZSgpIGVsc2UgewogICAgICAgICAgICByZXR1cm4gdW53cmFwID8gc2VsZi51bndyYXBwZWQgOiAiXCh0eXBlKSIKICAgICAgICB9CgogICAgICAgIGlmIGlzU2VsZlR5cGUgewogICAgICAgICAgICBsZXQgb3B0aW9uYWxpdHk6IFN0cmluZyA9IHsKICAgICAgICAgICAgICAgIGlmIHR5cGUuaXNJbXBsaWNpdGx5VW53cmFwcGVkT3B0aW9uYWwgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAiISIKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiB0eXBlLmlzT3B0aW9uYWwgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAiPyIKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0oKQogICAgICAgICAgICByZXR1cm4gdW53cmFwID8gQ3VycmVudC5zZWxmVHlwZSA6IEN1cnJlbnQuc2VsZlR5cGUgKyBvcHRpb25hbGl0eQogICAgICAgIH0gZWxzZSBpZiBsZXQgdHVwbGUgPSB0eXBlLnR1cGxlIHsKICAgICAgICAgICAgbGV0IGlubmVyID0gdHVwbGUuZWxlbWVudHMubWFwKHsgVHlwZVdyYXBwZXIoJDAudHlwZU5hbWUpLnJlcGxhY2luZ1NlbGYoKSB9KS5qb2luZWQoc2VwYXJhdG9yOiAiLCIpCiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICIoXChpbm5lcikpIgogICAgICAgICAgICByZXR1cm4gdmFsdWUKICAgICAgICB9IGVsc2UgaWYgbGV0IGFycmF5ID0gdHlwZS5hcnJheSB7CiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICJbXChUeXBlV3JhcHBlcihhcnJheS5lbGVtZW50VHlwZU5hbWUpLnJlcGxhY2luZ1NlbGYoKSldIgogICAgICAgICAgICByZXR1cm4gdmFsdWUKICAgICAgICB9IGVsc2UgaWYgbGV0IGRpY3Rpb25hcnkgPSB0eXBlLmRpY3Rpb25hcnkgewogICAgICAgICAgICBsZXQgdmFsdWUgPSAiWyIgKwogICAgICAgICAgICAgICAgIlwoVHlwZVdyYXBwZXIoZGljdGlvbmFyeS52YWx1ZVR5cGVOYW1lKS5yZXBsYWNpbmdTZWxmKCkpIgogICAgICAgICAgICAgICAgKyAiOiIgKwogICAgICAgICAgICAgICAgIlwoVHlwZVdyYXBwZXIoZGljdGlvbmFyeS5rZXlUeXBlTmFtZSkucmVwbGFjaW5nU2VsZigpKSIKICAgICAgICAgICAgICAgICsgIl0iCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIH0gZWxzZSBpZiBsZXQgY2xvc3VyZSA9IHR5cGUuY2xvc3VyZSB7CiAgICAgICAgICAgIGxldCByZXR1cm5UeXBlID0gVHlwZVdyYXBwZXIoY2xvc3VyZS5hY3R1YWxSZXR1cm5UeXBlTmFtZSkucmVwbGFjaW5nU2VsZigpCiAgICAgICAgICAgIGxldCBpbm5lciA9IGNsb3N1cmUucGFyYW1ldGVycwogICAgICAgICAgICAgICAgLm1hcCB7IFR5cGVXcmFwcGVyKCQwLnR5cGVOYW1lKS5yZXBsYWNpbmdTZWxmKCkgfQogICAgICAgICAgICAgICAgLmpvaW5lZChzZXBhcmF0b3I6ICIsIikKICAgICAgICAgICAgbGV0IHRocm93aW5nID0gY2xvc3VyZS50aHJvd3MgPyAidGhyb3dzICIgOiAiIgogICAgICAgICAgICBsZXQgdmFsdWUgPSAiKFwoaW5uZXIpKSBcKHRocm93aW5nKS0+IFwocmV0dXJuVHlwZSkiCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAodW53cmFwID8gc2VsZi51bndyYXBwZWQgOiAiXCh0eXBlKSIpCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmMgcmVwbGFjaW5nU2VsZlJlc3BlY3RpbmdWYXJpYWRpYygpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJcKHZQcmVmKVwocmVwbGFjaW5nU2VsZigpKVwodlN1ZmYpIgogICAgfQp9CmZ1bmMgcmVwbGFjaW5nU2VsZihfIHZhbHVlOiBTdHJpbmcpIC0+IFN0cmluZyB7CiAgICByZXR1cm4gdmFsdWUKICAgICAgICAvLyBUT0RPOiBwcm9wZXIgcmVnZXggaGVyZQogICAgICAgIC8vIGRlZmF1bHQgPCBjYXNlID4KICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICI8U2VsZj4iLCB3aXRoOiAiPFwoQ3VycmVudC5zZWxmVHlwZSk+IikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICI8U2VsZiAiLCB3aXRoOiAiPFwoQ3VycmVudC5zZWxmVHlwZSkgIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICI8U2VsZi4iLCB3aXRoOiAiPFwoQ3VycmVudC5zZWxmVHlwZSkuIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICI8U2VsZiwiLCB3aXRoOiAiPFwoQ3VycmVudC5zZWxmVHlwZSksIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICI8U2VsZj8iLCB3aXRoOiAiPFwoQ3VycmVudC5zZWxmVHlwZSk/IikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICIgU2VsZj4iLCB3aXRoOiAiIFwoQ3VycmVudC5zZWxmVHlwZSk+IikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICIsU2VsZj4iLCB3aXRoOiAiLFwoQ3VycmVudC5zZWxmVHlwZSk+IikKICAgICAgICAvLyAoU2VsZikgLT4gQ2FzZQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIihTZWxmKSIsIHdpdGg6ICIoXChDdXJyZW50LnNlbGZUeXBlKSkiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIihTZWxmICIsIHdpdGg6ICIoXChDdXJyZW50LnNlbGZUeXBlKSAiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIihTZWxmLiIsIHdpdGg6ICIoXChDdXJyZW50LnNlbGZUeXBlKS4iKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIihTZWxmLCIsIHdpdGg6ICIoXChDdXJyZW50LnNlbGZUeXBlKSwiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIihTZWxmPyIsIHdpdGg6ICIoXChDdXJyZW50LnNlbGZUeXBlKT8iKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiBTZWxmKSIsIHdpdGg6ICIgXChDdXJyZW50LnNlbGZUeXBlKSkiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIixTZWxmKSIsIHdpdGg6ICIsXChDdXJyZW50LnNlbGZUeXBlKSkiKQogICAgICAgIC8vIGxpdGVyYWxzCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiW1NlbGZdIiwgd2l0aDogIltcKEN1cnJlbnQuc2VsZlR5cGUpXSIpCiAgICAgICAgLy8gcmlnaHQKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJbU2VsZiAiLCB3aXRoOiAiW1woQ3VycmVudC5zZWxmVHlwZSkgIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJbU2VsZi4iLCB3aXRoOiAiW1woQ3VycmVudC5zZWxmVHlwZSkuIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJbU2VsZiwiLCB3aXRoOiAiW1woQ3VycmVudC5zZWxmVHlwZSksIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJbU2VsZjoiLCB3aXRoOiAiW1woQ3VycmVudC5zZWxmVHlwZSk6IikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJbU2VsZj8iLCB3aXRoOiAiW1woQ3VycmVudC5zZWxmVHlwZSk/IikKICAgICAgICAvLyBsZWZ0CiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiIFNlbGZdIiwgd2l0aDogIiBcKEN1cnJlbnQuc2VsZlR5cGUpXSIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiLFNlbGZdIiwgd2l0aDogIixcKEN1cnJlbnQuc2VsZlR5cGUpXSIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiOlNlbGZdIiwgd2l0aDogIjpcKEN1cnJlbnQuc2VsZlR5cGUpXSIpCiAgICAgICAgLy8gdW5rbm93bgogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiBTZWxmICIsIHdpdGg6ICIgXChDdXJyZW50LnNlbGZUeXBlKSAiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiBTZWxmLiIsIHdpdGg6ICIgXChDdXJyZW50LnNlbGZUeXBlKS4iKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiBTZWxmLCIsIHdpdGg6ICIgXChDdXJyZW50LnNlbGZUeXBlKSwiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiBTZWxmOiIsIHdpdGg6ICIgXChDdXJyZW50LnNlbGZUeXBlKToiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiBTZWxmPyIsIHdpdGg6ICIgXChDdXJyZW50LnNlbGZUeXBlKT8iKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIixTZWxmICIsIHdpdGg6ICIsXChDdXJyZW50LnNlbGZUeXBlKSAiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIixTZWxmLCIsIHdpdGg6ICIsXChDdXJyZW50LnNlbGZUeXBlKSwiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIixTZWxmPyIsIHdpdGg6ICIsXChDdXJyZW50LnNlbGZUeXBlKT8iKQp9CgpjbGFzcyBNZXRob2RXcmFwcGVyIHsKICAgIHByaXZhdGUgdmFyIG5vU3R1YkRlZmluZWRNZXNzYWdlOiBTdHJpbmcgewogICAgICAgIGxldCBtZXRob2ROYW1lID0gbWV0aG9kLm5hbWUuY29uZGVuc2VXaGl0ZXNwYWNlKCkKICAgICAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiKCAiLCB3aXRoOiAiKCIpCiAgICAgICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIiApIiwgd2l0aDogIikiKQogICAgICAgIHJldHVybiAiU3R1YiByZXR1cm4gdmFsdWUgbm90IHNwZWNpZmllZCBmb3IgXChtZXRob2ROYW1lKS4gVXNlIGdpdmVuIgogICAgfQogICAgcHJpdmF0ZSBzdGF0aWMgdmFyIHJlZ2lzdGVyZWQ6IFtTdHJpbmc6IEludF0gPSBbOl0KICAgIHByaXZhdGUgc3RhdGljIHZhciBzdWZmaXhlczogW1N0cmluZzogSW50XSA9IFs6XQogICAgcHJpdmF0ZSBzdGF0aWMgdmFyIHN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGU6IFtTdHJpbmc6IEludF0gPSBbOl0KCiAgICBsZXQgbWV0aG9kOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kCiAgICB2YXIgYWNjZXNzTW9kaWZpZXI6IFN0cmluZyB7CiAgICAgICAgZ3VhcmQgIW1ldGhvZC5pc1N0YXRpYyBlbHNlIHsgcmV0dXJuICJwdWJsaWMgc3RhdGljIiB9CiAgICAgICAgZ3VhcmQgIXJldHVybnNHZW5lcmljQ29uc3RyYWluZWRUb1NlbGYgZWxzZSB7IHJldHVybiAicHVibGljIiB9CiAgICAgICAgZ3VhcmQgIXBhcmFtZXRlcnNDb250YWluc1NlbGYgZWxzZSB7IHJldHVybiAicHVibGljIiB9CiAgICAgICAgcmV0dXJuIEN1cnJlbnQuYWNjZXNzTW9kaWZpZXIKICAgIH0KICAgIHZhciBoYXNBdmFpbGFiaWxpdHk6IEJvb2wgeyBtZXRob2QuYXR0cmlidXRlc1siYXZhaWxhYmxlIl0/LmlzRW1wdHkgPT0gZmFsc2UgfQogICAgdmFyIGlzQXN5bmM6IEJvb2wgewogICAgICAgIHNlbGYubWV0aG9kLmFubm90YXRpb25zWyJhc3luYyJdICE9IG5pbAogICAgfQoKICAgIHByaXZhdGUgdmFyIHJlZ2lzdHJhdGlvbk5hbWU6IFN0cmluZyB7CiAgICAgICAgdmFyIHJhd05hbWUgPSAobWV0aG9kLmlzU3RhdGljID8gInNtKlwobWV0aG9kLnNlbGVjdG9yTmFtZSkiIDogIm0qXChtZXRob2Quc2VsZWN0b3JOYW1lKSIpCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiXyIsIHdpdGg6ICIiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIigiLCB3aXRoOiAiX18iKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIikiLCB3aXRoOiAiIikKCiAgICAgICAgdmFyIHBhcmFtZXRlcnNOYW1lcyA9IG1ldGhvZC5wYXJhbWV0ZXJzLm1hcCB7ICJcKCQwLm5hbWUpIiB9CgogICAgICAgIHdoaWxlIGxldCByYW5nZSA9IHJhd05hbWUucmFuZ2Uob2Y6ICI6IiksIGxldCBuYW1lID0gcGFyYW1ldGVyc05hbWVzLmZpcnN0IHsKICAgICAgICAgICAgcGFyYW1ldGVyc05hbWVzLnJlbW92ZUZpcnN0KCkKICAgICAgICAgICAgcmF3TmFtZS5yZXBsYWNlU3VicmFuZ2UocmFuZ2UsIHdpdGg6ICJfXChuYW1lKSIpCiAgICAgICAgfQoKICAgICAgICBsZXQgdHJpbVNldCA9IENoYXJhY3RlclNldChjaGFyYWN0ZXJzSW46ICJfIikKCiAgICAgICAgcmV0dXJuICByYXdOYW1lCiAgICAgICAgLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiOiIsIHdpdGg6ICIiKQogICAgICAgIC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjogIm0qIiwgd2l0aDogIm1fIikKICAgICAgICAucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJfX18iLCB3aXRoOiAiX18iKS50cmltbWluZ0NoYXJhY3RlcnMoaW46IHRyaW1TZXQpCiAgICB9CiAgICBwcml2YXRlIHZhciB1bmlxdWVOYW1lOiBTdHJpbmcgewogICAgICAgIHZhciByYXdOYW1lID0gKG1ldGhvZC5pc1N0YXRpYyA/ICJzbV9cKG1ldGhvZC5zZWxlY3Rvck5hbWUpIiA6ICJtX1wobWV0aG9kLnNlbGVjdG9yTmFtZSkiKQogICAgICAgIHZhciBwYXJhbWV0ZXJzTmFtZXMgPSBtZXRob2QucGFyYW1ldGVycy5tYXAgeyAiXCgkMC5uYW1lKV9vZl9cKCQwLnR5cGVOYW1lLm5hbWUpIiB9CgogICAgICAgIHdoaWxlIGxldCByYW5nZSA9IHJhd05hbWUucmFuZ2Uob2Y6ICI6IiksIGxldCBuYW1lID0gcGFyYW1ldGVyc05hbWVzLmZpcnN0IHsKICAgICAgICAgICAgcGFyYW1ldGVyc05hbWVzLnJlbW92ZUZpcnN0KCkKICAgICAgICAgICAgcmF3TmFtZS5yZXBsYWNlU3VicmFuZ2UocmFuZ2UsIHdpdGg6ICJfXChuYW1lKSIpCiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmF3TmFtZS50cmltbWluZ0NoYXJhY3RlcnMoaW46IENoYXJhY3RlclNldChjaGFyYWN0ZXJzSW46ICJfIikpCiAgICB9CiAgICBwcml2YXRlIHZhciB1bmlxdWVOYW1lV2l0aFJldHVyblR5cGU6IFN0cmluZyB7CiAgICAgICAgbGV0IHJldHVyblR5cGVSYXcgPSAiXChtZXRob2QucmV0dXJuVHlwZU5hbWUpIgogICAgICAgIHZhciByZXR1cm5UeXBlU3RyaXBwZWQ6IFN0cmluZyA9IHsKICAgICAgICAgICAgZ3VhcmQgbGV0IHJhbmdlID0gcmV0dXJuVHlwZVJhdy5yYW5nZShvZjogIndoZXJlIikgZWxzZSB7IHJldHVybiByZXR1cm5UeXBlUmF3IH0KICAgICAgICAgICAgdmFyIHN0cmlwcGVkID0gcmV0dXJuVHlwZVJhdwogICAgICAgICAgICBzdHJpcHBlZC5yZW1vdmVTdWJyYW5nZSgocmFuZ2UubG93ZXJCb3VuZCkuLi4pCiAgICAgICAgICAgIHJldHVybiBzdHJpcHBlZAogICAgICAgIH0oKQogICAgICAgIHJldHVyblR5cGVTdHJpcHBlZCA9IHJldHVyblR5cGVTdHJpcHBlZC50cmltbWluZ0NoYXJhY3RlcnMoaW46IENoYXJhY3RlclNldChjaGFyYWN0ZXJzSW46ICIgIikpCiAgICAgICAgcmV0dXJuICJcKHVuaXF1ZU5hbWUpLT5cKHJldHVyblR5cGVTdHJpcHBlZCkiCiAgICB9CiAgICBwcml2YXRlIHZhciBuYW1lU3VmZml4OiBTdHJpbmcgewogICAgICAgIGd1YXJkIGxldCBjb3VudCA9IE1ldGhvZFdyYXBwZXIucmVnaXN0ZXJlZFtyZWdpc3RyYXRpb25OYW1lXSBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICBndWFyZCBjb3VudCA+IDEgZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgZ3VhcmQgbGV0IGluZGV4ID0gTWV0aG9kV3JhcHBlci5zdWZmaXhlc1t1bmlxdWVOYW1lV2l0aFJldHVyblR5cGVdIGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIHJldHVybiAiX1woaW5kZXgpIgogICAgfQogICAgcHJpdmF0ZSB2YXIgbWV0aG9kQXR0cmlidXRlczogU3RyaW5nIHsKICAgICAgICByZXR1cm4gSGVscGVycy5leHRyYWN0QXR0cmlidXRlcyhmcm9tOiBzZWxmLm1ldGhvZC5hdHRyaWJ1dGVzLCBmaWx0ZXJPdXRTdGFydGluZ1dpdGg6IFsibXV0YXRpbmciLCAiQGlubGluYWJsZSJdKQogICAgfQogICAgcHJpdmF0ZSB2YXIgbWV0aG9kQXR0cmlidXRlc05vbk9iamM6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIEhlbHBlcnMuZXh0cmFjdEF0dHJpYnV0ZXMoZnJvbTogc2VsZi5tZXRob2QuYXR0cmlidXRlcywgZmlsdGVyT3V0U3RhcnRpbmdXaXRoOiBbIm11dGF0aW5nIiwgIkBpbmxpbmFibGUiLCAiQG9iamMiXSkKICAgIH0KCiAgICB2YXIgcHJvdG90eXBlOiBTdHJpbmcgewogICAgICAgIHJldHVybiAiXChyZWdpc3RyYXRpb25OYW1lKVwobmFtZVN1ZmZpeCkiLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiYCIsIHdpdGg6ICIiKQogICAgfQogICAgdmFyIHBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJXcmFwcGVyXSB7CiAgICAgICAgcmV0dXJuIGZpbHRlcmVkUGFyYW1ldGVycy5tYXAgeyBQYXJhbWV0ZXJXcmFwcGVyKCQwLCBzZWxmLmdldFZhcmlhZGljUGFyYW1ldGVyc05hbWVzKCkpIH0KICAgIH0KICAgIHZhciBmaWx0ZXJlZFBhcmFtZXRlcnM6IFtNZXRob2RQYXJhbWV0ZXJdIHsKICAgICAgICByZXR1cm4gbWV0aG9kLnBhcmFtZXRlcnMuZmlsdGVyIHsgJDAubmFtZSAhPSAiIiB9CiAgICB9CiAgICB2YXIgZnVuY3Rpb25Qcm90b3R5cGU6IFN0cmluZyB7CiAgICAgICAgbGV0IHRocm93aW5nOiBTdHJpbmcgPSB7CiAgICAgICAgICAgIGlmIG1ldGhvZC50aHJvd3MgewogICAgICAgICAgICAgICAgcmV0dXJuICJ0aHJvd3MgIgogICAgICAgICAgICB9IGVsc2UgaWYgbWV0aG9kLnJldGhyb3dzIHsKICAgICAgICAgICAgICAgIHJldHVybiAicmV0aHJvd3MgIgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuICIiCiAgICAgICAgICAgIH0KICAgICAgICB9KCkKCiAgICAgICAgbGV0IHN0YXRpY01vZGlmaWVyOiBTdHJpbmcgPSAiXChhY2Nlc3NNb2RpZmllcikgIgogICAgICAgIGxldCBwYXJhbXMgPSByZXBsYWNpbmdTZWxmKHBhcmFtZXRlcnNGb3JTdHViU2lnbmF0dXJlKCkpCiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzZWxmLm1ldGhvZEF0dHJpYnV0ZXMKICAgICAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcy5pc0VtcHR5ID8gIiIgOiAiXChhdHRyaWJ1dGVzKVxuXHQiCiAgICAgICAgdmFyIGFzeW5jTW9kaWZpZXIgPSBzZWxmLmlzQXN5bmMgPyAiYXN5bmMgIiA6ICIiCgogICAgICAgIGlmIG1ldGhvZC5pc0luaXRpYWxpemVyIHsKICAgICAgICAgICAgcmV0dXJuICJcKGF0dHJpYnV0ZXMpcHVibGljIHJlcXVpcmVkIFwobWV0aG9kLm5hbWUpIFwoYXN5bmNNb2RpZmllcilcKHRocm93aW5nKSIKICAgICAgICB9IGVsc2UgaWYgbWV0aG9kLnJldHVyblR5cGVOYW1lLmlzVm9pZCB7CiAgICAgICAgICAgIGxldCB3aGVyZVBhcnRJZk5lZWRlZDogU3RyaW5nID0gewogICAgICAgICAgICAgICAgaWYgbWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUuaGFzUHJlZml4KCJWb2lkIikgewogICAgICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lLnJhbmdlKG9mOiAiVm9pZCIpIQogICAgICAgICAgICAgICAgICAgIHJldHVybiAiXChtZXRob2QucmV0dXJuVHlwZU5hbWUubmFtZVtyYW5nZS51cHBlckJvdW5kLi4uXSkiCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhbWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUuaXNFbXB0eSA/ICJcKG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lKSAiIDogIiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSgpCiAgICAgICAgICAgIHJldHVybiAiXChhdHRyaWJ1dGVzKVwoc3RhdGljTW9kaWZpZXIpZnVuYyBcKG1ldGhvZC5zaG9ydE5hbWUpXChwYXJhbXMpIFwoYXN5bmNNb2RpZmllcilcKHRocm93aW5nKVwod2hlcmVQYXJ0SWZOZWVkZWQpIgogICAgICAgIH0gZWxzZSBpZiByZXR1cm5zR2VuZXJpY0NvbnN0cmFpbmVkVG9TZWxmIHsKICAgICAgICAgICAgcmV0dXJuICJcKGF0dHJpYnV0ZXMpXChzdGF0aWNNb2RpZmllcilmdW5jIFwobWV0aG9kLnNob3J0TmFtZSlcKHBhcmFtcykgXChhc3luY01vZGlmaWVyKVwodGhyb3dpbmcpLT4gXChyZXR1cm5UeXBlUmVwbGFjaW5nU2VsZikgIgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAiXChhdHRyaWJ1dGVzKVwoc3RhdGljTW9kaWZpZXIpZnVuYyBcKG1ldGhvZC5zaG9ydE5hbWUpXChwYXJhbXMpIFwoYXN5bmNNb2RpZmllcilcKHRocm93aW5nKS0+IFwobWV0aG9kLnJldHVyblR5cGVOYW1lLm5hbWUpICIKICAgICAgICB9CiAgICB9CiAgICB2YXIgaW52b2NhdGlvbjogU3RyaW5nIHsKICAgICAgICBndWFyZCAhbWV0aG9kLmlzSW5pdGlhbGl6ZXIgZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgaWYgZmlsdGVyZWRQYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gImFkZEludm9jYXRpb24oLlwocHJvdG90eXBlKSkiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJhZGRJbnZvY2F0aW9uKC5cKHByb3RvdHlwZSkoXChwYXJhbWV0ZXJzRm9yTWV0aG9kQ2FsbCgpKSkpIgogICAgICAgIH0KICAgIH0KICAgIHZhciBnaXZlblZhbHVlOiBTdHJpbmcgewogICAgICAgIGd1YXJkICFtZXRob2QuaXNJbml0aWFsaXplciBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICBndWFyZCBtZXRob2QudGhyb3dzIHx8ICFtZXRob2QucmV0dXJuVHlwZU5hbWUuaXNWb2lkIGVsc2UgeyByZXR1cm4gIiIgfQoKICAgICAgICBsZXQgbWV0aG9kVHlwZSA9IGZpbHRlcmVkUGFyYW1ldGVycy5pc0VtcHR5ID8gIi5cKHByb3RvdHlwZSkiIDogIi5cKHByb3RvdHlwZSkoXChwYXJhbWV0ZXJzRm9yTWV0aG9kQ2FsbCgpKSkiCiAgICAgICAgbGV0IHJldHVyblR5cGU6IFN0cmluZyA9IHJldHVybnNTZWxmID8gIl9fU2VsZl9fIiA6ICJcKFR5cGVXcmFwcGVyKG1ldGhvZC5yZXR1cm5UeXBlTmFtZSkuc3RyaXBwZWQpIgoKICAgICAgICBpZiBtZXRob2QucmV0dXJuVHlwZU5hbWUuaXNWb2lkIHsKICAgICAgICAgICAgcmV0dXJuICIiIgogICAgICAgICAgICBcblx0XHRkbyB7CiAgICAgICAgICAgIFx0XHQgICAgXyA9IHRyeSBtZXRob2RSZXR1cm5WYWx1ZShcKG1ldGhvZFR5cGUpKS5jYXN0ZWQoKSBhcyBWb2lkCiAgICAgICAgICAgIFx0XHR9XCgiICIpCiAgICAgICAgICAgICIiIgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxldCBkZWZhdWx0VmFsdWUgPSBtZXRob2QucmV0dXJuVHlwZU5hbWUuaXNPcHRpb25hbCA/ICIgPSBuaWwiIDogIiIKICAgICAgICAgICAgcmV0dXJuICIiIgogICAgICAgICAgICBcblx0XHR2YXIgX192YWx1ZTogXChyZXR1cm5UeXBlKVwoZGVmYXVsdFZhbHVlKQogICAgICAgICAgICBcdFx0ZG8gewogICAgICAgICAgICBcdFx0ICAgIF9fdmFsdWUgPSB0cnkgbWV0aG9kUmV0dXJuVmFsdWUoXChtZXRob2RUeXBlKSkuY2FzdGVkKCkKICAgICAgICAgICAgXHRcdH1cKCIgIikKICAgICAgICAgICAgIiIiCiAgICAgICAgfQogICAgfQogICAgdmFyIHRocm93VmFsdWU6IFN0cmluZyB7CiAgICAgICAgZ3VhcmQgIW1ldGhvZC5pc0luaXRpYWxpemVyIGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIGd1YXJkIG1ldGhvZC50aHJvd3MgfHwgIW1ldGhvZC5yZXR1cm5UeXBlTmFtZS5pc1ZvaWQgZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgbGV0IHNhZmVGYWlsdXJlID0gbWV0aG9kLmlzU3RhdGljID8gIiIgOiAiXHRcdFx0b25GYXRhbEZhaWx1cmUoXCJcKG5vU3R1YkRlZmluZWRNZXNzYWdlKVwiKVxuIgogICAgICAgIC8vIEZvciBWb2lkIGFuZCBSZXR1cm5pbmcgb3B0aW9uYWxzIC0gd2UgYWxsb3cgbm90IHN0dWJiZWQgY2FzZSB0byBoYXBwZW4sIGFzIHdlIGFyZSBzdGlsbCBhYmxlIHRvIHJldHVybgogICAgICAgIGxldCBub1N0dWJIYW5kbGluZyA9IG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5pc1ZvaWQgfHwgbWV0aG9kLnJldHVyblR5cGVOYW1lLmlzT3B0aW9uYWwgPyAiXHRcdFx0Ly8gZG8gbm90aGluZyIgOiAiXChzYWZlRmFpbHVyZSlcdFx0XHRGYWlsdXJlKFwiXChub1N0dWJEZWZpbmVkTWVzc2FnZSlcIikiCiAgICAgICAgZ3VhcmQgbWV0aG9kLnRocm93cyBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICIiIgogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFwobm9TdHViSGFuZGxpbmcpCiAgICAgICAgICAgIFx0XHR9CiAgICAgICAgICAgICIiIgogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICIiIgogICAgICAgIGNhdGNoIE1vY2tFcnJvci5ub3RTdHViZWQgewogICAgICAgIFwobm9TdHViSGFuZGxpbmcpCiAgICAgICAgXHRcdH0gY2F0Y2ggewogICAgICAgIFx0XHQgICAgdGhyb3cgZXJyb3IKICAgICAgICBcdFx0fQogICAgICAgICIiIgogICAgfQogICAgdmFyIHJldHVyblZhbHVlOiBTdHJpbmcgewogICAgICAgIGd1YXJkICFtZXRob2QuaXNJbml0aWFsaXplciBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICBndWFyZCAhbWV0aG9kLnJldHVyblR5cGVOYW1lLmlzVm9pZCBlbHNlIHsgcmV0dXJuICIiIH0KCiAgICAgICAgcmV0dXJuICJcblx0XHRyZXR1cm4gX192YWx1ZSIKICAgIH0KICAgIHZhciBlcXVhbENhc2U6IFN0cmluZyB7CiAgICAgICAgZ3VhcmQgIW1ldGhvZC5pc0luaXRpYWxpemVyIGVsc2UgeyByZXR1cm4gIiIgfQoKICAgICAgICBpZiBmaWx0ZXJlZFBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAiY2FzZSAoLlwocHJvdG90eXBlKSwgLlwocHJvdG90eXBlKSk6IgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxldCBsaHNQYXJhbXMgPSBmaWx0ZXJlZFBhcmFtZXRlcnMubWFwIHsgImxldCBsaHNcKCQwLm5hbWUuY2FwaXRhbGl6ZWQpIiB9LmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgICAgIGxldCByaHNQYXJhbXMgPSBmaWx0ZXJlZFBhcmFtZXRlcnMubWFwIHsgImxldCByaHNcKCQwLm5hbWUuY2FwaXRhbGl6ZWQpIiB9LmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgICAgIHJldHVybiAiY2FzZSAoLlwocHJvdG90eXBlKShcKGxoc1BhcmFtcykpLCAuXChwcm90b3R5cGUpKFwocmhzUGFyYW1zKSkpOiIKICAgICAgICB9CiAgICB9CiAgICBmdW5jIGVxdWFsQ2FzZXMoKSAtPiBTdHJpbmcgewogICAgICAgIHZhciByZXN1bHRzID0gc2VsZi5lcXVhbENhc2UKCiAgICAgICAgZ3VhcmQgIXBhcmFtZXRlcnMuaXNFbXB0eSBlbHNlIHsKICAgICAgICAgICAgcmVzdWx0cyArPSAiIHJldHVybiAubWF0Y2giCiAgICAgICAgICAgIHJldHVybiByZXN1bHRzCiAgICAgICAgfQoKICAgICAgICByZXN1bHRzICs9ICJcblx0XHRcdFx0dmFyIHJlc3VsdHM6IFtNYXRjaGVyLlBhcmFtZXRlckNvbXBhcmlzb25SZXN1bHRdID0gW11cbiIKICAgICAgICByZXN1bHRzICs9IHBhcmFtZXRlcnMubWFwIHsgIlx0XHRcdFx0XCgkMC5jb21wYXJhdG9yUmVzdWx0KCkpIiB9LmpvaW5lZChzZXBhcmF0b3I6ICJcbiIpCiAgICAgICAgcmVzdWx0cyArPSAiXG5cdFx0XHRcdHJldHVybiBNYXRjaGVyLkNvbXBhcmlzb25SZXN1bHQocmVzdWx0cykiCiAgICAgICAgcmV0dXJuIHJlc3VsdHMKICAgIH0KICAgIHZhciBpbnRWYWx1ZUNhc2U6IFN0cmluZyB7CiAgICAgICAgaWYgZmlsdGVyZWRQYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gImNhc2UgLlwocHJvdG90eXBlKTogcmV0dXJuIDAiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGV0IHBhcmFtcyA9IGZpbHRlcmVkUGFyYW1ldGVycy5lbnVtZXJhdGVkKCkubWFwIHsgb2Zmc2V0LCBfIGluCiAgICAgICAgICAgICAgICByZXR1cm4gInBcKG9mZnNldCkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IGRlZmluaXRpb25zID0gcGFyYW1zLmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgICAgIGxldCBwYXJhbXNTdW0gPSBwYXJhbXMubWFwKHsgIlwoJDApLmludFZhbHVlIiB9KS5qb2luZWQoc2VwYXJhdG9yOiAiICsgIikKICAgICAgICAgICAgcmV0dXJuICJjYXNlIGxldCAuXChwcm90b3R5cGUpKFwoZGVmaW5pdGlvbnMpKTogcmV0dXJuIFwocGFyYW1zU3VtKSIKICAgICAgICB9CiAgICB9CiAgICB2YXIgYXNzZXJ0aW9uTmFtZTogU3RyaW5nIHsKICAgICAgICByZXR1cm4gImNhc2UgLlwocHJvdG90eXBlKTogcmV0dXJuIFwiLlwobWV0aG9kLnNlbGVjdG9yTmFtZSlcKG1ldGhvZC5wYXJhbWV0ZXJzLmlzRW1wdHkgPyAiKCkiIDogIiIpXCIiCiAgICB9CgogICAgdmFyIHJldHVybnNTZWxmOiBCb29sIHsKICAgICAgICBndWFyZCAhcmV0dXJuc0dlbmVyaWNDb25zdHJhaW5lZFRvU2VsZiBlbHNlIHsgcmV0dXJuIHRydWUgfQogICAgICAgIHJldHVybiAhbWV0aG9kLnJldHVyblR5cGVOYW1lLmlzVm9pZCAmJiBUeXBlV3JhcHBlcihtZXRob2QucmV0dXJuVHlwZU5hbWUpLmlzU2VsZlR5cGUKICAgIH0KICAgIHZhciByZXR1cm5zR2VuZXJpY0NvbnN0cmFpbmVkVG9TZWxmOiBCb29sIHsKICAgICAgICBsZXQgZGVmYXVsdFJldHVyblR5cGUgPSAiXChtZXRob2QucmV0dXJuVHlwZU5hbWUubmFtZSkgIgogICAgICAgIHJldHVybiBkZWZhdWx0UmV0dXJuVHlwZSAhPSByZXR1cm5UeXBlUmVwbGFjaW5nU2VsZgogICAgfQogICAgdmFyIHJldHVyblR5cGVSZXBsYWNpbmdTZWxmOiBTdHJpbmcgewogICAgICAgIHJldHVybiByZXBsYWNpbmdTZWxmKCJcKG1ldGhvZC5yZXR1cm5UeXBlTmFtZS5uYW1lKSAiKQogICAgfQogICAgdmFyIHBhcmFtZXRlcnNDb250YWluc1NlbGY6IEJvb2wgewogICAgICAgIHJldHVybiByZXBsYWNpbmdTZWxmKHBhcmFtZXRlcnNGb3JTdHViU2lnbmF0dXJlKCkpICE9IHBhcmFtZXRlcnNGb3JTdHViU2lnbmF0dXJlKCkKICAgIH0KCiAgICB2YXIgcmVwbGFjZVNlbGY6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIEN1cnJlbnQuc2VsZlR5cGUKICAgIH0KCiAgICBpbml0KF8gbWV0aG9kOiBTb3VyY2VyeVJ1bnRpbWUuTWV0aG9kKSB7CiAgICAgICAgc2VsZi5tZXRob2QgPSBtZXRob2QKICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIGZ1bmMgY2xlYXIoKSAtPiBTdHJpbmcgewogICAgICAgIE1ldGhvZFdyYXBwZXIucmVnaXN0ZXJlZCA9IFs6XQogICAgICAgIE1ldGhvZFdyYXBwZXIuc3VmZml4ZXMgPSBbOl0KICAgICAgICBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGUgPSBbOl0KICAgICAgICByZXR1cm4gIiIKICAgIH0KCiAgICBmdW5jIHJlZ2lzdGVyKCkgewogICAgICAgIE1ldGhvZFdyYXBwZXIucmVnaXN0ZXIocmVnaXN0cmF0aW9uTmFtZSx1bmlxdWVOYW1lLHVuaXF1ZU5hbWVXaXRoUmV0dXJuVHlwZSkKICAgIH0KCiAgICBzdGF0aWMgZnVuYyByZWdpc3RlcihfIG5hbWU6IFN0cmluZywgXyB1bmlxdWVOYW1lOiBTdHJpbmcsIF8gdW5pcXVlTmFtZVdpdGhSZXR1cm5UeXBlOiBTdHJpbmcpIHsKICAgICAgICBpZiBsZXQgY291bnQgPSBNZXRob2RXcmFwcGVyLnJlZ2lzdGVyZWRbbmFtZV0gewogICAgICAgICAgICBNZXRob2RXcmFwcGVyLnJlZ2lzdGVyZWRbbmFtZV0gPSBjb3VudCArIDEKICAgICAgICAgICAgTWV0aG9kV3JhcHBlci5zdWZmaXhlc1t1bmlxdWVOYW1lV2l0aFJldHVyblR5cGVdID0gY291bnQgKyAxCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgTWV0aG9kV3JhcHBlci5yZWdpc3RlcmVkW25hbWVdID0gMQogICAgICAgICAgICBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzW3VuaXF1ZU5hbWVXaXRoUmV0dXJuVHlwZV0gPSAxCiAgICAgICAgfQoKICAgICAgICBpZiBsZXQgY291bnQgPSBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGVbdW5pcXVlTmFtZV0gewogICAgICAgICAgICBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGVbdW5pcXVlTmFtZV0gPSBjb3VudCArIDEKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGVbdW5pcXVlTmFtZV0gPSAxCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmMgcmV0dXJuVHlwZU1hdHRlcnMoKSAtPiBCb29sIHsKICAgICAgICBsZXQgY291bnQgPSBNZXRob2RXcmFwcGVyLnN1ZmZpeGVzV2l0aG91dFJldHVyblR5cGVbdW5pcXVlTmFtZV0gPz8gMAogICAgICAgIHJldHVybiBjb3VudCA+IDEKICAgIH0KCiAgICBmdW5jIHdyYXBwZWRJbk1ldGhvZFR5cGUoKSAtPiBCb29sIHsKICAgICAgICByZXR1cm4gIW1ldGhvZC5pc0luaXRpYWxpemVyCiAgICB9CgogICAgZnVuYyByZXR1cm5pbmdQYXJhbWV0ZXIoXyBtdWx0aXBsZTogQm9vbCwgXyBmcm9udDogQm9vbCkgLT4gU3RyaW5nIHsKICAgICAgICBndWFyZCByZXR1cm5UeXBlTWF0dGVycygpIGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIGxldCByZXR1cm5pbmc6IFN0cmluZyA9ICJyZXR1cm5pbmc6IFwocmV0dXJuVHlwZVN0cmlwcGVkKG1ldGhvZCwgdHlwZTogdHJ1ZSkpIgogICAgICAgIGd1YXJkIG11bHRpcGxlIGVsc2UgeyByZXR1cm4gcmV0dXJuaW5nIH0KCiAgICAgICAgcmV0dXJuIGZyb250ID8gIiwgXChyZXR1cm5pbmcpIiA6ICJcKHJldHVybmluZyksICIKICAgIH0KCiAgICAvLyBTdHViCiAgICBmdW5jIHN0dWJCb2R5KCkgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgYm9keTogU3RyaW5nID0gewogICAgICAgICAgICBpZiBtZXRob2QuaXNJbml0aWFsaXplciB8fCAhcmV0dXJuc1NlbGYgewogICAgICAgICAgICAgICAgcmV0dXJuIGludm9jYXRpb24gKyBwZXJmb3JtQ2FsbCgpICsgZ2l2ZW5WYWx1ZSArIHRocm93VmFsdWUgKyByZXR1cm5WYWx1ZQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWRTdHViUHJlZml4KCkKICAgICAgICAgICAgICAgICAgICArICJcdFx0IiArIGludm9jYXRpb24KICAgICAgICAgICAgICAgICAgICArIHBlcmZvcm1DYWxsKCkKICAgICAgICAgICAgICAgICAgICArIGdpdmVuVmFsdWUKICAgICAgICAgICAgICAgICAgICArIHRocm93VmFsdWUKICAgICAgICAgICAgICAgICAgICArIHJldHVyblZhbHVlCiAgICAgICAgICAgICAgICAgICAgKyB3cmFwcGVkU3R1YlBvc3RmaXgoKQogICAgICAgICAgICB9CiAgICAgICAgfSgpCiAgICAgICAgcmV0dXJuIHJlcGxhY2luZ1NlbGYoYm9keSkKICAgIH0KCiAgICBmdW5jIHdyYXBwZWRTdHViUHJlZml4KCkgLT4gU3RyaW5nIHsKICAgICAgICBndWFyZCAhbWV0aG9kLmlzSW5pdGlhbGl6ZXIsIHJldHVybnNTZWxmIGVsc2UgewogICAgICAgICAgICByZXR1cm4gIiIKICAgICAgICB9CgogICAgICAgIGxldCB0aHJvd2luZzogU3RyaW5nID0gewogICAgICAgICAgICBpZiBtZXRob2QudGhyb3dzIHsKICAgICAgICAgICAgICAgIHJldHVybiAidGhyb3dzICIKICAgICAgICAgICAgfSBlbHNlIGlmIG1ldGhvZC5yZXRocm93cyB7CiAgICAgICAgICAgICAgICByZXR1cm4gInJldGhyb3dzICIKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgICAgICB9CiAgICAgICAgfSgpCgogICAgICAgIHJldHVybiAiZnVuYyBfd3JhcHBlZDxfX1NlbGZfXz4oKSBcKHRocm93aW5nKS0+IF9fU2VsZl9fIHtcbiIKICAgIH0KCiAgICBmdW5jIHdyYXBwZWRTdHViUG9zdGZpeCgpIC0+IFN0cmluZyB7CiAgICAgICAgZ3VhcmQgIW1ldGhvZC5pc0luaXRpYWxpemVyLCByZXR1cm5zU2VsZiBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICIiCiAgICAgICAgfQoKICAgICAgICBsZXQgdGhyb3dpbmc6IFN0cmluZyA9IChtZXRob2QudGhyb3dzIHx8IG1ldGhvZC5yZXRocm93cykgPyAidHJ5ICI6ICIiCgogICAgICAgIHJldHVybiAiXG5cdFx0fSIKICAgICAgICAgICAgKyAiXG5cdFx0cmV0dXJuIFwodGhyb3dpbmcpX3dyYXBwZWQoKSIKICAgIH0KCiAgICAvLyBNZXRob2QgVHlwZQogICAgZnVuYyBtZXRob2RUeXBlRGVjbGFyYXRpb25XaXRoUGFyYW1ldGVycygpIC0+IFN0cmluZyB7CiAgICAgICAgaWYgZmlsdGVyZWRQYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gImNhc2UgXChwcm90b3R5cGUpIgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAiY2FzZSBcKHByb3RvdHlwZSkoXChwYXJhbWV0ZXJzRm9yTWV0aG9kVHlwZURlY2xhcmF0aW9uKGF2YWlsYWJpbGl0eTogaGFzQXZhaWxhYmlsaXR5KSkpIgogICAgICAgIH0KICAgIH0KCiAgICAvLyBHaXZlbgogICAgZnVuYyBjb250YWluc0VtcHR5QXJndW1lbnRMYWJlbHMoKSAtPiBCb29sIHsKICAgICAgICByZXR1cm4gcGFyYW1ldGVycy5jb250YWlucyh3aGVyZTogeyAkMC5wYXJhbWV0ZXIuYXJndW1lbnRMYWJlbCA9PSBuaWwgfSkKICAgIH0KCiAgICBmdW5jIGdpdmVuUmV0dXJuVHlwZVN0cmluZygpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IHJldHVyblR5cGVTdHJpbmc6IFN0cmluZyA9IHsKICAgICAgICAgICAgZ3VhcmQgIXJldHVybnNHZW5lcmljQ29uc3RyYWluZWRUb1NlbGYgZWxzZSB7IHJldHVybiByZXR1cm5UeXBlUmVwbGFjaW5nU2VsZiB9CiAgICAgICAgICAgIGd1YXJkICFyZXR1cm5zU2VsZiBlbHNlIHsgcmV0dXJuIHJlcGxhY2VTZWxmIH0KICAgICAgICAgICAgcmV0dXJuIFR5cGVXcmFwcGVyKG1ldGhvZC5yZXR1cm5UeXBlTmFtZSkuc3RyaXBwZWQKICAgICAgICB9KCkKICAgICAgICByZXR1cm4gcmV0dXJuVHlwZVN0cmluZwogICAgfQoKICAgIGZ1bmMgZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUocHJlZml4OiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgcmV0dXJuVHlwZVN0cmluZyA9IGdpdmVuUmV0dXJuVHlwZVN0cmluZygpCiAgICAgICAgbGV0IChhbm5vdGF0aW9uLCBfLCBfKSA9IG1ldGhvZEluZm8oKQogICAgICAgIGxldCBjbGF1c2VDb25zdHJhaW50cyA9IHdoZXJlQ2xhdXNlRXhwcmVzc2lvbigpCgogICAgICAgIGlmIGZpbHRlcmVkUGFyYW1ldGVycy5pc0VtcHR5IHsKICAgICAgICAgICAgcmV0dXJuICJcKGFubm90YXRpb24pcHVibGljIHN0YXRpYyBmdW5jIFwobWV0aG9kLnNob3J0TmFtZSkod2lsbFJldHVybjogXChyZXR1cm5UeXBlU3RyaW5nKS4uLikgLT4gXChwcmVmaXgpTWV0aG9kU3R1YiIgKyBjbGF1c2VDb25zdHJhaW50cwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAiXChhbm5vdGF0aW9uKXB1YmxpYyBzdGF0aWMgZnVuYyBcKG1ldGhvZC5zaG9ydE5hbWUpKFwocGFyYW1ldGVyc0ZvclByb3h5U2lnbmF0dXJlKCkpLCB3aWxsUmV0dXJuOiBcKHJldHVyblR5cGVTdHJpbmcpLi4uKSAtPiBcKHByZWZpeClNZXRob2RTdHViIiArIGNsYXVzZUNvbnN0cmFpbnRzCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmMgZ2l2ZW5Db25zdHJ1Y3Rvck5hbWVUaHJvd3MocHJlZml4OiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgKGFubm90YXRpb24sIF8sIF8pID0gbWV0aG9kSW5mbygpCiAgICAgICAgbGV0IGNsYXVzZUNvbnN0cmFpbnRzID0gd2hlcmVDbGF1c2VFeHByZXNzaW9uKCkKCiAgICAgICAgbGV0IGdlbmVyaWNzQXJyYXkgPSBnZXRHZW5lcmljc0NvbnN0cmFpbnRzKGdldEdlbmVyaWNzQW1vbmdQYXJhbWV0ZXJzKCksIGZpbHRlclNpbmdsZTogZmFsc2UpCiAgICAgICAgbGV0IGdlbmVyaWNzID0gZ2VuZXJpY3NBcnJheS5pc0VtcHR5ID8gIiIgOiAiPFwoZ2VuZXJpY3NBcnJheS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKSk+IgoKICAgICAgICBpZiBmaWx0ZXJlZFBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAiXChhbm5vdGF0aW9uKXB1YmxpYyBzdGF0aWMgZnVuYyBcKG1ldGhvZC5jYWxsTmFtZSlcKGdlbmVyaWNzKSh3aWxsVGhyb3c6IEVycm9yLi4uKSAtPiBcKHByZWZpeClNZXRob2RTdHViIiArIGNsYXVzZUNvbnN0cmFpbnRzCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJcKGFubm90YXRpb24pcHVibGljIHN0YXRpYyBmdW5jIFwobWV0aG9kLmNhbGxOYW1lKVwoZ2VuZXJpY3MpKFwocGFyYW1ldGVyc0ZvclByb3h5U2lnbmF0dXJlKCkpLCB3aWxsVGhyb3c6IEVycm9yLi4uKSAtPiBcKHByZWZpeClNZXRob2RTdHViIiArIGNsYXVzZUNvbnN0cmFpbnRzCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmMgZ2l2ZW5Db25zdHJ1Y3RvcihwcmVmaXg6IFN0cmluZyA9ICIiKSAtPiBTdHJpbmcgewogICAgICAgIGlmIGZpbHRlcmVkUGFyYW1ldGVycy5pc0VtcHR5IHsKICAgICAgICAgICAgcmV0dXJuICJyZXR1cm4gXChwcmVmaXgpR2l2ZW4obWV0aG9kOiAuXChwcm90b3R5cGUpLCBwcm9kdWN0czogd2lsbFJldHVybi5tYXAoeyBTdHViUHJvZHVjdC5yZXR1cm4oJDAgYXMgQW55KSB9KSkiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJyZXR1cm4gXChwcmVmaXgpR2l2ZW4obWV0aG9kOiAuXChwcm90b3R5cGUpKFwocGFyYW1ldGVyc0ZvclByb3h5SW5pdCgpKSksIHByb2R1Y3RzOiB3aWxsUmV0dXJuLm1hcCh7IFN0dWJQcm9kdWN0LnJldHVybigkMCBhcyBBbnkpIH0pKSIKICAgICAgICB9CiAgICB9CgogICAgZnVuYyBnaXZlbkNvbnN0cnVjdG9yVGhyb3dzKHByZWZpeDogU3RyaW5nID0gIiIpIC0+IFN0cmluZyB7CiAgICAgICAgaWYgZmlsdGVyZWRQYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gInJldHVybiBcKHByZWZpeClHaXZlbihtZXRob2Q6IC5cKHByb3RvdHlwZSksIHByb2R1Y3RzOiB3aWxsVGhyb3cubWFwKHsgU3R1YlByb2R1Y3QudGhyb3coJDApIH0pKSIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gInJldHVybiBcKHByZWZpeClHaXZlbihtZXRob2Q6IC5cKHByb3RvdHlwZSkoXChwYXJhbWV0ZXJzRm9yUHJveHlJbml0KCkpKSwgcHJvZHVjdHM6IHdpbGxUaHJvdy5tYXAoeyBTdHViUHJvZHVjdC50aHJvdygkMCkgfSkpIgogICAgICAgIH0KICAgIH0KCiAgICAvLyBHaXZlbiB3aWxsUHJvZHVjZQogICAgZnVuYyBnaXZlblByb2R1Y2VDb25zdHJ1Y3Rvck5hbWUocHJlZml4OiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgcmV0dXJuVHlwZVN0cmluZyA9IGdpdmVuUmV0dXJuVHlwZVN0cmluZygpCiAgICAgICAgbGV0IChhbm5vdGF0aW9uLCBfLCBfKSA9IG1ldGhvZEluZm8oKQogICAgICAgIGxldCBwcm9kdWNlQ2xvc3VyZSA9ICIoU3R1YmJlcjxcKHJldHVyblR5cGVTdHJpbmcpPikgLT4gVm9pZCIKICAgICAgICBsZXQgY2xhdXNlQ29uc3RyYWludHMgPSB3aGVyZUNsYXVzZUV4cHJlc3Npb24oKQoKICAgICAgICBpZiBmaWx0ZXJlZFBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAiXChhbm5vdGF0aW9uKXB1YmxpYyBzdGF0aWMgZnVuYyBcKG1ldGhvZC5zaG9ydE5hbWUpKHdpbGxQcm9kdWNlOiBcKHByb2R1Y2VDbG9zdXJlKSkgLT4gXChwcmVmaXgpTWV0aG9kU3R1YiIgKyBjbGF1c2VDb25zdHJhaW50cwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAiXChhbm5vdGF0aW9uKXB1YmxpYyBzdGF0aWMgZnVuYyBcKG1ldGhvZC5zaG9ydE5hbWUpKFwocGFyYW1ldGVyc0ZvclByb3h5U2lnbmF0dXJlKCkpLCB3aWxsUHJvZHVjZTogXChwcm9kdWNlQ2xvc3VyZSkpIC0+IFwocHJlZml4KU1ldGhvZFN0dWIiICsgY2xhdXNlQ29uc3RyYWludHMKICAgICAgICB9CiAgICB9CgogICAgZnVuYyBnaXZlblByb2R1Y2VDb25zdHJ1Y3Rvck5hbWVUaHJvd3MocHJlZml4OiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgcmV0dXJuVHlwZVN0cmluZyA9IGdpdmVuUmV0dXJuVHlwZVN0cmluZygpCiAgICAgICAgbGV0IChhbm5vdGF0aW9uLCBfLCBfKSA9IG1ldGhvZEluZm8oKQogICAgICAgIGxldCBwcm9kdWNlQ2xvc3VyZSA9ICIoU3R1YmJlclRocm93czxcKHJldHVyblR5cGVTdHJpbmcpPikgLT4gVm9pZCIKICAgICAgICBsZXQgY2xhdXNlQ29uc3RyYWludHMgPSB3aGVyZUNsYXVzZUV4cHJlc3Npb24oKQoKICAgICAgICBpZiBmaWx0ZXJlZFBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAiXChhbm5vdGF0aW9uKXB1YmxpYyBzdGF0aWMgZnVuYyBcKG1ldGhvZC5zaG9ydE5hbWUpKHdpbGxQcm9kdWNlOiBcKHByb2R1Y2VDbG9zdXJlKSkgLT4gXChwcmVmaXgpTWV0aG9kU3R1YiIgKyBjbGF1c2VDb25zdHJhaW50cwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAiXChhbm5vdGF0aW9uKXB1YmxpYyBzdGF0aWMgZnVuYyBcKG1ldGhvZC5zaG9ydE5hbWUpKFwocGFyYW1ldGVyc0ZvclByb3h5U2lnbmF0dXJlKCkpLCB3aWxsUHJvZHVjZTogXChwcm9kdWNlQ2xvc3VyZSkpIC0+IFwocHJlZml4KU1ldGhvZFN0dWIiICsgY2xhdXNlQ29uc3RyYWludHMKICAgICAgICB9CiAgICB9CgogICAgZnVuYyBnaXZlblByb2R1Y2VDb25zdHJ1Y3RvcihwcmVmaXg6IFN0cmluZyA9ICIiKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlU3RyaW5nID0gZ2l2ZW5SZXR1cm5UeXBlU3RyaW5nKCkKICAgICAgICByZXR1cm4gIiIiCiAgICAgICAgbGV0IHdpbGxSZXR1cm46IFtcKHJldHVyblR5cGVTdHJpbmcpXSA9IFtdCiAgICAgICAgXHRcdFx0bGV0IGdpdmVuOiBcKHByZWZpeClHaXZlbiA9IHsgXChnaXZlbkNvbnN0cnVjdG9yKHByZWZpeDogcHJlZml4KSkgfSgpCiAgICAgICAgXHRcdFx0bGV0IHN0dWJiZXIgPSBnaXZlbi5zdHViKGZvcjogKFwocmV0dXJuVHlwZVN0cmluZykpLnNlbGYpCiAgICAgICAgXHRcdFx0d2lsbFByb2R1Y2Uoc3R1YmJlcikKICAgICAgICBcdFx0XHRyZXR1cm4gZ2l2ZW4KICAgICAgICAiIiIKICAgIH0KCiAgICBmdW5jIGdpdmVuUHJvZHVjZUNvbnN0cnVjdG9yVGhyb3dzKHByZWZpeDogU3RyaW5nID0gIiIpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IHJldHVyblR5cGVTdHJpbmcgPSBnaXZlblJldHVyblR5cGVTdHJpbmcoKQogICAgICAgIHJldHVybiAiIiIKICAgICAgICBsZXQgd2lsbFRocm93OiBbRXJyb3JdID0gW10KICAgICAgICBcdFx0XHRsZXQgZ2l2ZW46IFwocHJlZml4KUdpdmVuID0geyBcKGdpdmVuQ29uc3RydWN0b3JUaHJvd3MocHJlZml4OiBwcmVmaXgpKSB9KCkKICAgICAgICBcdFx0XHRsZXQgc3R1YmJlciA9IGdpdmVuLnN0dWJUaHJvd3MoZm9yOiAoXChyZXR1cm5UeXBlU3RyaW5nKSkuc2VsZikKICAgICAgICBcdFx0XHR3aWxsUHJvZHVjZShzdHViYmVyKQogICAgICAgIFx0XHRcdHJldHVybiBnaXZlbgogICAgICAgICIiIgogICAgfQoKICAgIC8vIFZlcmlmeQogICAgZnVuYyB2ZXJpZmljYXRpb25Qcm94eUNvbnN0cnVjdG9yTmFtZShwcmVmaXg6IFN0cmluZyA9ICIiKSAtPiBTdHJpbmcgewogICAgICAgIGxldCAoYW5ub3RhdGlvbiwgbWV0aG9kTmFtZSwgZ2VuZXJpY0NvbnN0cmFpbnMpID0gbWV0aG9kSW5mbygpCgogICAgICAgIGlmIGZpbHRlcmVkUGFyYW1ldGVycy5pc0VtcHR5IHsKICAgICAgICAgICAgcmV0dXJuICJcKGFubm90YXRpb24pcHVibGljIHN0YXRpYyBmdW5jIFwobWV0aG9kTmFtZSkoXChyZXR1cm5pbmdQYXJhbWV0ZXIoZmFsc2UsdHJ1ZSkpKSAtPiBcKHByZWZpeClWZXJpZnlcKGdlbmVyaWNDb25zdHJhaW5zKSIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gIlwoYW5ub3RhdGlvbilwdWJsaWMgc3RhdGljIGZ1bmMgXChtZXRob2ROYW1lKShcKHBhcmFtZXRlcnNGb3JQcm94eVNpZ25hdHVyZSgpKVwocmV0dXJuaW5nUGFyYW1ldGVyKHRydWUsdHJ1ZSkpKSAtPiBcKHByZWZpeClWZXJpZnlcKGdlbmVyaWNDb25zdHJhaW5zKSIKICAgICAgICB9CiAgICB9CgogICAgZnVuYyB2ZXJpZmljYXRpb25Qcm94eUNvbnN0cnVjdG9yKHByZWZpeDogU3RyaW5nID0gIiIpIC0+IFN0cmluZyB7CiAgICAgICAgaWYgZmlsdGVyZWRQYXJhbWV0ZXJzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gInJldHVybiBcKHByZWZpeClWZXJpZnkobWV0aG9kOiAuXChwcm90b3R5cGUpKSIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gInJldHVybiBcKHByZWZpeClWZXJpZnkobWV0aG9kOiAuXChwcm90b3R5cGUpKFwocGFyYW1ldGVyc0ZvclByb3h5SW5pdCgpKSkpIgogICAgICAgIH0KICAgIH0KCiAgICAvLyBQZXJmb3JtCiAgICBmdW5jIHBlcmZvcm1Qcm94eUNvbnN0cnVjdG9yTmFtZShwcmVmaXg6IFN0cmluZyA9ICIiKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBib2R5OiBTdHJpbmcgPSB7CiAgICAgICAgICAgIGxldCAoYW5ub3RhdGlvbiwgbWV0aG9kTmFtZSwgZ2VuZXJpY0NvbnN0cmFpbnMpID0gbWV0aG9kSW5mbygpCgogICAgICAgICAgICBpZiBmaWx0ZXJlZFBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIlwoYW5ub3RhdGlvbilwdWJsaWMgc3RhdGljIGZ1bmMgXChtZXRob2ROYW1lKShcKHJldHVybmluZ1BhcmFtZXRlcih0cnVlLGZhbHNlKSlwZXJmb3JtOiBAZXNjYXBpbmcgXChwZXJmb3JtUHJveHlDbG9zdXJlVHlwZSgpKSkgLT4gXChwcmVmaXgpUGVyZm9ybVwoZ2VuZXJpY0NvbnN0cmFpbnMpIgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuICJcKGFubm90YXRpb24pcHVibGljIHN0YXRpYyBmdW5jIFwobWV0aG9kTmFtZSkoXChwYXJhbWV0ZXJzRm9yUHJveHlTaWduYXR1cmUoKSksIFwocmV0dXJuaW5nUGFyYW1ldGVyKHRydWUsZmFsc2UpKXBlcmZvcm06IEBlc2NhcGluZyBcKHBlcmZvcm1Qcm94eUNsb3N1cmVUeXBlKCkpKSAtPiBcKHByZWZpeClQZXJmb3JtXChnZW5lcmljQ29uc3RyYWlucykiCiAgICAgICAgICAgIH0KICAgICAgICB9KCkKICAgICAgICByZXR1cm4gcmVwbGFjaW5nU2VsZihib2R5KQogICAgfQoKICAgIGZ1bmMgcGVyZm9ybVByb3h5Q29uc3RydWN0b3IocHJlZml4OiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICBpZiBmaWx0ZXJlZFBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAicmV0dXJuIFwocHJlZml4KVBlcmZvcm0obWV0aG9kOiAuXChwcm90b3R5cGUpLCBwZXJmb3JtczogcGVyZm9ybSkiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJyZXR1cm4gXChwcmVmaXgpUGVyZm9ybShtZXRob2Q6IC5cKHByb3RvdHlwZSkoXChwYXJhbWV0ZXJzRm9yUHJveHlJbml0KCkpKSwgcGVyZm9ybXM6IHBlcmZvcm0pIgogICAgICAgIH0KICAgIH0KCiAgICBmdW5jIHBlcmZvcm1Qcm94eUNsb3N1cmVUeXBlKCkgLT4gU3RyaW5nIHsKICAgICAgICBpZiBmaWx0ZXJlZFBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAiKCkgLT4gVm9pZCIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsZXQgcGFyYW1ldGVycyA9IHNlbGYucGFyYW1ldGVycwogICAgICAgICAgICAgICAgLm1hcCB7ICJcKCQwLmp1c3RQZXJmb3JtVHlwZSkiIH0KICAgICAgICAgICAgICAgIC5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKQogICAgICAgICAgICByZXR1cm4gIihcKHBhcmFtZXRlcnMpKSAtPiBWb2lkIgogICAgICAgIH0KICAgIH0KCiAgICBmdW5jIHBlcmZvcm1Qcm94eUNsb3N1cmVDYWxsKCkgLT4gU3RyaW5nIHsKICAgICAgICBpZiBmaWx0ZXJlZFBhcmFtZXRlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgIHJldHVybiAicGVyZm9ybT8oKSIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsZXQgcGFyYW1ldGVycyA9IGZpbHRlcmVkUGFyYW1ldGVycwogICAgICAgICAgICAgICAgLm1hcCB7IHAgaW4KICAgICAgICAgICAgICAgICAgICBsZXQgd3JhcHBlZCA9IFBhcmFtZXRlcldyYXBwZXIocCwgc2VsZi5nZXRWYXJpYWRpY1BhcmFtZXRlcnNOYW1lcygpKQogICAgICAgICAgICAgICAgICAgIGxldCBpc0F1dG9sb3N1cmUgPSB3cmFwcGVkLmp1c3RUeXBlLmhhc1ByZWZpeCgiQGF1dG9jbG9zdXJlIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIlwocC5pbm91dCA/ICImIiA6ICIiKWBcKHAubmFtZSlgXChpc0F1dG9sb3N1cmUgPyAiKCkiIDogIiIpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgICAgIHJldHVybiAicGVyZm9ybT8oXChwYXJhbWV0ZXJzKSkiCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmMgcGVyZm9ybUNhbGwoKSAtPiBTdHJpbmcgewogICAgICAgIGd1YXJkICFtZXRob2QuaXNJbml0aWFsaXplciBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICBsZXQgdHlwZSA9IHBlcmZvcm1Qcm94eUNsb3N1cmVUeXBlKCkKICAgICAgICB2YXIgcHJveHkgPSBmaWx0ZXJlZFBhcmFtZXRlcnMuaXNFbXB0eSA/ICJcKHByb3RvdHlwZSkiIDogIlwocHJvdG90eXBlKShcKHBhcmFtZXRlcnNGb3JNZXRob2RDYWxsKCkpKSIKCiAgICAgICAgbGV0IGNhc3QgPSAibGV0IHBlcmZvcm0gPSBtZXRob2RQZXJmb3JtVmFsdWUoLlwocHJveHkpKSBhcz8gXCh0eXBlKSIKICAgICAgICBsZXQgY2FsbCA9IHBlcmZvcm1Qcm94eUNsb3N1cmVDYWxsKCkKCiAgICAgICAgcmV0dXJuICJcblx0XHRcKGNhc3QpXG5cdFx0XChjYWxsKSIKICAgIH0KCiAgICAvLyBIZWxwZXJzCiAgICBwcml2YXRlIGZ1bmMgcGFyYW1ldGVyc0Zvck1ldGhvZENhbGwoKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBnZW5lcmljcyA9IGdldEdlbmVyaWNzV2l0aG91dENvbnN0cmFpbnRzKCkKICAgICAgICByZXR1cm4gcGFyYW1ldGVycy5tYXAgeyAkMC53cmFwcGVkRm9yQ2FsbHMoZ2VuZXJpY3MsIGhhc0F2YWlsYWJpbGl0eSkgfS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKQogICAgfQoKICAgIHByaXZhdGUgZnVuYyBwYXJhbWV0ZXJzRm9yTWV0aG9kVHlwZURlY2xhcmF0aW9uKGF2YWlsYWJpbGl0eTogQm9vbCkgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgZ2VuZXJpY3MgPSBnZXRHZW5lcmljc1dpdGhvdXRDb25zdHJhaW50cygpCiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnMubWFwIHsgcGFyYW0gaW4KICAgICAgICAgICAgaWYgcGFyYW0uaXNHZW5lcmljKGdlbmVyaWNzKSB7IHJldHVybiBwYXJhbS5nZW5lcmljVHlwZSB9CiAgICAgICAgICAgIGlmIGF2YWlsYWJpbGl0eSB7IHJldHVybiBwYXJhbS50eXBlRXJhc2VkVHlwZSB9CiAgICAgICAgICAgIHJldHVybiByZXBsYWNpbmdTZWxmKHBhcmFtLm5lc3RlZFR5cGUpCiAgICAgICAgfS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKQogICAgfQoKICAgIHByaXZhdGUgZnVuYyBwYXJhbWV0ZXJzRm9yUHJveHlTaWduYXR1cmUoKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiBwYXJhbWV0ZXJzLm1hcCB7IHAgaW4KICAgICAgICAgICAgcmV0dXJuICJcKHAubGFiZWxBbmROYW1lKCkpOiBcKHJlcGxhY2luZ1NlbGYocC5uZXN0ZWRUeXBlKSkiCiAgICAgICAgfS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKQogICAgfQoKICAgIHByaXZhdGUgZnVuYyBwYXJhbWV0ZXJzRm9yU3R1YlNpZ25hdHVyZSgpIC0+IFN0cmluZyB7CiAgICAgICAgZnVuYyByZXBsYWNpbmcoZmlyc3Q6IFN0cmluZywgaW4gZnVsbDogU3RyaW5nLCB3aXRoIG90aGVyOiBTdHJpbmcpIC0+IFN0cmluZyB7CiAgICAgICAgICAgIGd1YXJkIGxldCByYW5nZSA9IGZ1bGwucmFuZ2Uob2Y6IGZpcnN0KSBlbHNlIHsgcmV0dXJuIGZ1bGwgfQogICAgICAgICAgICByZXR1cm4gZnVsbC5yZXBsYWNpbmdDaGFyYWN0ZXJzKGluOiByYW5nZSwgd2l0aDogb3RoZXIpCiAgICAgICAgfQogICAgICAgIGxldCBwcmVmaXggPSBtZXRob2Quc2hvcnROYW1lCiAgICAgICAgbGV0IGZ1bGwgPSBtZXRob2QubmFtZQogICAgICAgIGxldCByYW5nZSA9IGZ1bGwucmFuZ2Uob2Y6IHByZWZpeCkhCiAgICAgICAgdmFyIHVucmVmaW5lZCA9ICJcKGZ1bGxbcmFuZ2UudXBwZXJCb3VuZC4uLl0pIgogICAgICAgIHBhcmFtZXRlcnMubWFwIHsgcCAtPiAoU3RyaW5nLFN0cmluZykgaW4KICAgICAgICAgICAgcmV0dXJuICgiXChwLnR5cGUpIiwiXChwLmp1c3RUeXBlKSIpCiAgICAgICAgfS5mb3JFYWNoIHsKICAgICAgICAgICAgdW5yZWZpbmVkID0gcmVwbGFjaW5nKGZpcnN0OiAkMCwgaW46IHVucmVmaW5lZCwgd2l0aDogJDEpCiAgICAgICAgfQogICAgICAgIHJldHVybiB1bnJlZmluZWQKICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgcGFyYW1ldGVyc0ZvclByb3h5SW5pdCgpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IGdlbmVyaWNzID0gZ2V0R2VuZXJpY3NXaXRob3V0Q29uc3RyYWludHMoKQogICAgICAgIHJldHVybiBwYXJhbWV0ZXJzLm1hcCB7ICJcKCQwLndyYXBwZWRGb3JQcm94eShnZW5lcmljcywgaGFzQXZhaWxhYmlsaXR5KSkiIH0uam9pbmVkKHNlcGFyYXRvcjogIiwgIikKICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgaXNHZW5lcmljKCkgLT4gQm9vbCB7CiAgICAgICAgcmV0dXJuIG1ldGhvZC5zaG9ydE5hbWUuY29udGFpbnMoIjwiKSAmJiBtZXRob2Quc2hvcnROYW1lLmNvbnRhaW5zKCI+IikKICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgZ2V0VmFyaWFkaWNQYXJhbWV0ZXJzTmFtZXMoKSAtPiBbU3RyaW5nXSB7CiAgICAgICAgbGV0IHBhdHRlcm4gPSAiW1xcKHwsXSggKltffFxcd10qICk/ICooXFx3KykgKlxcOiAqKC4rP1xcLlxcLlxcLikiCiAgICAgICAgbGV0IHN0ciA9IG1ldGhvZC5uYW1lCiAgICAgICAgbGV0IHJhbmdlID0gTlNSYW5nZShsb2NhdGlvbjogMCwgbGVuZ3RoOiAoc3RyIGFzIE5TU3RyaW5nKS5sZW5ndGgpCgogICAgICAgIGd1YXJkIGxldCByZWdleCA9IHRyeT8gTlNSZWd1bGFyRXhwcmVzc2lvbihwYXR0ZXJuOiBwYXR0ZXJuKSBlbHNlIHsgcmV0dXJuIFtdIH0KCiAgICAgICAgdmFyIHJlc3VsdDogW1N0cmluZ10gPSByZWdleAogICAgICAgICAgICAubWF0Y2hlcyhpbjogc3RyLCBvcHRpb25zOiBbXSwgcmFuZ2U6IHJhbmdlKQogICAgICAgICAgICAuY29tcGFjdE1hcCB7IG1hdGNoIC0+IFN0cmluZz8gaW4KICAgICAgICAgICAgICAgIGd1YXJkIGxldCBuYW1lUmFuZ2UgPSBSYW5nZShtYXRjaC5yYW5nZShhdDogMiksIGluOiBzdHIpIGVsc2UgeyByZXR1cm4gbmlsIH0KICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcoc3RyW25hbWVSYW5nZV0pCiAgICAgICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0CiAgICB9CgogICAgLy8vIFJldHVybnMgbGlzdCBvZiBnZW5lcmljcyB1c2VkIGluIG1ldGhvZCBzaWduYXR1cmUsIHdpdGhvdXQgdGhlaXIgY29uc3RyYWludHMgKGxpa2UgW1QsVSxWXSkKICAgIC8vLwogICAgLy8vIC0gUmV0dXJuczogQXJyYXkgb2Ygc3RyaW5ncywgd2hlcmUgZWFjaCBzdHJpbmdzIHJlcHJlc2VudCBnZW5lcmljIG5hbWUKICAgIHByaXZhdGUgZnVuYyBnZXRHZW5lcmljc1dpdGhvdXRDb25zdHJhaW50cygpIC0+IFtTdHJpbmddIHsKICAgICAgICBsZXQgbmFtZSA9IG1ldGhvZC5zaG9ydE5hbWUKICAgICAgICBndWFyZCBsZXQgc3RhcnQgPSBuYW1lLmluZGV4KG9mOiAiPCIpLCBsZXQgZW5kID0gbmFtZS5pbmRleChvZjogIj4iKSBlbHNlIHsgcmV0dXJuIFtdIH0KCiAgICAgICAgdmFyIGdlblBhcnQgPSBuYW1lW3N0YXJ0Li4uZW5kXQogICAgICAgIGdlblBhcnQucmVtb3ZlRmlyc3QoKQogICAgICAgIGdlblBhcnQucmVtb3ZlTGFzdCgpCgogICAgICAgIGxldCBwYXJ0cyA9IGdlblBhcnQucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICIgIiwgd2l0aDogIiIpLnNwbGl0KHNlcGFyYXRvcjogIiwiKS5tYXAoU3RyaW5nLmluaXQpCiAgICAgICAgcmV0dXJuIHBhcnRzLm1hcCB7IHN0cmlwR2VuUGFydChwYXJ0OiAkMCkgfQogICAgfQoKICAgIC8vLyBSZXR1cm5zIGxpc3Qgb2YgZ2VuZXJpYyBjb25zdHJhaW50ZXMgZnJvbSBtZXRob2Qgc2lnbmF0dXJlLiBEb2VzIG9ubHkgY29udGFpbiBzdHVmZiBiZXR3ZWVuICc8JyBhbmQgJz4nCiAgICAvLy8KICAgIC8vLyAtIFJldHVybnM6IEFycmF5IG9mIHN0cmluZ3MsIGxpa2UgWyJUOiBDb2RhYmxlIiwgIlU6IFdoYXRldmVyIl0KICAgIHByaXZhdGUgZnVuYyBnZXRHZW5lcmljc0NvbnN0cmFpbnRzKF8gZ2VuZXJpY3M6IFtTdHJpbmddLCBmaWx0ZXJTaW5nbGU6IEJvb2wgPSB0cnVlKSAtPiBbU3RyaW5nXSB7CiAgICAgICAgbGV0IG5hbWUgPSBtZXRob2Quc2hvcnROYW1lCiAgICAgICAgZ3VhcmQgbGV0IHN0YXJ0ID0gbmFtZS5pbmRleChvZjogIjwiKSwgbGV0IGVuZCA9IG5hbWUuaW5kZXgob2Y6ICI+IikgZWxzZSB7IHJldHVybiBbXSB9CgogICAgICAgIHZhciBnZW5QYXJ0ID0gbmFtZVtzdGFydC4uLmVuZF0KICAgICAgICBnZW5QYXJ0LnJlbW92ZUZpcnN0KCkKICAgICAgICBnZW5QYXJ0LnJlbW92ZUxhc3QoKQoKICAgICAgICBsZXQgcGFydHMgPSBnZW5QYXJ0LnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiICIsIHdpdGg6ICIiKS5zcGxpdChzZXBhcmF0b3I6ICIsIikubWFwKFN0cmluZy5pbml0KQogICAgICAgIHJldHVybiBwYXJ0cy5maWx0ZXIgewogICAgICAgICAgICBsZXQgY29tcG9uZW50cyA9ICQwLmNvbXBvbmVudHMoc2VwYXJhdGVkQnk6ICI6IikKICAgICAgICAgICAgcmV0dXJuIChjb21wb25lbnRzLmNvdW50ID09IDIgfHwgIWZpbHRlclNpbmdsZSkgJiYgZ2VuZXJpY3MuY29udGFpbnMoY29tcG9uZW50c1swXSkKICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIGdldEdlbmVyaWNzQW1vbmdQYXJhbWV0ZXJzKCkgLT4gW1N0cmluZ10gewogICAgICAgIHJldHVybiBnZXRHZW5lcmljc1dpdGhvdXRDb25zdHJhaW50cygpLmZpbHRlciB7CiAgICAgICAgICAgIGZvciBwYXJhbSBpbiBzZWxmLnBhcmFtZXRlcnMgewogICAgICAgICAgICAgICAgaWYgcGFyYW0uaXNHZW5lcmljKFskMF0pIHsgcmV0dXJuIHRydWUgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgd3JhcEdlbmVyaWNzKF8gZ2VuZXJpY3M6IFtTdHJpbmddKSAtPiBTdHJpbmcgewogICAgICAgIGd1YXJkICFnZW5lcmljcy5pc0VtcHR5IGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIHJldHVybiAiPFwoZ2VuZXJpY3Muam9pbmVkKHNlcGFyYXRvcjoiLCIpKT4iCiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIHN0cmlwR2VuUGFydChwYXJ0OiBTdHJpbmcpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHBhcnQuc3BsaXQoc2VwYXJhdG9yOiAiOiIpLm1hcChTdHJpbmcuaW5pdCkuZmlyc3QhCiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIHJldHVyblR5cGVTdHJpcHBlZChfIG1ldGhvZDogU291cmNlcnlSdW50aW1lLk1ldGhvZCwgdHlwZTogQm9vbCA9IGZhbHNlKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlUmF3ID0gIlwobWV0aG9kLnJldHVyblR5cGVOYW1lKSIKICAgICAgICB2YXIgc3RyaXBwZWQ6IFN0cmluZyA9IHsKICAgICAgICAgICAgZ3VhcmQgbGV0IHJhbmdlID0gcmV0dXJuVHlwZVJhdy5yYW5nZShvZjogIndoZXJlIikgZWxzZSB7IHJldHVybiByZXR1cm5UeXBlUmF3IH0KICAgICAgICAgICAgdmFyIHN0cmlwcGVkID0gcmV0dXJuVHlwZVJhdwogICAgICAgICAgICBzdHJpcHBlZC5yZW1vdmVTdWJyYW5nZSgocmFuZ2UubG93ZXJCb3VuZCkuLi4pCiAgICAgICAgICAgIHJldHVybiBzdHJpcHBlZAogICAgICAgIH0oKQogICAgICAgIHN0cmlwcGVkID0gc3RyaXBwZWQudHJpbW1pbmdDaGFyYWN0ZXJzKGluOiBDaGFyYWN0ZXJTZXQoY2hhcmFjdGVyc0luOiAiICIpKQogICAgICAgIGd1YXJkIHR5cGUgZWxzZSB7IHJldHVybiBzdHJpcHBlZCB9CiAgICAgICAgcmV0dXJuICIoXChzdHJpcHBlZCkpLlR5cGUiCiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIHdoZXJlQ2xhdXNlQ29uc3RyYWludHMoKSAtPiBbU3RyaW5nXSB7CiAgICAgICAgbGV0IHJldHVyblR5cGVSYXcgPSBtZXRob2QucmV0dXJuVHlwZU5hbWUubmFtZQogICAgICAgIGd1YXJkIGxldCByYW5nZSA9IHJldHVyblR5cGVSYXcucmFuZ2Uob2Y6ICJ3aGVyZSIpIGVsc2UgeyByZXR1cm4gW10gfQogICAgICAgIHZhciB3aGVyZUNsYXVzZSA9IHJldHVyblR5cGVSYXcKICAgICAgICB3aGVyZUNsYXVzZS5yZW1vdmVTdWJyYW5nZSguLi4ocmFuZ2UudXBwZXJCb3VuZCkpCiAgICAgICAgcmV0dXJuIHdoZXJlQ2xhdXNlCiAgICAgICAgICAgIC50cmltbWluZ0NoYXJhY3RlcnMoaW46IENoYXJhY3RlclNldC53aGl0ZXNwYWNlc0FuZE5ld2xpbmVzKQogICAgICAgICAgICAuY29tcG9uZW50cyhzZXBhcmF0ZWRCeTogIiwiKQogICAgfQoKICAgIHByaXZhdGUgZnVuYyB3aGVyZUNsYXVzZUV4cHJlc3Npb24oKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBjb25zdHJhaW50cyA9IHdoZXJlQ2xhdXNlQ29uc3RyYWludHMoKQogICAgICAgIGlmIGNvbnN0cmFpbnRzLmlzRW1wdHkgewogICAgICAgICAgICByZXR1cm4gIiIKICAgICAgICB9CiAgICAgICAgcmV0dXJuICIgd2hlcmUgIiArIGNvbnN0cmFpbnRzLmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIG1ldGhvZEluZm8oKSAtPiAoYW5ub3RhdGlvbjogU3RyaW5nLCBtZXRob2ROYW1lOiBTdHJpbmcsIGdlbmVyaWNDb25zdHJhaW5zOiBTdHJpbmcpIHsKICAgICAgICBsZXQgZ2VuZXJpY3MgPSBnZXRHZW5lcmljc0Ftb25nUGFyYW1ldGVycygpCiAgICAgICAgbGV0IG1ldGhvZE5hbWUgPSByZXR1cm5UeXBlTWF0dGVycygpID8gbWV0aG9kLnNob3J0TmFtZSA6ICJcKG1ldGhvZC5jYWxsTmFtZSlcKHdyYXBHZW5lcmljcyhnZW5lcmljcykpIgogICAgICAgIGxldCBjb25zdHJhaW50czogU3RyaW5nID0gewogICAgICAgICAgICBsZXQgY29uc3RyYWludHM6IFtTdHJpbmddCiAgICAgICAgICAgIGlmIHJldHVyblR5cGVNYXR0ZXJzKCkgewogICAgICAgICAgICAgICAgY29uc3RyYWludHMgPSB3aGVyZUNsYXVzZUNvbnN0cmFpbnRzKCkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRzID0gZ2V0R2VuZXJpY3NDb25zdHJhaW50cyhnZW5lcmljcykKICAgICAgICAgICAgfQogICAgICAgICAgICBndWFyZCAhY29uc3RyYWludHMuaXNFbXB0eSBlbHNlIHsgcmV0dXJuICIiIH0KCiAgICAgICAgICAgIHJldHVybiAiIHdoZXJlIFwoY29uc3RyYWludHMuam9pbmVkKHNlcGFyYXRvcjogIiwgIikpIgogICAgICAgIH0oKQogICAgICAgIHZhciBhdHRyaWJ1dGVzID0gc2VsZi5tZXRob2RBdHRyaWJ1dGVzTm9uT2JqYwogICAgICAgIGF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzLmNvbmRlbnNlV2hpdGVzcGFjZSgpCiAgICAgICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMuaXNFbXB0eSA/ICIiIDogIlwoYXR0cmlidXRlcylcblx0XHQiCiAgICAgICAgcmV0dXJuIChhdHRyaWJ1dGVzLCBtZXRob2ROYW1lLCBjb25zdHJhaW50cykKICAgIH0KfQoKZXh0ZW5zaW9uIFN0cmluZyB7CiAgICBmdW5jIGNvbmRlbnNlV2hpdGVzcGFjZSgpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IGNvbXBvbmVudHMgPSBzZWxmLmNvbXBvbmVudHMoc2VwYXJhdGVkQnk6IC53aGl0ZXNwYWNlc0FuZE5ld2xpbmVzKQogICAgICAgIHJldHVybiBjb21wb25lbnRzLmZpbHRlciB7ICEkMC5pc0VtcHR5IH0uam9pbmVkKHNlcGFyYXRvcjogIiAiKQogICAgfQp9CmNsYXNzIFN1YnNjcmlwdFdyYXBwZXIgewogICAgbGV0IHdyYXBwZWQ6IFNvdXJjZXJ5UnVudGltZS5TdWJzY3JpcHQKICAgIHZhciByZWFkb25seTogQm9vbCB7IHJldHVybiAhd3JhcHBlZC5pc011dGFibGUgfQogICAgdmFyIHdyYXBwZWRQYXJhbWV0ZXJzOiBbUGFyYW1ldGVyV3JhcHBlcl0geyByZXR1cm4gd3JhcHBlZC5wYXJhbWV0ZXJzLm1hcCB7IFBhcmFtZXRlcldyYXBwZXIoJDApIH0gfQogICAgdmFyIGNhc2VzQ291bnQ6IEludCB7IHJldHVybiByZWFkb25seSA/IDEgOiAyIH0KICAgIHZhciBuZXN0ZWRUeXBlOiBTdHJpbmcgeyByZXR1cm4gIlwoVHlwZVdyYXBwZXIod3JhcHBlZC5yZXR1cm5UeXBlTmFtZSkubmVzdGVkUGFyYW1ldGVyKSIgfQogICAgbGV0IGFzc29jaWF0ZWRUeXBlczogW1N0cmluZ10/CiAgICBsZXQgZ2VuZXJpY1R5cGVzTGlzdDogW1N0cmluZ10KICAgIGxldCBnZW5lcmljVHlwZXNNb2RpZmllcjogU3RyaW5nPwogICAgbGV0IHdoZXJlQ2xhdXNlOiBTdHJpbmcKICAgIHZhciBoYXNBdmFpbGFiaWxpdHk6IEJvb2wgeyB3cmFwcGVkLmF0dHJpYnV0ZXNbImF2YWlsYWJsZSJdPy5pc0VtcHR5ID09IGZhbHNlIH0KCiAgICBwcml2YXRlIHZhciBtZXRob2RBdHRyaWJ1dGVzOiBTdHJpbmcgewogICAgICAgIHJldHVybiBIZWxwZXJzLmV4dHJhY3RBdHRyaWJ1dGVzKGZyb206IHNlbGYud3JhcHBlZC5hdHRyaWJ1dGVzLCBmaWx0ZXJPdXRTdGFydGluZ1dpdGg6IFsibXV0YXRpbmciLCAiQGlubGluYWJsZSJdKQogICAgfQogICAgcHJpdmF0ZSB2YXIgbWV0aG9kQXR0cmlidXRlc05vbk9iamM6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIEhlbHBlcnMuZXh0cmFjdEF0dHJpYnV0ZXMoZnJvbTogc2VsZi53cmFwcGVkLmF0dHJpYnV0ZXMsIGZpbHRlck91dFN0YXJ0aW5nV2l0aDogWyJtdXRhdGluZyIsICJAaW5saW5hYmxlIiwgIkBvYmpjIl0pCiAgICB9CgogICAgcHJpdmF0ZSBsZXQgbm9TdHViRGVmaW5lZE1lc3NhZ2UgPSAiU3R1YiByZXR1cm4gdmFsdWUgbm90IHNwZWNpZmllZCBmb3Igc3Vic2NyaXB0LiBVc2UgZ2l2ZW4gZmlyc3QuIgoKICAgIHByaXZhdGUgc3RhdGljIHZhciByZWdpc3RlcmVkOiBbU3RyaW5nOiBJbnRdID0gWzpdCiAgICBwcml2YXRlIHN0YXRpYyB2YXIgbmFtZXNXaXRob3V0UmV0dXJuVHlwZTogW1N0cmluZzogSW50XSA9IFs6XQogICAgcHJpdmF0ZSBzdGF0aWMgdmFyIHN1ZmZpeGVzOiBbU3RyaW5nOiBJbnRdID0gWzpdCiAgICBwdWJsaWMgc3RhdGljIGZ1bmMgY2xlYXIoKSAtPiBTdHJpbmcgewogICAgICAgIFN1YnNjcmlwdFdyYXBwZXIucmVnaXN0ZXJlZCA9IFs6XQogICAgICAgIFN1YnNjcmlwdFdyYXBwZXIuc3VmZml4ZXMgPSBbOl0KICAgICAgICBuYW1lc1dpdGhvdXRSZXR1cm5UeXBlID0gWzpdCiAgICAgICAgcmV0dXJuICIiCiAgICB9CiAgICBzdGF0aWMgZnVuYyByZWdpc3RlcihfIG5hbWU6IFN0cmluZywgXyB1bmlxdWVOYW1lOiBTdHJpbmcpIHsKICAgICAgICBsZXQgY291bnQgPSBTdWJzY3JpcHRXcmFwcGVyLnJlZ2lzdGVyZWRbbmFtZV0gPz8gMAogICAgICAgIFN1YnNjcmlwdFdyYXBwZXIucmVnaXN0ZXJlZFtuYW1lXSA9IGNvdW50ICsgMQogICAgICAgIFN1YnNjcmlwdFdyYXBwZXIuc3VmZml4ZXNbdW5pcXVlTmFtZV0gPSBjb3VudCArIDEKICAgIH0KICAgIHN0YXRpYyBmdW5jIHJlZ2lzdGVyKHNob3J0IG5hbWU6IFN0cmluZykgewogICAgICAgIGxldCBjb3VudCA9IFN1YnNjcmlwdFdyYXBwZXIubmFtZXNXaXRob3V0UmV0dXJuVHlwZVtuYW1lXSA/PyAwCiAgICAgICAgU3Vic2NyaXB0V3JhcHBlci5uYW1lc1dpdGhvdXRSZXR1cm5UeXBlW25hbWVdID0gY291bnQgKyAxCiAgICB9CgogICAgZnVuYyByZWdpc3RlcigpIHsKICAgICAgICBTdWJzY3JpcHRXcmFwcGVyLnJlZ2lzdGVyKHJlZ2lzdHJhdGlvbk5hbWUoImdldCIpLHVuaXF1ZU5hbWUpCiAgICAgICAgU3Vic2NyaXB0V3JhcHBlci5yZWdpc3RlcihzaG9ydDogc2hvcnROYW1lKQogICAgICAgIGd1YXJkICFyZWFkb25seSBlbHNlIHsgcmV0dXJuIH0KICAgICAgICBTdWJzY3JpcHRXcmFwcGVyLnJlZ2lzdGVyKHJlZ2lzdHJhdGlvbk5hbWUoInNldCIpLHVuaXF1ZU5hbWUpCiAgICB9CgogICAgaW5pdChfIHdyYXBwZWQ6IFNvdXJjZXJ5UnVudGltZS5TdWJzY3JpcHQpIHsKICAgICAgICBzZWxmLndyYXBwZWQgPSB3cmFwcGVkCiAgICAgICAgYXNzb2NpYXRlZFR5cGVzID0gSGVscGVycy5leHRyYWN0QXNzb2NpYXRlZFR5cGVzKGZyb206IHdyYXBwZWQpCiAgICAgICAgZ2VuZXJpY1R5cGVzTGlzdCA9IEhlbHBlcnMuZXh0cmFjdEdlbmVyaWNzTGlzdChhc3NvY2lhdGVkVHlwZXMpCiAgICAgICAgd2hlcmVDbGF1c2UgPSBIZWxwZXJzLmV4dHJhY3RXaGVyZUNsYXVzZShmcm9tOiB3cmFwcGVkKSA/PyAiIgogICAgICAgIGlmIGxldCB0eXBlcyA9IGFzc29jaWF0ZWRUeXBlcyB7CiAgICAgICAgICAgIGdlbmVyaWNUeXBlc01vZGlmaWVyID0gIjxcKHR5cGVzLmpvaW5lZChzZXBhcmF0b3I6ICIsIikpPiIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBnZW5lcmljVHlwZXNNb2RpZmllciA9IG5pbAogICAgICAgIH0KICAgIH0KCiAgICBmdW5jIHJlZ2lzdHJhdGlvbk5hbWUoXyBhY2Nlc3NvcjogU3RyaW5nKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAic3Vic2NyaXB0X1woYWNjZXNzb3IpX1wod3JhcHBlZFBhcmFtZXRlcnMubWFwKHsgJDAuc2FuaXRpemVkRm9yRW51bUNhc2VOYW1lKCkgfSkuam9pbmVkKHNlcGFyYXRvcjogIl8iKSkiCiAgICB9CiAgICB2YXIgc2hvcnROYW1lOiBTdHJpbmcgeyByZXR1cm4gInB1YmxpYyBzdWJzY3JpcHRcKGdlbmVyaWNUeXBlc01vZGlmaWVyID8/ICIgIikoXCh3cmFwcGVkUGFyYW1ldGVycy5tYXAoeyAkMC5hc01ldGhvZEFyZ3VtZW50KCkgfSkuam9pbmVkKHNlcGFyYXRvcjogIiwgIikpKSIgfQogICAgdmFyIHVuaXF1ZU5hbWU6IFN0cmluZyB7IHJldHVybiAiXChzaG9ydE5hbWUpIC0+IFwod3JhcHBlZC5yZXR1cm5UeXBlTmFtZSlcKHNlbGYud2hlcmVDbGF1c2UpIiB9CgogICAgcHJpdmF0ZSBmdW5jIG5hbWVTdWZmaXgoXyBhY2Nlc3NvcjogU3RyaW5nKSAtPiBTdHJpbmcgewogICAgICAgIGd1YXJkIGxldCBjb3VudCA9IFN1YnNjcmlwdFdyYXBwZXIucmVnaXN0ZXJlZFtyZWdpc3RyYXRpb25OYW1lKGFjY2Vzc29yKV0gZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgZ3VhcmQgY291bnQgPiAxIGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIGd1YXJkIGxldCBpbmRleCA9IFN1YnNjcmlwdFdyYXBwZXIuc3VmZml4ZXNbdW5pcXVlTmFtZV0gZWxzZSB7IHJldHVybiAiIiB9CiAgICAgICAgcmV0dXJuICJfXChpbmRleCkiCiAgICB9CgogICAgLy8gY2FsbAogICAgZnVuYyBzdWJzY3JpcHRDYWxsKCkgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgZ2V0ID0gIlxuXHRcdGdldCB7XChnZXR0ZXIoKSlcblx0XHR9IgogICAgICAgIGxldCBzZXQgPSByZWFkb25seSA/ICIiIDogIlxuXHRcdHNldCB7XChzZXR0ZXIoKSlcblx0XHR9IgogICAgICAgIHZhciBhdHRyaWJ1dGVzID0gc2VsZi5tZXRob2RBdHRyaWJ1dGVzTm9uT2JqYwogICAgICAgIGF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzLmlzRW1wdHkgPyAiIiA6ICJcKGF0dHJpYnV0ZXMpXG5cdCIKICAgICAgICByZXR1cm4gIlwoYXR0cmlidXRlcylcKHVuaXF1ZU5hbWUpIHtcKGdldClcKHNldClcblx0fSIKICAgIH0KICAgIHByaXZhdGUgZnVuYyBnZXR0ZXIoKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBtZXRob2QgPSAiLlwoc3Vic2NyaXB0Q2FzZVByZWZpeCgiZ2V0IikpKFwocGFyYW1ldGVyc0Zvck1ldGhvZENhbGwoKSkpIgogICAgICAgIGxldCBvcHRpb25hbFJldHVybldvcmthcm91bmQgPSAiXCh3cmFwcGVkLnJldHVyblR5cGVOYW1lKSIuaGFzU3VmZml4KCI/IikKICAgICAgICBsZXQgbm9TdHViRGVmaW5lZCA9IChvcHRpb25hbFJldHVybldvcmthcm91bmQgfHwgd3JhcHBlZC5yZXR1cm5UeXBlTmFtZS5pc09wdGlvbmFsKSA/ICJyZXR1cm4gbmlsIiA6ICJvbkZhdGFsRmFpbHVyZShcIlwobm9TdHViRGVmaW5lZE1lc3NhZ2UpXCIpOyBGYWlsdXJlKFwibm9TdHViRGVmaW5lZE1lc3NhZ2VcIikiCiAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICJcblx0XHRcdGFkZEludm9jYXRpb24oXChtZXRob2QpKSIgKwogICAgICAgICAgICAgICAgIlxuXHRcdFx0ZG8geyIgKwogICAgICAgICAgICAgICAgIlxuXHRcdFx0XHRyZXR1cm4gdHJ5IG1ldGhvZFJldHVyblZhbHVlKFwobWV0aG9kKSkuY2FzdGVkKCkiICsKICAgICAgICAgICAgICAgICJcblx0XHRcdH0gY2F0Y2ggeyIgKwogICAgICAgICAgICAgICAgIlxuXHRcdFx0XHRcKG5vU3R1YkRlZmluZWQpIiArCiAgICAgICAgIlxuXHRcdFx0fSIKICAgIH0KICAgIHByaXZhdGUgZnVuYyBzZXR0ZXIoKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBtZXRob2QgPSAiLlwoc3Vic2NyaXB0Q2FzZVByZWZpeCgic2V0IikpKFwocGFyYW1ldGVyc0Zvck1ldGhvZENhbGwoc2V0OiB0cnVlKSkpIgogICAgICAgIHJldHVybiAiXG5cdFx0XHRhZGRJbnZvY2F0aW9uKFwobWV0aG9kKSkiCiAgICB9CgogICAgdmFyIGFzc2VydGlvbk5hbWU6IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHJlYWRvbmx5ID8gYXNzZXJ0aW9uTmFtZSgiZ2V0IikgOiAiXChhc3NlcnRpb25OYW1lKCJnZXQiKSlcblx0XHRcdFwoYXNzZXJ0aW9uTmFtZSgic2V0IikpIgogICAgfQogICAgcHJpdmF0ZSBmdW5jIGFzc2VydGlvbk5hbWUoXyBhY2Nlc3NvcjogU3RyaW5nKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAiY2FzZSAuXChzdWJzY3JpcHRDYXNlUHJlZml4KGFjY2Vzc29yKSk6IHJldHVybiAiICsKICAgICAgICAgICAgIlwiW1woYWNjZXNzb3IpXSBgc3Vic2NyaXB0YFwoZ2VuZXJpY1R5cGVzTW9kaWZpZXIgPz8gIiIpW1wocGFyYW1ldGVyc0ZvckFzc2VydGlvbk5hbWUoKSldXCIiCiAgICB9CgogICAgLy8gbWV0aG9kIHR5cGUKICAgIGZ1bmMgc3Vic2NyaXB0Q2FzZVByZWZpeChfIGFjY2Vzc29yOiBTdHJpbmcpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJcKHJlZ2lzdHJhdGlvbk5hbWUoYWNjZXNzb3IpKVwobmFtZVN1ZmZpeChhY2Nlc3NvcikpIgogICAgfQogICAgZnVuYyBzdWJzY3JpcHRDYXNlTmFtZShfIGFjY2Vzc29yOiBTdHJpbmcsIGF2YWlsYWJpbGl0eTogQm9vbCA9IGZhbHNlKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAiXChzdWJzY3JpcHRDYXNlUHJlZml4KGFjY2Vzc29yKSkoXChwYXJhbWV0ZXJzRm9yTWV0aG9kVHlwZURlY2xhcmF0aW9uKGF2YWlsYWJpbGl0eTogYXZhaWxhYmlsaXR5LCBzZXQ6IGFjY2Vzc29yID09ICJzZXQiKSkpIgogICAgfQogICAgZnVuYyBzdWJzY3JpcHRDYXNlcygpIC0+IFN0cmluZyB7CiAgICAgICAgaWYgcmVhZG9ubHkgewogICAgICAgICAgICByZXR1cm4gImNhc2UgXChzdWJzY3JpcHRDYXNlTmFtZSgiZ2V0IiwgYXZhaWxhYmlsaXR5OiBoYXNBdmFpbGFiaWxpdHkpKSIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gImNhc2UgXChzdWJzY3JpcHRDYXNlTmFtZSgiZ2V0IiwgYXZhaWxhYmlsaXR5OiBoYXNBdmFpbGFiaWxpdHkpKVxuXHRcdGNhc2UgXChzdWJzY3JpcHRDYXNlTmFtZSgic2V0IiwgYXZhaWxhYmlsaXR5OiBoYXNBdmFpbGFiaWxpdHkpKSIKICAgICAgICB9CiAgICB9CiAgICBmdW5jIGVxdWFsQ2FzZShfIGFjY2Vzc29yOiBTdHJpbmcpIC0+IFN0cmluZyB7CiAgICAgICAgdmFyIGxoc1BhcmFtcyA9IHdyYXBwZWQucGFyYW1ldGVycy5tYXAgeyAibGhzXCgkMC5uYW1lLmNhcGl0YWxpemVkKSIgfS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKQogICAgICAgIHZhciByaHNQYXJhbXMgPSB3cmFwcGVkLnBhcmFtZXRlcnMubWFwIHsgInJoc1woJDAubmFtZS5jYXBpdGFsaXplZCkiIH0uam9pbmVkKHNlcGFyYXRvcjogIiwgIikKICAgICAgICB2YXIgY29tcGFyYXRvcnMgPSAiXHRcdFx0XHR2YXIgcmVzdWx0czogW01hdGNoZXIuUGFyYW1ldGVyQ29tcGFyaXNvblJlc3VsdF0gPSBbXVxuIgogICAgICAgIGNvbXBhcmF0b3JzICs9IHdyYXBwZWRQYXJhbWV0ZXJzLm1hcCB7ICJcdFx0XHRcdFwoJDAuY29tcGFyYXRvclJlc3VsdCgpKSIgfS5qb2luZWQoc2VwYXJhdG9yOiAiXG4iKQoKICAgICAgICBpZiBhY2Nlc3NvciA9PSAic2V0IiB7CiAgICAgICAgICAgIGxoc1BhcmFtcyArPSAiLCBsaHNEaWRTZXQiCiAgICAgICAgICAgIHJoc1BhcmFtcyArPSAiLCByaHNEaWRTZXQiCiAgICAgICAgICAgIGNvbXBhcmF0b3JzICs9ICJcblx0XHRcdFx0cmVzdWx0cy5hcHBlbmQoTWF0Y2hlci5QYXJhbWV0ZXJDb21wYXJpc29uUmVzdWx0KFBhcmFtZXRlci5jb21wYXJlKGxoczogbGhzRGlkU2V0LCByaHM6IHJoc0RpZFNldCwgd2l0aDogbWF0Y2hlciksIGxoc0RpZFNldCwgcmhzRGlkU2V0LCBcIm5ld1ZhbHVlXCIpKSIKICAgICAgICB9CgogICAgICAgIGNvbXBhcmF0b3JzICs9ICJcblx0XHRcdFx0cmV0dXJuIE1hdGNoZXIuQ29tcGFyaXNvblJlc3VsdChyZXN1bHRzKSIKCiAgICAgICAgLy8gY29tcGFyYXRvclJlc3VsdCgpCiAgICAgICAgcmV0dXJuICJjYXNlIChsZXQgLlwoc3Vic2NyaXB0Q2FzZVByZWZpeChhY2Nlc3NvcikpKFwobGhzUGFyYW1zKSksIGxldCAuXChzdWJzY3JpcHRDYXNlUHJlZml4KGFjY2Vzc29yKSkoXChyaHNQYXJhbXMpKSk6XG4iICsgY29tcGFyYXRvcnMKICAgIH0KICAgIGZ1bmMgZXF1YWxDYXNlcygpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHJlYWRvbmx5ID8gZXF1YWxDYXNlKCJnZXQiKSA6ICJcKGVxdWFsQ2FzZSgiZ2V0IikpXG5cdFx0XHRcKGVxdWFsQ2FzZSgic2V0IikpIgogICAgfQogICAgZnVuYyBpbnRWYWx1ZUNhc2UoKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiByZWFkb25seSA/IGludFZhbHVlQ2FzZSgiZ2V0IikgOiAiXChpbnRWYWx1ZUNhc2UoImdldCIpKVxuXHRcdFx0XChpbnRWYWx1ZUNhc2UoInNldCIpKSIKICAgIH0KICAgIGZ1bmMgaW50VmFsdWVDYXNlKF8gYWNjZXNzb3I6IFN0cmluZykgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgcGFyYW1zID0gd3JhcHBlZFBhcmFtZXRlcnMuZW51bWVyYXRlZCgpLm1hcCB7IG9mZnNldCwgXyBpbgogICAgICAgICAgICByZXR1cm4gInBcKG9mZnNldCkiCiAgICAgICAgfQogICAgICAgIGxldCBkZWZpbml0aW9ucyA9IHBhcmFtcy5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKSArIChhY2Nlc3NvciA9PSAic2V0IiA/ICIsIF8iIDogIiIpCiAgICAgICAgbGV0IHBhcmFtc1N1bSA9IHBhcmFtcy5tYXAoeyAiXCgkMCkuaW50VmFsdWUiIH0pLmpvaW5lZChzZXBhcmF0b3I6ICIgKyAiKQogICAgICAgIHJldHVybiAiY2FzZSBsZXQgLlwoc3Vic2NyaXB0Q2FzZVByZWZpeChhY2Nlc3NvcikpKFwoZGVmaW5pdGlvbnMpKTogcmV0dXJuIFwocGFyYW1zU3VtKSIKICAgIH0KCiAgICAvLyBHaXZlbgogICAgZnVuYyBnaXZlbkNvbnN0cnVjdG9yTmFtZSgpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IHJldHVyblR5cGVTdHJpbmcgPSByZXR1cm5zU2VsZiA/IHJlcGxhY2VTZWxmIDogVHlwZVdyYXBwZXIod3JhcHBlZC5yZXR1cm5UeXBlTmFtZSkuc3RyaXBwZWQKICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHNlbGYubWV0aG9kQXR0cmlidXRlc05vbk9iamMKICAgICAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcy5pc0VtcHR5ID8gIiIgOiAiXChhdHRyaWJ1dGVzKVxuXHRcdCIKICAgICAgICByZXR1cm4gIlwoYXR0cmlidXRlcylwdWJsaWMgc3RhdGljIGZ1bmMgYHN1YnNjcmlwdGBcKGdlbmVyaWNUeXBlc01vZGlmaWVyID8/ICIiKShcKHBhcmFtZXRlcnNGb3JQcm94eVNpZ25hdHVyZSgpKSwgd2lsbFJldHVybjogXChyZXR1cm5UeXBlU3RyaW5nKS4uLikgLT4gU3Vic2NyaXB0U3R1YiIKICAgIH0KICAgIGZ1bmMgZ2l2ZW5Db25zdHJ1Y3RvcigpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJyZXR1cm4gR2l2ZW4obWV0aG9kOiAuXChzdWJzY3JpcHRDYXNlUHJlZml4KCJnZXQiKSkoXChwYXJhbWV0ZXJzRm9yUHJveHlJbml0KCkpKSwgcHJvZHVjdHM6IHdpbGxSZXR1cm4ubWFwKHsgU3R1YlByb2R1Y3QucmV0dXJuKCQwIGFzIEFueSkgfSkpIgogICAgfQoKICAgIC8vIFZlcmlmeQogICAgZnVuYyB2ZXJpZnlDb25zdHJ1Y3Rvck5hbWUoc2V0OiBCb29sID0gZmFsc2UpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IHJldHVyblR5cGVTdHJpbmcgPSByZXR1cm5zU2VsZiA/IHJlcGxhY2VTZWxmIDogbmVzdGVkVHlwZQogICAgICAgIGxldCByZXR1cm5pbmcgPSBzZXQgPyAiIiA6IHJldHVybmluZ1BhcmFtZXRlcih0cnVlLCB0cnVlKQogICAgICAgIHZhciBhdHRyaWJ1dGVzID0gc2VsZi5tZXRob2RBdHRyaWJ1dGVzTm9uT2JqYwogICAgICAgIGF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzLmlzRW1wdHkgPyAiIiA6ICJcKGF0dHJpYnV0ZXMpXG5cdFx0IgogICAgICAgIHJldHVybiAiXChhdHRyaWJ1dGVzKXB1YmxpYyBzdGF0aWMgZnVuYyBgc3Vic2NyaXB0YFwoZ2VuZXJpY1R5cGVzTW9kaWZpZXIgPz8gIiIpKFwocGFyYW1ldGVyc0ZvclByb3h5U2lnbmF0dXJlKCkpXChyZXR1cm5pbmcpXChzZXQgPyAiLCBzZXQgbmV3VmFsdWU6IFwocmV0dXJuVHlwZVN0cmluZykiIDogIiIpKSAtPiBWZXJpZnkiCiAgICB9CiAgICBmdW5jIHZlcmlmeUNvbnN0cnVjdG9yKHNldDogQm9vbCA9IGZhbHNlKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAicmV0dXJuIFZlcmlmeShtZXRob2Q6IC5cKHN1YnNjcmlwdENhc2VQcmVmaXgoc2V0ID8gInNldCIgOiAiZ2V0IikpKFwocGFyYW1ldGVyc0ZvclByb3h5SW5pdChzZXQ6IHNldCkpKSkiCiAgICB9CgogICAgLy8gR2VuZXJpY3MKICAgIHByaXZhdGUgZnVuYyBnZXRHZW5lcmljcygpIC0+IFtTdHJpbmddIHsKICAgICAgICByZXR1cm4gZ2VuZXJpY1R5cGVzTGlzdAogICAgfQoKICAgIC8vIEhlbHBlcnMKICAgIHByaXZhdGUgdmFyIHJldHVybnNTZWxmOiBCb29sIHsgcmV0dXJuIFR5cGVXcmFwcGVyKHdyYXBwZWQucmV0dXJuVHlwZU5hbWUpLmlzU2VsZlR5cGUgfQogICAgcHJpdmF0ZSB2YXIgcmVwbGFjZVNlbGY6IFN0cmluZyB7IHJldHVybiBDdXJyZW50LnNlbGZUeXBlIH0KICAgIHByaXZhdGUgZnVuYyByZXR1cm5UeXBlU3RyaXBwZWQodHlwZTogQm9vbCA9IGZhbHNlKSAtPiBTdHJpbmcgewogICAgICAgIGxldCByZXR1cm5UeXBlUmF3ID0gIlwod3JhcHBlZC5yZXR1cm5UeXBlTmFtZSkiCiAgICAgICAgdmFyIHN0cmlwcGVkOiBTdHJpbmcgPSB7CiAgICAgICAgICAgIGd1YXJkIGxldCByYW5nZSA9IHJldHVyblR5cGVSYXcucmFuZ2Uob2Y6ICJ3aGVyZSIpIGVsc2UgeyByZXR1cm4gcmV0dXJuVHlwZVJhdyB9CiAgICAgICAgICAgIHZhciBzdHJpcHBlZCA9IHJldHVyblR5cGVSYXcKICAgICAgICAgICAgc3RyaXBwZWQucmVtb3ZlU3VicmFuZ2UoKHJhbmdlLmxvd2VyQm91bmQpLi4uKQogICAgICAgICAgICByZXR1cm4gc3RyaXBwZWQKICAgICAgICB9KCkKICAgICAgICBzdHJpcHBlZCA9IHN0cmlwcGVkLnRyaW1taW5nQ2hhcmFjdGVycyhpbjogQ2hhcmFjdGVyU2V0KGNoYXJhY3RlcnNJbjogIiAiKSkKICAgICAgICBndWFyZCB0eXBlIGVsc2UgeyByZXR1cm4gc3RyaXBwZWQgfQogICAgICAgIHJldHVybiAiKFwoc3RyaXBwZWQpKS5UeXBlIgogICAgfQogICAgcHJpdmF0ZSBmdW5jIHJldHVyblR5cGVNYXR0ZXJzKCkgLT4gQm9vbCB7CiAgICAgICAgbGV0IGNvdW50ID0gU3Vic2NyaXB0V3JhcHBlci5uYW1lc1dpdGhvdXRSZXR1cm5UeXBlW3Nob3J0TmFtZV0gPz8gMAogICAgICAgIHJldHVybiBjb3VudCA+IDEKICAgIH0KCiAgICAvLyBwYXJhbXMKICAgIHByaXZhdGUgZnVuYyByZXR1cm5pbmdQYXJhbWV0ZXIoXyBtdWx0aXBsZTogQm9vbCwgXyBmcm9udDogQm9vbCkgLT4gU3RyaW5nIHsKICAgICAgICBndWFyZCByZXR1cm5UeXBlTWF0dGVycygpIGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgIGxldCByZXR1cm5pbmc6IFN0cmluZyA9ICJyZXR1cm5pbmc6IFwocmV0dXJuVHlwZVN0cmlwcGVkKHR5cGU6IHRydWUpKSIKICAgICAgICBndWFyZCBtdWx0aXBsZSBlbHNlIHsgcmV0dXJuIHJldHVybmluZyB9CiAgICAgICAgcmV0dXJuIGZyb250ID8gIiwgXChyZXR1cm5pbmcpIiA6ICJcKHJldHVybmluZyksICIKICAgIH0KICAgIHByaXZhdGUgZnVuYyBwYXJhbWV0ZXJzRm9yTWV0aG9kVHlwZURlY2xhcmF0aW9uKGF2YWlsYWJpbGl0eTogQm9vbCA9IGZhbHNlLCBzZXQ6IEJvb2wgPSBmYWxzZSkgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgZ2VuZXJpY3M6IFtTdHJpbmddID0gZ2V0R2VuZXJpY3MoKQogICAgICAgIGxldCBwYXJhbXMgPSB3cmFwcGVkUGFyYW1ldGVycy5tYXAgeyBwYXJhbSBpbgogICAgICAgICAgICBpZiBwYXJhbS5pc0dlbmVyaWMoZ2VuZXJpY3MpIHsgcmV0dXJuIHBhcmFtLmdlbmVyaWNUeXBlIH0KICAgICAgICAgICAgaWYgYXZhaWxhYmlsaXR5IHsgcmV0dXJuIHBhcmFtLnR5cGVFcmFzZWRUeXBlIH0KICAgICAgICAgICAgcmV0dXJuIHBhcmFtLm5lc3RlZFR5cGUKICAgICAgICB9LmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgZ3VhcmQgc2V0IGVsc2UgeyByZXR1cm4gcGFyYW1zIH0KICAgICAgICBsZXQgbmV3VmFsdWUgPSBUeXBlV3JhcHBlcih3cmFwcGVkLnJldHVyblR5cGVOYW1lKS5pc0dlbmVyaWMoZ2VuZXJpY3MpID8gIlBhcmFtZXRlcjxHZW5lcmljQXR0cmlidXRlPiIgOiBuZXN0ZWRUeXBlCiAgICAgICAgcmV0dXJuICJcKHBhcmFtcyksIFwobmV3VmFsdWUpIgogICAgfQogICAgcHJpdmF0ZSBmdW5jIHBhcmFtZXRlcnNGb3JQcm94eUluaXQoc2V0OiBCb29sID0gZmFsc2UpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IGdlbmVyaWNzID0gZ2V0R2VuZXJpY3MoKQogICAgICAgIGxldCBuZXdWYWx1ZSA9IFR5cGVXcmFwcGVyKHdyYXBwZWQucmV0dXJuVHlwZU5hbWUpLmlzR2VuZXJpYyhnZW5lcmljcykgPyAibmV3VmFsdWUud3JhcEFzR2VuZXJpYygpIiA6ICJuZXdWYWx1ZSIKICAgICAgICByZXR1cm4gd3JhcHBlZFBhcmFtZXRlcnMubWFwIHsgIlwoJDAud3JhcHBlZEZvclByb3h5KGdlbmVyaWNzLCBoYXNBdmFpbGFiaWxpdHkpKSIgfS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKSArIChzZXQgPyAiLCBcKG5ld1ZhbHVlKSIgOiAiIikKICAgIH0KICAgIHByaXZhdGUgZnVuYyBwYXJhbWV0ZXJzRm9yUHJveHlTaWduYXR1cmUoc2V0OiBCb29sID0gZmFsc2UpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuIHdyYXBwZWRQYXJhbWV0ZXJzLm1hcCB7ICJcKCQwLmxhYmVsQW5kTmFtZSgpKTogXCgkMC5uZXN0ZWRUeXBlKSIgfS5qb2luZWQoc2VwYXJhdG9yOiAiLCAiKSArIChzZXQgPyAiLCBzZXQgbmV3VmFsdWU6IFwobmVzdGVkVHlwZSkiIDogIiIpCiAgICB9CiAgICBwcml2YXRlIGZ1bmMgcGFyYW1ldGVyc0ZvckFzc2VydGlvbk5hbWUoKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiB3cmFwcGVkUGFyYW1ldGVycy5tYXAgeyAiXCgkMC5sYWJlbEFuZE5hbWUoKSkiIH0uam9pbmVkKHNlcGFyYXRvcjogIiwgIikKICAgIH0KICAgIHByaXZhdGUgZnVuYyBwYXJhbWV0ZXJzRm9yTWV0aG9kQ2FsbChzZXQ6IEJvb2wgPSBmYWxzZSkgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgZ2VuZXJpY3MgPSBnZXRHZW5lcmljcygpCiAgICAgICAgbGV0IHBhcmFtcyA9IHdyYXBwZWRQYXJhbWV0ZXJzLm1hcCB7ICQwLndyYXBwZWRGb3JDYWxscyhnZW5lcmljcywgaGFzQXZhaWxhYmlsaXR5KSB9LmpvaW5lZChzZXBhcmF0b3I6ICIsICIpCiAgICAgICAgbGV0IHBvc3RmaXggPSBUeXBlV3JhcHBlcih3cmFwcGVkLnJldHVyblR5cGVOYW1lKS5pc0dlbmVyaWMoZ2VuZXJpY3MpID8gIi53cmFwQXNHZW5lcmljKCkiIDogIiIKICAgICAgICByZXR1cm4gIXNldCA/IHBhcmFtcyA6ICJcKHBhcmFtcyksIFwobmVzdGVkVHlwZSkudmFsdWUobmV3VmFsdWUpXChwb3N0Zml4KSIKICAgIH0KfQpjbGFzcyBWYXJpYWJsZVdyYXBwZXIgewogICAgbGV0IHZhcmlhYmxlOiBTb3VyY2VyeVJ1bnRpbWUuVmFyaWFibGUKICAgIGxldCBzY29wZTogU3RyaW5nCiAgICB2YXIgcmVhZG9ubHk6IEJvb2wgeyByZXR1cm4gdmFyaWFibGUud3JpdGVBY2Nlc3MuaXNFbXB0eSB9CiAgICB2YXIgcHJpdmF0ZVByb3RvdHlwZU5hbWU6IFN0cmluZyB7IHJldHVybiAiX19wX1wodmFyaWFibGUubmFtZSkiLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiYCIsIHdpdGg6ICIiKSB9CiAgICB2YXIgY2FzZXNDb3VudDogSW50IHsgcmV0dXJuIHJlYWRvbmx5ID8gMSA6IDIgfQoKICAgIHZhciBhY2Nlc3NNb2RpZmllcjogU3RyaW5nIHsKICAgICAgICAvLyBUT0RPOiBGaXggYWNjZXNzIGxldmVscyBmb3IgU3dpZnR5UHJvdG90eXBlCiAgICAgICAgLy8gZ3VhcmQgdmFyaWFibGUudHlwZT8uYWNjZXNzTGV2ZWwgIT0gImludGVybmFsIiBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICByZXR1cm4gInB1YmxpYyAiCiAgICB9CiAgICB2YXIgYXR0cmlidXRlczogU3RyaW5nIHsKICAgICAgICBsZXQgdmFsdWUgPSBIZWxwZXJzLmV4dHJhY3RBdHRyaWJ1dGVzKGZyb206IHNlbGYudmFyaWFibGUuYXR0cmlidXRlcykKICAgICAgICByZXR1cm4gdmFsdWUuaXNFbXB0eSA/ICJcKGFjY2Vzc01vZGlmaWVyKSIgOiAiXCh2YWx1ZSlcblx0XHRcKGFjY2Vzc01vZGlmaWVyKSIKICAgIH0KICAgIHZhciBub1N0dWJEZWZpbmVkTWVzc2FnZTogU3RyaW5nIHsgcmV0dXJuICJcKHNjb3BlKSAtIHN0dWIgdmFsdWUgZm9yIFwodmFyaWFibGUubmFtZSkgd2FzIG5vdCBkZWZpbmVkIiB9CgogICAgdmFyIGdldHRlcjogU3RyaW5nIHsKICAgICAgICBsZXQgc3RhdGljTW9kaWZpZXIgPSB2YXJpYWJsZS5pc1N0YXRpYyA/ICJcKHNjb3BlKS4iIDogIiIKICAgICAgICBsZXQgcmV0dXJuVmFsdWUgPSB2YXJpYWJsZS5pc09wdGlvbmFsID8gIm9wdGlvbmFsR2l2ZW5HZXR0ZXJWYWx1ZSguXChwcm9wZXJ0eUNhc2VHZXROYW1lKSwgXCJcKG5vU3R1YkRlZmluZWRNZXNzYWdlKVwiKSIgOiAiZ2l2ZW5HZXR0ZXJWYWx1ZSguXChwcm9wZXJ0eUNhc2VHZXROYW1lKSwgXCJcKG5vU3R1YkRlZmluZWRNZXNzYWdlKVwiKSIKICAgICAgICByZXR1cm4gIlxuXHRcdGdldCB7XHRcKHN0YXRpY01vZGlmaWVyKWludm9jYXRpb25zLmFwcGVuZCguXChwcm9wZXJ0eUNhc2VHZXROYW1lKSk7IHJldHVybiBcKHN0YXRpY01vZGlmaWVyKVwocHJpdmF0ZVByb3RvdHlwZU5hbWUpID8/IFwocmV0dXJuVmFsdWUpIH0iCiAgICB9CiAgICB2YXIgc2V0dGVyOiBTdHJpbmcgewogICAgICAgIGxldCBzdGF0aWNNb2RpZmllciA9IHZhcmlhYmxlLmlzU3RhdGljID8gIlwoc2NvcGUpLiIgOiAiIgogICAgICAgIGlmIHJlYWRvbmx5IHsKICAgICAgICAgICAgcmV0dXJuICIiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICJcblx0XHRzZXQge1x0XChzdGF0aWNNb2RpZmllcilpbnZvY2F0aW9ucy5hcHBlbmQoLlwocHJvcGVydHlDYXNlU2V0TmFtZSkoLnZhbHVlKG5ld1ZhbHVlKSkpOyBcKHZhcmlhYmxlLmlzU3RhdGljID8gIlwoc2NvcGUpLiIgOiAiIilcKHByaXZhdGVQcm90b3R5cGVOYW1lKSA9IG5ld1ZhbHVlIH0iCiAgICAgICAgfQogICAgfQogICAgdmFyIHByb3RvdHlwZTogU3RyaW5nIHsKICAgICAgICBsZXQgc3RhdGljTW9kaWZpZXIgPSB2YXJpYWJsZS5pc1N0YXRpYyA/ICJzdGF0aWMgIiA6ICIiCgogICAgICAgIHJldHVybiAiXChhdHRyaWJ1dGVzKVwoc3RhdGljTW9kaWZpZXIpdmFyIFwodmFyaWFibGUubmFtZSk6IFwodmFyaWFibGUudHlwZU5hbWUubmFtZSkgeyIgKwogICAgICAgICAgICAiXChnZXR0ZXIpIiArCiAgICAgICAgICAgICJcKHNldHRlcikiICsKICAgICAgICAiXG5cdH0iCiAgICB9CiAgICB2YXIgYXNzZXJ0aW9uTmFtZTogU3RyaW5nIHsKICAgICAgICB2YXIgcmVzdWx0ID0gImNhc2UgLlwocHJvcGVydHlDYXNlR2V0TmFtZSk6IHJldHVybiBcIltnZXRdIC5cKHZhcmlhYmxlLm5hbWUpXCIiCiAgICAgICAgaWYgIXJlYWRvbmx5IHsKICAgICAgICAgICAgcmVzdWx0ICs9ICJcblx0XHRcdGNhc2UgLlwocHJvcGVydHlDYXNlU2V0TmFtZSk6IHJldHVybiBcIltzZXRdIC5cKHZhcmlhYmxlLm5hbWUpXCIiCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQKICAgIH0KCiAgICB2YXIgcHJpdmF0ZVByb3RvdHlwZTogU3RyaW5nIHsKICAgICAgICBsZXQgc3RhdGljTW9kaWZpZXIgPSB2YXJpYWJsZS5pc1N0YXRpYyA/ICJzdGF0aWMgIiA6ICIiCiAgICAgICAgdmFyIHR5cGVOYW1lID0gIlwodmFyaWFibGUudHlwZU5hbWUudW53cmFwcGVkVHlwZU5hbWUpIgogICAgICAgIGxldCBpc1dyYXBwZWRJbkJyYWNrZXRzID0gdHlwZU5hbWUuaGFzUHJlZml4KCIoIikgJiYgdHlwZU5hbWUuaGFzU3VmZml4KCIpIikKICAgICAgICBpZiAhaXNXcmFwcGVkSW5CcmFja2V0cyB7CiAgICAgICAgICAgIHR5cGVOYW1lID0gIihcKHR5cGVOYW1lKSkiCiAgICAgICAgfQogICAgICAgIHJldHVybiAicHJpdmF0ZSBcKHN0YXRpY01vZGlmaWVyKXZhciBcKHByaXZhdGVQcm90b3R5cGVOYW1lKTogXCh0eXBlTmFtZSk/IgogICAgfQogICAgdmFyIG5lc3RlZFR5cGU6IFN0cmluZyB7IHJldHVybiAiXChUeXBlV3JhcHBlcih2YXJpYWJsZS50eXBlTmFtZSkubmVzdGVkUGFyYW1ldGVyKSIgfQoKICAgIGluaXQoXyB2YXJpYWJsZTogU291cmNlcnlSdW50aW1lLlZhcmlhYmxlLCBzY29wZTogU3RyaW5nKSB7CiAgICAgICAgc2VsZi52YXJpYWJsZSA9IHZhcmlhYmxlCiAgICAgICAgc2VsZi5zY29wZSA9IHNjb3BlCiAgICB9CgogICAgZnVuYyBjb21wYXJlQ2FzZXMoKSAtPiBTdHJpbmcgewogICAgICAgIHZhciByZXN1bHQgPSAgcHJvcGVydHlDYXNlR2V0Q29tcGFyZSgpCiAgICAgICAgaWYgIXJlYWRvbmx5IHsKICAgICAgICAgICAgcmVzdWx0ICs9ICJcblx0XHRcdFwocHJvcGVydHlDYXNlU2V0Q29tcGFyZSgpKSIKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgfQoKICAgIGZ1bmMgcHJvcGVydHlHZXQoKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBzdGF0aWNNb2RpZmllciA9IHZhcmlhYmxlLmlzU3RhdGljID8gIlN0YXRpYyIgOiAiIgogICAgICAgIHJldHVybiAicHVibGljIHN0YXRpYyB2YXIgXCh2YXJpYWJsZS5uYW1lKTogXChzdGF0aWNNb2RpZmllcilWZXJpZnkgeyByZXR1cm4gXChzdGF0aWNNb2RpZmllcilWZXJpZnkobWV0aG9kOiAuXChwcm9wZXJ0eUNhc2VHZXROYW1lKSkgfSIKICAgIH0KCiAgICBmdW5jIHByb3BlcnR5U2V0KCkgLT4gU3RyaW5nIHsKICAgICAgICBsZXQgc3RhdGljTW9kaWZpZXIgPSB2YXJpYWJsZS5pc1N0YXRpYyA/ICJTdGF0aWMiIDogIiIKICAgICAgICByZXR1cm4gInB1YmxpYyBzdGF0aWMgZnVuYyBcKHZhcmlhYmxlLm5hbWUpKHNldCBuZXdWYWx1ZTogXChuZXN0ZWRUeXBlKSkgLT4gXChzdGF0aWNNb2RpZmllcilWZXJpZnkgeyByZXR1cm4gXChzdGF0aWNNb2RpZmllcilWZXJpZnkobWV0aG9kOiAuXChwcm9wZXJ0eUNhc2VTZXROYW1lKShuZXdWYWx1ZSkpIH0iCiAgICB9CgogICAgdmFyIHByb3BlcnR5Q2FzZUdldE5hbWU6IFN0cmluZyB7IHJldHVybiAicF9cKHZhcmlhYmxlLm5hbWUpX2dldCIucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6ICJgIiwgd2l0aDogIiIpIH0KICAgIGZ1bmMgcHJvcGVydHlDYXNlR2V0KCkgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gImNhc2UgXChwcm9wZXJ0eUNhc2VHZXROYW1lKSIKICAgIH0KICAgIGZ1bmMgcHJvcGVydHlDYXNlR2V0Q29tcGFyZSgpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJjYXNlICguXChwcm9wZXJ0eUNhc2VHZXROYW1lKSwuXChwcm9wZXJ0eUNhc2VHZXROYW1lKSk6IHJldHVybiBNYXRjaGVyLkNvbXBhcmlzb25SZXN1bHQubWF0Y2giCiAgICB9CiAgICBmdW5jIHByb3BlcnR5Q2FzZUdldEludFZhbHVlKCkgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gImNhc2UgLlwocHJvcGVydHlDYXNlR2V0TmFtZSk6IHJldHVybiAwIgogICAgfQoKICAgIHZhciBwcm9wZXJ0eUNhc2VTZXROYW1lOiBTdHJpbmcgeyByZXR1cm4gInBfXCh2YXJpYWJsZS5uYW1lKV9zZXQiLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiAiYCIsIHdpdGg6ICIiKSB9CiAgICBmdW5jIHByb3BlcnR5Q2FzZVNldCgpIC0+IFN0cmluZyB7CiAgICAgICAgcmV0dXJuICJjYXNlIFwocHJvcGVydHlDYXNlU2V0TmFtZSkoXChuZXN0ZWRUeXBlKSkiCiAgICB9CiAgICBmdW5jIHByb3BlcnR5Q2FzZVNldENvbXBhcmUoKSAtPiBTdHJpbmcgewogICAgICAgIGxldCBsaHNOYW1lID0gImxlZnQiCiAgICAgICAgbGV0IHJoc05hbWUgPSAicmlnaHQiCiAgICAgICAgbGV0IGNvbWFwcmlzb24gPSAiTWF0Y2hlci5QYXJhbWV0ZXJDb21wYXJpc29uUmVzdWx0KFwobmVzdGVkVHlwZSkuY29tcGFyZShsaHM6IFwobGhzTmFtZSksIHJoczogXChyaHNOYW1lKSwgd2l0aDogbWF0Y2hlciksIFwobGhzTmFtZSksIFwocmhzTmFtZSksIFwibmV3VmFsdWVcIikiCiAgICAgICAgbGV0IHJlc3VsdCA9ICJNYXRjaGVyLkNvbXBhcmlzb25SZXN1bHQoW1woY29tYXByaXNvbildKSIKICAgICAgICByZXR1cm4gImNhc2UgKC5cKHByb3BlcnR5Q2FzZVNldE5hbWUpKGxldCBsZWZ0KSwuXChwcm9wZXJ0eUNhc2VTZXROYW1lKShsZXQgcmlnaHQpKTogcmV0dXJuIFwocmVzdWx0KSIKICAgIH0KICAgIGZ1bmMgcHJvcGVydHlDYXNlU2V0SW50VmFsdWUoKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAiY2FzZSAuXChwcm9wZXJ0eUNhc2VTZXROYW1lKShsZXQgbmV3VmFsdWUpOiByZXR1cm4gbmV3VmFsdWUuaW50VmFsdWUiCiAgICB9CgogICAgLy8gR2l2ZW4KICAgIGZ1bmMgZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUocHJlZml4OiBTdHJpbmcgPSAiIikgLT4gU3RyaW5nIHsKICAgICAgICByZXR1cm4gIlwoYXR0cmlidXRlcylzdGF0aWMgZnVuYyBcKHZhcmlhYmxlLm5hbWUpKGdldHRlciBkZWZhdWx0VmFsdWU6IFwoVHlwZVdyYXBwZXIodmFyaWFibGUudHlwZU5hbWUpLnN0cmlwcGVkKS4uLikgLT4gXChwcmVmaXgpUHJvcGVydHlTdHViIgogICAgfQoKICAgIGZ1bmMgZ2l2ZW5Db25zdHJ1Y3RvcihwcmVmaXg6IFN0cmluZyA9ICIiKSAtPiBTdHJpbmcgewogICAgICAgIHJldHVybiAicmV0dXJuIFwocHJlZml4KUdpdmVuKG1ldGhvZDogLlwocHJvcGVydHlDYXNlR2V0TmFtZSksIHByb2R1Y3RzOiBkZWZhdWx0VmFsdWUubWFwKHsgU3R1YlByb2R1Y3QucmV0dXJuKCQwIGFzIEFueSkgfSkpIgogICAgfQp9Cl8lPgo8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU0VUVVAgLSU+PCVfIC0lPgo8JV8gdmFyIGFsbCA9IHR5cGVzLmFsbAogICAgYWxsICs9IHR5cGVzLnByb3RvY29scy5tYXAgeyAkMCB9CiAgICBhbGwgKz0gdHlwZXMucHJvdG9jb2xDb21wb3NpdGlvbnMubWFwIHsgJDAgfQogICAgdmFyIG1vY2tlZENvdW50ID0gMAotJT4KCjwlXyBmb3IgdHlwZSBpbiBhbGwgeyAtJT48JV8gLSU+CjwlXyBsZXQgYXV0b01vY2thYmxlOiBCb29sID0gdHlwZS5pbmhlcml0ZWRUeXBlcy5jb250YWlucygiQXV0b01vY2thYmxlIikgfHwgdHlwZS5hbm5vdGF0aW9uc1siQXV0b01vY2thYmxlIl0gIT0gbmlsCiAgICBsZXQgcHJvdG9jb2xUb0RlY29yYXRlID0gdHlwZXMucHJvdG9jb2xzLmZpcnN0KHdoZXJlOiB7ICQwLm5hbWUgPT0gKHR5cGUuYW5ub3RhdGlvbnNbIm1vY2siXSBhcz8gU3RyaW5nKSB9KQogICAgbGV0IGlubGluZU1vY2thYmxlID0gcHJvdG9jb2xUb0RlY29yYXRlICE9IG5pbAogICAgZ3VhcmQgbGV0IGFQcm90b2NvbCA9IGF1dG9Nb2NrYWJsZSA/IHR5cGUgOiBwcm90b2NvbFRvRGVjb3JhdGUgZWxzZSB7IGNvbnRpbnVlIH0KICAgIG1vY2tlZENvdW50ICs9IDEKCiAgICBsZXQgYXNzb2NpYXRlZFR5cGVzOiBbU3RyaW5nXT8gPSBIZWxwZXJzLmV4dHJhY3RBc3NvY2lhdGVkVHlwZXMoZnJvbTogYVByb3RvY29sKQogICAgbGV0IGF0dHJpYnV0ZXM6IFN0cmluZyA9IEhlbHBlcnMuZXh0cmFjdEF0dHJpYnV0ZXMoZnJvbTogdHlwZS5hdHRyaWJ1dGVzKQogICAgbGV0IHR5cGVBbGlhc2VzOiBbU3RyaW5nXSA9IEhlbHBlcnMuZXh0cmFjdFR5cGVhbGlhc2VzKGZyb206IGFQcm90b2NvbCkKICAgIGxldCBnZW5lcmljVHlwZXNNb2RpZmllcjogU3RyaW5nID0gSGVscGVycy5leHRyYWN0R2VuZXJpY1R5cGVzTW9kaWZpZXIoYXNzb2NpYXRlZFR5cGVzKQogICAgbGV0IGdlbmVyaWNUeXBlc0NvbnN0cmFpbnRzOiBTdHJpbmcgPSBIZWxwZXJzLmV4dHJhY3RHZW5lcmljVHlwZXNDb25zdHJhaW50cyhhc3NvY2lhdGVkVHlwZXMpCiAgICBsZXQgYWxsU3Vic2NyaXB0cyA9IGFQcm90b2NvbC5hbGxTdWJzY3JpcHRzCiAgICBsZXQgYWxsVmFyaWFibGVzID0gdW5pcXVlcyh2YXJpYWJsZXM6IGFQcm90b2NvbC5hbGxWYXJpYWJsZXMuZmlsdGVyKHsgISQwLmlzU3RhdGljIH0pKQogICAgbGV0IGNvbnRhaW5zVmFyaWFibGVzID0gIWFsbFZhcmlhYmxlcy5pc0VtcHR5CiAgICBsZXQgYWxsU3RhdGljVmFyaWFibGVzID0gdW5pcXVlcyh2YXJpYWJsZXM6IGFQcm90b2NvbC5hbGxWYXJpYWJsZXMuZmlsdGVyKHsgJDAuaXNTdGF0aWMgfSkpCiAgICBsZXQgY29udGFpbnNTdGF0aWNWYXJpYWJsZXMgPSAhYWxsU3RhdGljVmFyaWFibGVzLmlzRW1wdHkKICAgIGxldCBhbGxNZXRob2RzID0gdW5pcXVlcyhtZXRob2RzOiBhUHJvdG9jb2wuYWxsTWV0aG9kcy5maWx0ZXIoeyAhJDAuaXNTdGF0aWMgfHwgJDAuaXNJbml0aWFsaXplciB9KSkKICAgIGxldCBzZWxmQ29uc3RyYWluZWQgPSBhbGxNZXRob2RzLm1hcCh3cmFwTWV0aG9kKS5jb250YWlucyh3aGVyZTogeyAkMC5yZXR1cm5zR2VuZXJpY0NvbnN0cmFpbmVkVG9TZWxmIHx8ICQwLnBhcmFtZXRlcnNDb250YWluc1NlbGYgfSkKICAgIGxldCBhY2Nlc3NNb2RpZmllcjogU3RyaW5nID0gc2VsZkNvbnN0cmFpbmVkID8gInB1YmxpYyBmaW5hbCIgOiAib3BlbiIKICAgIEN1cnJlbnQuYWNjZXNzTW9kaWZpZXIgPSBhY2Nlc3NNb2RpZmllciAvLyBUT0RPOiBUZW1wb3Jhcnkgd29ya2Fyb3VuZCBmb3IgYWNjZXNzIG1vZGlmaWVycwogICAgbGV0IGluaGVyaXRGcm9tTlNPYmplY3QgPSB0eXBlLmFubm90YXRpb25zWyJPYmpjUHJvdG9jb2wiXSAhPSBuaWwgfHwgYXR0cmlidXRlcy5jb250YWlucygiQG9iamMiKQogICAgbGV0IGFsbE1ldGhvZHNGb3JNZXRob2RUeXBlID0gdW5pcXVlc1dpdGhvdXRHZW5lcmljQ29uc3RyYWludHMobWV0aG9kczogYVByb3RvY29sLmFsbE1ldGhvZHMuZmlsdGVyKHsgISQwLmlzU3RhdGljIH0pKQogICAgbGV0IGFsbFN0YXRpY01ldGhvZHMgPSB1bmlxdWVzKG1ldGhvZHM6IGFQcm90b2NvbC5hbGxNZXRob2RzLmZpbHRlcih7ICQwLmlzU3RhdGljICYmICEkMC5pc0luaXRpYWxpemVyIH0pKQogICAgbGV0IGFsbFN0YXRpY01ldGhvZHNGb3JNZXRob2RUeXBlID0gdW5pcXVlc1dpdGhvdXRHZW5lcmljQ29uc3RyYWludHMobWV0aG9kczogYVByb3RvY29sLmFsbE1ldGhvZHMuZmlsdGVyKHsgJDAuaXNTdGF0aWMgfSkpCiAgICBsZXQgY29uZm9ybXNUb1N0YXRpY01vY2sgPSAhYWxsU3RhdGljTWV0aG9kcy5pc0VtcHR5IHx8ICFhbGxTdGF0aWNWYXJpYWJsZXMuaXNFbXB0eQogICAgbGV0IGNvbmZvcm1zVG9Nb2NrID0gIWFsbE1ldGhvZHMuaXNFbXB0eSB8fCAhYWxsVmFyaWFibGVzLmlzRW1wdHkgLSU+PCVfIC0lPjwlXyAtJT4KPCVfIGlmIGF1dG9Nb2NrYWJsZSB7IC0lPgovLyBNQVJLOiAtIDwlPSB0eXBlLm5hbWUgJT4KPCU9IGF0dHJpYnV0ZXMgJT4KPCU9IGFjY2Vzc01vZGlmaWVyICU+IGNsYXNzIDwlPSB0eXBlLm5hbWUgJT48JT0gbW9ja1R5cGVOYW1lICU+PCU9IGdlbmVyaWNUeXBlc01vZGlmaWVyICU+OjwlPSBpbmhlcml0RnJvbU5TT2JqZWN0ID8gIiBOU09iamVjdCwiIDogIiIgJT4gPCU9IHR5cGUubmFtZSAlPiwgTW9jazwlPSBjb25mb3Jtc1RvU3RhdGljTW9jayA/ICIsIFN0YXRpY01vY2siIDogIiIgJT48JT0gZ2VuZXJpY1R5cGVzQ29uc3RyYWludHMgJT4gewogICAgcHVibGljIGluaXQoc2VxdWVuY2luZyBzZXF1ZW5jaW5nUG9saWN5OiBTZXF1ZW5jaW5nUG9saWN5ID0gLmxhc3RXcml0dGVuUmVzb2x2ZWRGaXJzdCwgc3R1YmJpbmcgc3R1YmJpbmdQb2xpY3k6IFN0dWJiaW5nUG9saWN5ID0gLndyYXAsIGZpbGU6IFN0YXRpY1N0cmluZyA9ICNmaWxlLCBsaW5lOiBVSW50ID0gI2xpbmUpIHsKICAgICAgICBTd2lmdHlNb2NreVRlc3RPYnNlcnZlci5zZXR1cCgpCiAgICAgICAgc2VsZi5zZXF1ZW5jaW5nUG9saWN5ID0gc2VxdWVuY2luZ1BvbGljeQogICAgICAgIHNlbGYuc3R1YmJpbmdQb2xpY3kgPSBzdHViYmluZ1BvbGljeQogICAgICAgIHNlbGYuZmlsZSA9IGZpbGUKICAgICAgICBzZWxmLmxpbmUgPSBsaW5lCiAgICB9Cgo8JV8gfSBlbHNlIHsgLSU+Ci8vIHNvdXJjZXJ5OmlubGluZTphdXRvOjwlPSB0eXBlLm5hbWUgJT4uYXV0b01vY2tlZAo8JV8gfSAtJT4KPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IE1BSU4gQ0xBU1MgLSU+PCVfIC0lPgogIDwlIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBNT0NLIElOVEVSTkFMUyAtJT48JV8gLSU+CiAgICB2YXIgbWF0Y2hlcjogTWF0Y2hlciA9IE1hdGNoZXIuZGVmYXVsdAogICAgdmFyIHN0dWJiaW5nUG9saWN5OiBTdHViYmluZ1BvbGljeSA9IC53cmFwCiAgICB2YXIgc2VxdWVuY2luZ1BvbGljeTogU2VxdWVuY2luZ1BvbGljeSA9IC5sYXN0V3JpdHRlblJlc29sdmVkRmlyc3QKCiAgICBwcml2YXRlIHZhciBxdWV1ZSA9IERpc3BhdGNoUXVldWUobGFiZWw6ICJjb20uc3dpZnR5bW9ja3kuaW52b2NhdGlvbnMiLCBxb3M6IC51c2VySW50ZXJhY3RpdmUpCiAgICBwcml2YXRlIHZhciBpbnZvY2F0aW9uczogW01ldGhvZFR5cGVdID0gW10KICAgIHByaXZhdGUgdmFyIG1ldGhvZFJldHVyblZhbHVlczogW0dpdmVuXSA9IFtdCiAgICBwcml2YXRlIHZhciBtZXRob2RQZXJmb3JtVmFsdWVzOiBbUGVyZm9ybV0gPSBbXQogICAgcHJpdmF0ZSB2YXIgZmlsZTogU3RhdGljU3RyaW5nPwogICAgcHJpdmF0ZSB2YXIgbGluZTogVUludD8KCiAgICBwdWJsaWMgdHlwZWFsaWFzIFByb3BlcnR5U3R1YiA9IEdpdmVuCiAgICBwdWJsaWMgdHlwZWFsaWFzIE1ldGhvZFN0dWIgPSBHaXZlbgogICAgcHVibGljIHR5cGVhbGlhcyBTdWJzY3JpcHRTdHViID0gR2l2ZW4KICAgIDwlXyBmb3IgdHlwZUFsaWFzIGluIHR5cGVBbGlhc2VzIHsgLSU+CiAgICBwdWJsaWMgdHlwZWFsaWFzIDwlPSB0eXBlQWxpYXMgJT4KICAgIDwlXyB9ICU+IDwlXyAtJT4KCiAgICAvLy8gQ29udmVuaWVuY2UgbWV0aG9kIC0gY2FsbCBzZXR1cE1vY2soKSB0byBleHRlbmQgZGVidWcgaW5mb3JtYXRpb24gd2hlbiBmYWlsdXJlIG9jY3VycwogICAgcHVibGljIGZ1bmMgc2V0dXBNb2NrKGZpbGU6IFN0YXRpY1N0cmluZyA9ICNmaWxlLCBsaW5lOiBVSW50ID0gI2xpbmUpIHsKICAgICAgICBzZWxmLmZpbGUgPSBmaWxlCiAgICAgICAgc2VsZi5saW5lID0gbGluZQogICAgfQoKICAgIC8vLyBDbGVhciBtb2NrIGludGVybmFscy4gWW91IGNhbiBzcGVjaWZ5IHdoYXQgdG8gcmVzZXQgKGludm9jYXRpb25zIGFrYSB2ZXJpZnksIGdpdmVucyBvciBwZXJmb3Jtcykgb3IgbGVhdmUgaXQgZW1wdHkgdG8gY2xlYXIgYWxsIG1vY2sgaW50ZXJuYWxzCiAgICBwdWJsaWMgZnVuYyByZXNldE1vY2soXyBzY29wZXM6IE1vY2tTY29wZS4uLikgewogICAgICAgIGxldCBzY29wZXM6IFtNb2NrU2NvcGVdID0gc2NvcGVzLmlzRW1wdHkgPyBbLmludm9jYXRpb24sIC5naXZlbiwgLnBlcmZvcm1dIDogc2NvcGVzCiAgICAgICAgaWYgc2NvcGVzLmNvbnRhaW5zKC5pbnZvY2F0aW9uKSB7IGludm9jYXRpb25zID0gW10gfQogICAgICAgIGlmIHNjb3Blcy5jb250YWlucyguZ2l2ZW4pIHsgbWV0aG9kUmV0dXJuVmFsdWVzID0gW10gfQogICAgICAgIGlmIHNjb3Blcy5jb250YWlucygucGVyZm9ybSkgeyBtZXRob2RQZXJmb3JtVmFsdWVzID0gW10gfQogICAgfQogICAgPCVfIC0lPgogIDwlIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTVEFUSUMgTU9DSyBJTlRFUk5BTFMgLSU+PCVfIC0lPgogICAgPCVfIGlmIGNvbmZvcm1zVG9TdGF0aWNNb2NrIHsgLSU+CiAgICBzdGF0aWMgdmFyIG1hdGNoZXI6IE1hdGNoZXIgPSBNYXRjaGVyLmRlZmF1bHQKICAgIHN0YXRpYyB2YXIgc3R1YmJpbmdQb2xpY3k6IFN0dWJiaW5nUG9saWN5ID0gLndyYXAKICAgIHN0YXRpYyB2YXIgc2VxdWVuY2luZ1BvbGljeTogU2VxdWVuY2luZ1BvbGljeSA9IC5sYXN0V3JpdHRlblJlc29sdmVkRmlyc3QKICAgIHN0YXRpYyBwcml2YXRlIHZhciBxdWV1ZSA9IERpc3BhdGNoUXVldWUobGFiZWw6ICJjb20uc3dpZnR5bW9ja3kuaW52b2NhdGlvbnMuc3RhdGljIiwgcW9zOiAudXNlckludGVyYWN0aXZlKQogICAgc3RhdGljIHByaXZhdGUgdmFyIGludm9jYXRpb25zOiBbU3RhdGljTWV0aG9kVHlwZV0gPSBbXQogICAgc3RhdGljIHByaXZhdGUgdmFyIG1ldGhvZFJldHVyblZhbHVlczogW1N0YXRpY0dpdmVuXSA9IFtdCiAgICBzdGF0aWMgcHJpdmF0ZSB2YXIgbWV0aG9kUGVyZm9ybVZhbHVlczogW1N0YXRpY1BlcmZvcm1dID0gW10KICAgIHB1YmxpYyB0eXBlYWxpYXMgU3RhdGljUHJvcGVydHlTdHViID0gU3RhdGljR2l2ZW4KICAgIHB1YmxpYyB0eXBlYWxpYXMgU3RhdGljTWV0aG9kU3R1YiA9IFN0YXRpY0dpdmVuCgogICAgLy8vIENsZWFyIG1vY2sgaW50ZXJuYWxzLiBZb3UgY2FuIHNwZWNpZnkgd2hhdCB0byByZXNldCAoaW52b2NhdGlvbnMgYWthIHZlcmlmeSwgZ2l2ZW5zIG9yIHBlcmZvcm1zKSBvciBsZWF2ZSBpdCBlbXB0eSB0byBjbGVhciBhbGwgbW9jayBpbnRlcm5hbHMKICAgIHB1YmxpYyBzdGF0aWMgZnVuYyByZXNldE1vY2soXyBzY29wZXM6IE1vY2tTY29wZS4uLikgewogICAgICAgIGxldCBzY29wZXM6IFtNb2NrU2NvcGVdID0gc2NvcGVzLmlzRW1wdHkgPyBbLmludm9jYXRpb24sIC5naXZlbiwgLnBlcmZvcm1dIDogc2NvcGVzCiAgICAgICAgaWYgc2NvcGVzLmNvbnRhaW5zKC5pbnZvY2F0aW9uKSB7IGludm9jYXRpb25zID0gW10gfQogICAgICAgIGlmIHNjb3Blcy5jb250YWlucyguZ2l2ZW4pIHsgbWV0aG9kUmV0dXJuVmFsdWVzID0gW10gfQogICAgICAgIGlmIHNjb3Blcy5jb250YWlucygucGVyZm9ybSkgeyBtZXRob2RQZXJmb3JtVmFsdWVzID0gW10gfQogICAgfQogICAgPCVfICB9IC0lPgoKICA8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gVkFSSUFCTEVTIC0lPjwlXyAtJT4KICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsVmFyaWFibGVzIHsgLSU+CiAgICA8JV8gaWYgYXV0b01vY2thYmxlIHsgLSU+CiAgICA8JT0gc3R1YlByb3BlcnR5KHZhcmlhYmxlLCJcKHR5cGUubmFtZSlcKG1vY2tUeXBlTmFtZSkiKSAlPgogICAgPCVfIH0gZWxzZSB7ICU+CiAgICA8JT0gc3R1YlByb3BlcnR5KHZhcmlhYmxlLCJcKHR5cGUubmFtZSkiKSAlPgogICAgPCVfIH0gJT4KICAgIDwlXyB9ICU+IDwlXyAtJT4KCiAgPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFNUQVRJQyBWQVJJQUJMRVMgLSU+PCVfIC0lPgogICAgPCVfIGZvciB2YXJpYWJsZSBpbiBhbGxTdGF0aWNWYXJpYWJsZXMgeyAtJT4KICAgIDwlXyBpZiBhdXRvTW9ja2FibGUgeyAtJT4KICAgIDwlPSBzdHViUHJvcGVydHkodmFyaWFibGUsIlwodHlwZS5uYW1lKVwobW9ja1R5cGVOYW1lKSIpICU+CiAgICA8JV8gfSBlbHNlIHsgJT4KICAgIDwlPSBzdHViUHJvcGVydHkodmFyaWFibGUsIlwodHlwZS5uYW1lKSIpICU+CiAgICA8JV8gfSAlPgogICAgPCVfIH0gJT4gPCVfIC0lPgoKICA8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gTUVUSE9EIFJFR0lTVFJBVElPTlMgLSU+PCVfIC0lPgogICAgPCVfIE1ldGhvZFdyYXBwZXIuY2xlYXIoKSAtJT4KICAgIDwlXyBTdWJzY3JpcHRXcmFwcGVyLmNsZWFyKCkgLSU+CiAgICA8JV8gaWYgYXV0b01vY2thYmxlIHsgLSU+CiAgICA8JV8gQ3VycmVudC5zZWxmVHlwZSA9ICJcKHR5cGUubmFtZSlcKG1vY2tUeXBlTmFtZSlcKGdlbmVyaWNUeXBlc01vZGlmaWVyKSIgLSU+CiAgICA8JV8gfSBlbHNlIHsgJT4KICAgIDwlXyBDdXJyZW50LnNlbGZUeXBlID0gIlwodHlwZS5uYW1lKVwobW9ja1R5cGVOYW1lKVwoZ2VuZXJpY1R5cGVzTW9kaWZpZXIpIiAtJT4KICAgIDwlXyB9ICU+CiAgICA8JV8gbGV0IHdyYXBwZWRTdWJzY3JpcHRzID0gYWxsU3Vic2NyaXB0cy5tYXAod3JhcFN1YnNjcmlwdCkgLSU+CiAgICA8JV8gbGV0IHdyYXBwZWRNZXRob2RzID0gYWxsTWV0aG9kcy5tYXAod3JhcE1ldGhvZCkuZmlsdGVyKHsgJDAud3JhcHBlZEluTWV0aG9kVHlwZSgpIH0pIC0lPgogICAgPCVfIGxldCB3cmFwcGVkVmFyaWFibGVzID0gYWxsVmFyaWFibGVzLm1hcChqdXN0V3JhcCkgLSU+CiAgICA8JV8gbGV0IHdyYXBwZWRNZXRob2RzRm9yTWV0aG9kVHlwZSA9IGFsbE1ldGhvZHNGb3JNZXRob2RUeXBlLm1hcCh3cmFwTWV0aG9kKS5maWx0ZXIoeyAkMC53cmFwcGVkSW5NZXRob2RUeXBlKCkgfSkgLSU+CiAgICA8JV8gbGV0IHdyYXBwZWRJbml0aWFsaXplcnMgPSBhbGxNZXRob2RzLm1hcCh3cmFwTWV0aG9kKS5maWx0ZXIoeyAkMC5tZXRob2QuaXNJbml0aWFsaXplciB9KSAtJT4KICAgIDwlXyBsZXQgd3JhcHBlZFN0YXRpY01ldGhvZHMgPSBhbGxTdGF0aWNNZXRob2RzLm1hcCh3cmFwTWV0aG9kKS5maWx0ZXIoeyAkMC53cmFwcGVkSW5NZXRob2RUeXBlKCkgfSkgLSU+CiAgICA8JV8gbGV0IHdyYXBwZWRTdGF0aWNWYXJpYWJsZXMgPSBhbGxTdGF0aWNWYXJpYWJsZXMubWFwKGp1c3RXcmFwKSAtJT4KICAgIDwlXyBsZXQgd3JhcHBlZFN0YXRpY01ldGhvZHNGb3JNZXRob2RUeXBlID0gYWxsU3RhdGljTWV0aG9kc0Zvck1ldGhvZFR5cGUubWFwKHdyYXBNZXRob2QpLmZpbHRlcih7ICQwLndyYXBwZWRJbk1ldGhvZFR5cGUoKSB9KSAtJT4KICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsVmFyaWFibGVzIHsgcHJvcGVydHlSZWdpc3Rlcih2YXJpYWJsZSkgfSAtJT4KICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsU3RhdGljVmFyaWFibGVzIHsgcHJvcGVydHlSZWdpc3Rlcih2YXJpYWJsZSkgfSAtJT4KICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRNZXRob2RzIHsgbWV0aG9kLnJlZ2lzdGVyKCkgfSAtJT4KICAgIDwlXyBmb3Igd3JhcHBlZCBpbiB3cmFwcGVkU3Vic2NyaXB0cyB7IHdyYXBwZWQucmVnaXN0ZXIoKSB9IC0lPgogICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZFN0YXRpY01ldGhvZHMgeyBtZXRob2QucmVnaXN0ZXIoKSB9IC0lPjwlXyAtJT4KICAgIDwlXyBsZXQgdmFyaWFibGVDYXNlc0NvdW50OiBJbnQgPSB3cmFwcGVkVmFyaWFibGVzLnJlZHVjZSgwKSB7IHJldHVybiAkMCArICQxLmNhc2VzQ291bnQgfSAtJT48JV8gLSU+CiAgICA8JV8gbGV0IHN1YnNjcmlwdHNDYXNlc0NvdW50OiBJbnQgPSB3cmFwcGVkU3Vic2NyaXB0cy5yZWR1Y2UoMCkgeyByZXR1cm4gJDAgKyAkMS5jYXNlc0NvdW50IH0gLSU+PCVfIC0lPgogICAgPCVfIGxldCBzdGF0aWNWYXJpYWJsZUNhc2VzQ291bnQ6IEludCA9IHdyYXBwZWRTdGF0aWNWYXJpYWJsZXMucmVkdWNlKDApIHsgcmV0dXJuICQwICsgJDEuY2FzZXNDb3VudCB9IC0lPjwlXyAtJT4KCiAgPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFNUQVRJQyBTVFVCUyAtJT48JV8gLSU+CiAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkU3RhdGljTWV0aG9kcyB7IC0lPgogICAgPCU9IG1ldGhvZC5mdW5jdGlvblByb3RvdHlwZSBfJT4gewogICAgICAgIDwlPSBtZXRob2Quc3R1YkJvZHkoKSBfJT4KICAgIH0KCiAgICA8JV8gfSAlPjwlXyAtJT4KICAgIDwlXyAtJT4KICA8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gSU5JVElBTElaRVJTIC0lPjwlXyAtJT4KICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRJbml0aWFsaXplcnMgeyAtJT4KICAgIDwlPSBtZXRob2QuZnVuY3Rpb25Qcm90b3R5cGUgXyU+IHsgfQoKICAgIDwlXyB9IC0lPjwlXyAtJT4KICAgIDwlXyAtJT48JV8gLSU+CiAgPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFNUVUJTIC0lPjwlXyAtJT4KICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRNZXRob2RzIHsgLSU+CiAgICA8JT0gbWV0aG9kLmZ1bmN0aW9uUHJvdG90eXBlIF8lPiB7CiAgICAgICAgPCU9IG1ldGhvZC5zdHViQm9keSgpIF8lPgogICAgfQoKICAgIDwlXyB9IC0lPgogICAgPCVfIGZvciB3cmFwcGVkIGluIHdyYXBwZWRTdWJzY3JpcHRzIHsgLSU+CiAgICA8JT0gd3JhcHBlZC5zdWJzY3JpcHRDYWxsKCkgXyU+CgogICAgPCVfIH0gLSU+CiAgPCUjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFNUQVRJQyBNRVRIT0QgVFlQRSAtJT48JV8gLSU+CiAgICA8JV8gaWYgY29uZm9ybXNUb1N0YXRpY01vY2sgeyAtJT4KICAgIGZpbGVwcml2YXRlIGVudW0gU3RhdGljTWV0aG9kVHlwZSB7CiAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkU3RhdGljTWV0aG9kc0Zvck1ldGhvZFR5cGUgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLm1ldGhvZFR5cGVEZWNsYXJhdGlvbldpdGhQYXJhbWV0ZXJzKCkgXyU+CiAgICA8JV8gIH0gJT4gPCVfIGZvciB2YXJpYWJsZSBpbiBhbGxTdGF0aWNWYXJpYWJsZXMgeyAtJT4KICAgICAgICA8JT0gcHJvcGVydHlNZXRob2RUeXBlcyh2YXJpYWJsZSkgJT4KICAgIDwlXyB9ICU+IDwlXyAlPgogICAgPCVfIC0lPgogICAgICAgIHN0YXRpYyBmdW5jIGNvbXBhcmVQYXJhbWV0ZXJzKGxoczogU3RhdGljTWV0aG9kVHlwZSwgcmhzOiBTdGF0aWNNZXRob2RUeXBlLCBtYXRjaGVyOiBNYXRjaGVyKSAtPiBNYXRjaGVyLkNvbXBhcmlzb25SZXN1bHQgewogICAgICAgICAgICBzd2l0Y2ggKGxocywgcmhzKSB7IDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRTdGF0aWNNZXRob2RzRm9yTWV0aG9kVHlwZSB7ICU+CiAgICAgICAgICAgIDwlPSBtZXRob2QuZXF1YWxDYXNlcygpICU+CiAgICAgICAgICAgIDwlXyB9ICU+IDwlXyBmb3IgdmFyaWFibGUgaW4gd3JhcHBlZFN0YXRpY1ZhcmlhYmxlcyB7IC0lPgogICAgICAgICAgICA8JT0gdmFyaWFibGUuY29tcGFyZUNhc2VzKCkgJT4KICAgICAgICAgICAgPCVfIH0gJT4gPCVfIC0lPiA8JV8gaWYgd3JhcHBlZFN0YXRpY01ldGhvZHMuY291bnQgKyBzdGF0aWNWYXJpYWJsZUNhc2VzQ291bnQgPiAxIHsgLSU+CiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiAubm9uZQogICAgICAgICAgICA8JV8gfSAtJT4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIDwlXyAlPgogICAgICAgIGZ1bmMgaW50VmFsdWUoKSAtPiBJbnQgewogICAgICAgICAgICBzd2l0Y2ggc2VsZiB7IDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRTdGF0aWNNZXRob2RzRm9yTWV0aG9kVHlwZSB7ICU+CiAgICAgICAgICAgICAgICA8JT0gbWV0aG9kLmludFZhbHVlQ2FzZSAtJT48JSB9ICU+CiAgICAgICAgICAgICAgICA8JV8gZm9yIHZhcmlhYmxlIGluIGFsbFN0YXRpY1ZhcmlhYmxlcyB7IC0lPgogICAgICAgICAgICAgICAgPCU9IHByb3BlcnR5TWV0aG9kVHlwZXNJbnRWYWx1ZSh2YXJpYWJsZSkgJT4KICAgICAgICAgICAgICAgIDwlXyB9ICU+IDwlXyAtJT4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmdW5jIGFzc2VydGlvbk5hbWUoKSAtPiBTdHJpbmcgewogICAgICAgICAgICBzd2l0Y2ggc2VsZiB7IDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRTdGF0aWNNZXRob2RzRm9yTWV0aG9kVHlwZSB7ICU+CiAgICAgICAgICAgIDwlPSBtZXRob2QuYXNzZXJ0aW9uTmFtZSAtJT48JSB9ICU+CiAgICAgICAgICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gd3JhcHBlZFN0YXRpY1ZhcmlhYmxlcyB7IC0lPgogICAgICAgICAgICA8JT0gdmFyaWFibGUuYXNzZXJ0aW9uTmFtZSAlPgogICAgICAgICAgICA8JV8gfSAlPgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIG9wZW4gY2xhc3MgU3RhdGljR2l2ZW46IFN0dWJiZWRNZXRob2QgewogICAgICAgIGZpbGVwcml2YXRlIHZhciBtZXRob2Q6IFN0YXRpY01ldGhvZFR5cGUKCiAgICAgICAgcHJpdmF0ZSBpbml0KG1ldGhvZDogU3RhdGljTWV0aG9kVHlwZSwgcHJvZHVjdHM6IFtTdHViUHJvZHVjdF0pIHsKICAgICAgICAgICAgc2VsZi5tZXRob2QgPSBtZXRob2QKICAgICAgICAgICAgc3VwZXIuaW5pdChwcm9kdWN0cykKICAgICAgICB9CgogICAgICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsU3RhdGljVmFyaWFibGVzIHsgLSU+CiAgICAgICAgPCU9IHdyYXBQcm9wZXJ0eSh2YXJpYWJsZSkuZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUocHJlZml4OiAiU3RhdGljIikgLSU+IHsKICAgICAgICAgICAgPCU9IHdyYXBQcm9wZXJ0eSh2YXJpYWJsZSkuZ2l2ZW5Db25zdHJ1Y3RvcihwcmVmaXg6ICJTdGF0aWMiKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gJT4gPCVfICU+CiAgICAgICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZFN0YXRpY01ldGhvZHNGb3JNZXRob2RUeXBlLmZpbHRlcih7ICEkMC5tZXRob2QucmV0dXJuVHlwZU5hbWUuaXNWb2lkICYmICEkMC5tZXRob2QuaXNJbml0aWFsaXplciB9KSB7IC0lPgogICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUocHJlZml4OiAiU3RhdGljIikgLSU+IHsKICAgICAgICAgICAgPCU9IG1ldGhvZC5naXZlbkNvbnN0cnVjdG9yKHByZWZpeDogIlN0YXRpYyIpIF8lPgogICAgICAgIH0KICAgICAgICA8JV8gfSAtJT4KICAgICAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkU3RhdGljTWV0aG9kc0Zvck1ldGhvZFR5cGUuZmlsdGVyKHsgISQwLm1ldGhvZC50aHJvd3MgJiYgISQwLm1ldGhvZC5yZXRocm93cyAmJiAhJDAubWV0aG9kLnJldHVyblR5cGVOYW1lLmlzVm9pZCAmJiAhJDAubWV0aG9kLmlzSW5pdGlhbGl6ZXIgfSkgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLmdpdmVuUHJvZHVjZUNvbnN0cnVjdG9yTmFtZShwcmVmaXg6ICJTdGF0aWMiKSAtJT4gewogICAgICAgICAgICA8JT0gbWV0aG9kLmdpdmVuUHJvZHVjZUNvbnN0cnVjdG9yKHByZWZpeDogIlN0YXRpYyIpIF8lPgogICAgICAgIH0KICAgICAgICA8JV8gfSAtJT4KICAgICAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkU3RhdGljTWV0aG9kc0Zvck1ldGhvZFR5cGUuZmlsdGVyKHsgKCQwLm1ldGhvZC50aHJvd3MgfHwgJDAubWV0aG9kLnJldGhyb3dzKSAmJiAhJDAubWV0aG9kLmlzSW5pdGlhbGl6ZXIgfSkgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLmdpdmVuQ29uc3RydWN0b3JOYW1lVGhyb3dzKHByZWZpeDogIlN0YXRpYyIpIC0lPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Db25zdHJ1Y3RvclRocm93cyhwcmVmaXg6ICJTdGF0aWMiKSBfJT4KICAgICAgICB9CiAgICAgICAgPCU9IG1ldGhvZC5naXZlblByb2R1Y2VDb25zdHJ1Y3Rvck5hbWVUaHJvd3MocHJlZml4OiAiU3RhdGljIikgLSU+IHsKICAgICAgICAgICAgPCU9IG1ldGhvZC5naXZlblByb2R1Y2VDb25zdHJ1Y3RvclRocm93cyhwcmVmaXg6ICJTdGF0aWMiKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgfQoKICAgIHB1YmxpYyBzdHJ1Y3QgU3RhdGljVmVyaWZ5IHsKICAgICAgICBmaWxlcHJpdmF0ZSB2YXIgbWV0aG9kOiBTdGF0aWNNZXRob2RUeXBlCgogICAgICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRTdGF0aWNNZXRob2RzRm9yTWV0aG9kVHlwZSB7IC0lPgogICAgICAgIDwlPSBtZXRob2QudmVyaWZpY2F0aW9uUHJveHlDb25zdHJ1Y3Rvck5hbWUocHJlZml4OiAiU3RhdGljIikgLSU+IHsgPCU9IG1ldGhvZC52ZXJpZmljYXRpb25Qcm94eUNvbnN0cnVjdG9yKHByZWZpeDogIlN0YXRpYyIpIF8lPiB9CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsU3RhdGljVmFyaWFibGVzIHsgLSU+CiAgICAgICAgPCU9IHByb3BlcnR5VHlwZXModmFyaWFibGUpICU+CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgfQoKICAgIHB1YmxpYyBzdHJ1Y3QgU3RhdGljUGVyZm9ybSB7CiAgICAgICAgZmlsZXByaXZhdGUgdmFyIG1ldGhvZDogU3RhdGljTWV0aG9kVHlwZQogICAgICAgIHZhciBwZXJmb3JtczogQW55CgogICAgICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRTdGF0aWNNZXRob2RzRm9yTWV0aG9kVHlwZSB7IC0lPgogICAgICAgIDwlPSBtZXRob2QucGVyZm9ybVByb3h5Q29uc3RydWN0b3JOYW1lKHByZWZpeDogIlN0YXRpYyIpIC0lPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QucGVyZm9ybVByb3h5Q29uc3RydWN0b3IocHJlZml4OiAiU3RhdGljIikgXyU+CiAgICAgICAgfQogICAgICAgIDwlXyB9ICU+IDwlXyAtJT4KICAgIH0KCiAgICA8JSB9IC0lPgogIDwlIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBNRVRIT0QgVFlQRSAtJT48JV8gLSU+CiAgICA8JV8gaWYgIXdyYXBwZWRNZXRob2RzLmlzRW1wdHkgfHwgIWFsbFZhcmlhYmxlcy5pc0VtcHR5IHx8ICFhbGxTdWJzY3JpcHRzLmlzRW1wdHkgeyAtJT4KCiAgICBmaWxlcHJpdmF0ZSBlbnVtIE1ldGhvZFR5cGUgewogICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZE1ldGhvZHNGb3JNZXRob2RUeXBlIHsgLSU+CiAgICAgICAgPCU9IG1ldGhvZC5tZXRob2RUeXBlRGVjbGFyYXRpb25XaXRoUGFyYW1ldGVycygpIF8lPgogICAgPCVfICB9IC0lPiA8JV8gZm9yIHZhcmlhYmxlIGluIGFsbFZhcmlhYmxlcyB7IC0lPgogICAgICAgIDwlPSBwcm9wZXJ0eU1ldGhvZFR5cGVzKHZhcmlhYmxlKSAlPgogICAgPCVfIH0gJT4gPCVfICU+IDwlXyBmb3Igd3JhcHBlZCBpbiB3cmFwcGVkU3Vic2NyaXB0cyB7IC0lPgogICAgICAgIDwlPSB3cmFwcGVkLnN1YnNjcmlwdENhc2VzKCkgXyU+CiAgICA8JV8gfSAlPiA8JV8gJT4KICAgIDwlXyAtJT4KICAgICAgICBzdGF0aWMgZnVuYyBjb21wYXJlUGFyYW1ldGVycyhsaHM6IE1ldGhvZFR5cGUsIHJoczogTWV0aG9kVHlwZSwgbWF0Y2hlcjogTWF0Y2hlcikgLT4gTWF0Y2hlci5Db21wYXJpc29uUmVzdWx0IHsKICAgICAgICAgICAgc3dpdGNoIChsaHMsIHJocykgeyA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkTWV0aG9kc0Zvck1ldGhvZFR5cGUgeyAlPgogICAgICAgICAgICA8JT0gbWV0aG9kLmVxdWFsQ2FzZXMoKSAlPgogICAgICAgICAgICA8JV8gfSAlPiA8JV8gZm9yIHZhcmlhYmxlIGluIHdyYXBwZWRWYXJpYWJsZXMgeyAtJT4KICAgICAgICAgICAgPCU9IHZhcmlhYmxlLmNvbXBhcmVDYXNlcygpICU+CiAgICAgICAgICAgIDwlXyB9ICU+IDwlXyAtJT4gPCVfIGZvciB3cmFwcGVkIGluIHdyYXBwZWRTdWJzY3JpcHRzIHsgLSU+CiAgICAgICAgICAgIDwlPSB3cmFwcGVkLmVxdWFsQ2FzZXMoKSAlPgogICAgICAgICAgICA8JV8gfSAlPiA8JV8gaWYgd3JhcHBlZE1ldGhvZHMuY291bnQgKyB2YXJpYWJsZUNhc2VzQ291bnQgKyBzdWJzY3JpcHRzQ2FzZXNDb3VudCA+IDEgeyAtJT4KICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIC5ub25lCiAgICAgICAgICAgIDwlXyB9IC0lPgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgPCVfICU+CiAgICAgICAgZnVuYyBpbnRWYWx1ZSgpIC0+IEludCB7CiAgICAgICAgICAgIHN3aXRjaCBzZWxmIHsgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZE1ldGhvZHNGb3JNZXRob2RUeXBlIHsgJT4KICAgICAgICAgICAgPCU9IG1ldGhvZC5pbnRWYWx1ZUNhc2UgLSU+PCUgfSAlPgogICAgICAgICAgICA8JV8gZm9yIHZhcmlhYmxlIGluIGFsbFZhcmlhYmxlcyB7IC0lPgogICAgICAgICAgICA8JT0gcHJvcGVydHlNZXRob2RUeXBlc0ludFZhbHVlKHZhcmlhYmxlKSAlPgogICAgICAgICAgICA8JV8gfSAlPiA8JV8gZm9yIHdyYXBwZWQgaW4gd3JhcHBlZFN1YnNjcmlwdHMgeyAtJT4KICAgICAgICAgICAgPCU9IHdyYXBwZWQuaW50VmFsdWVDYXNlKCkgJT4KICAgICAgICAgICAgPCVfIH0gLSU+CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuYyBhc3NlcnRpb25OYW1lKCkgLT4gU3RyaW5nIHsKICAgICAgICAgICAgc3dpdGNoIHNlbGYgeyA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkTWV0aG9kc0Zvck1ldGhvZFR5cGUgeyAlPgogICAgICAgICAgICA8JT0gbWV0aG9kLmFzc2VydGlvbk5hbWUgLSU+PCUgfSAlPgogICAgICAgICAgICA8JV8gZm9yIHZhcmlhYmxlIGluIHdyYXBwZWRWYXJpYWJsZXMgeyAtJT4KICAgICAgICAgICAgPCU9IHZhcmlhYmxlLmFzc2VydGlvbk5hbWUgJT4KICAgICAgICAgICAgPCVfIH0gJT4gPCVfIGZvciB3cmFwcGVkIGluIHdyYXBwZWRTdWJzY3JpcHRzIHsgLSU+CiAgICAgICAgICAgIDwlPSB3cmFwcGVkLmFzc2VydGlvbk5hbWUgJT4KICAgICAgICAgICAgPCVfIH0gLSU+CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICA8JV8gfSBlbHNlIHsgJT4KICAgIGZpbGVwcml2YXRlIHN0cnVjdCBNZXRob2RUeXBlIHsKICAgICAgICBzdGF0aWMgZnVuYyBjb21wYXJlUGFyYW1ldGVycyhsaHM6IE1ldGhvZFR5cGUsIHJoczogTWV0aG9kVHlwZSwgbWF0Y2hlcjogTWF0Y2hlcikgLT4gTWF0Y2hlci5Db21wYXJpc29uUmVzdWx0IHsgcmV0dXJuIC5tYXRjaCB9CiAgICAgICAgZnVuYyBpbnRWYWx1ZSgpIC0+IEludCB7IHJldHVybiAwIH0KICAgICAgICBmdW5jIGFzc2VydGlvbk5hbWUoKSAtPiBTdHJpbmcgeyByZXR1cm4gIiIgfQogICAgfQogICAgPCVfIH0gLSU+PCVfIC0lPgoKICAgIG9wZW4gY2xhc3MgR2l2ZW46IFN0dWJiZWRNZXRob2QgewogICAgICAgIGZpbGVwcml2YXRlIHZhciBtZXRob2Q6IE1ldGhvZFR5cGUKCiAgICAgICAgcHJpdmF0ZSBpbml0KG1ldGhvZDogTWV0aG9kVHlwZSwgcHJvZHVjdHM6IFtTdHViUHJvZHVjdF0pIHsKICAgICAgICAgICAgc2VsZi5tZXRob2QgPSBtZXRob2QKICAgICAgICAgICAgc3VwZXIuaW5pdChwcm9kdWN0cykKICAgICAgICB9CgogICAgICAgIDwlXyBmb3IgdmFyaWFibGUgaW4gYWxsVmFyaWFibGVzIHsgLSU+CiAgICAgICAgPCU9IHdyYXBQcm9wZXJ0eSh2YXJpYWJsZSkuZ2l2ZW5Db25zdHJ1Y3Rvck5hbWUoKSAtJT4gewogICAgICAgICAgICA8JT0gd3JhcFByb3BlcnR5KHZhcmlhYmxlKS5naXZlbkNvbnN0cnVjdG9yKCkgXyU+CiAgICAgICAgfQogICAgICAgIDwlXyB9ICU+IDwlXyAlPgogICAgICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRNZXRob2RzRm9yTWV0aG9kVHlwZS5maWx0ZXIoeyAhJDAubWV0aG9kLnJldHVyblR5cGVOYW1lLmlzVm9pZCAmJiAhJDAubWV0aG9kLmlzSW5pdGlhbGl6ZXIgfSkgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLmdpdmVuQ29uc3RydWN0b3JOYW1lKCkgLSU+IHsKICAgICAgICAgICAgPCU9IG1ldGhvZC5naXZlbkNvbnN0cnVjdG9yKCkgXyU+CiAgICAgICAgfQogICAgICAgIDwlXyB9IC0lPgogICAgICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRNZXRob2RzRm9yTWV0aG9kVHlwZS5maWx0ZXIoeyAhJDAubWV0aG9kLnRocm93cyAmJiAhJDAubWV0aG9kLnJldGhyb3dzICYmICEkMC5tZXRob2QucmV0dXJuVHlwZU5hbWUuaXNWb2lkICYmICEkMC5tZXRob2QuaXNJbml0aWFsaXplciB9KSB7IC0lPgogICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Qcm9kdWNlQ29uc3RydWN0b3JOYW1lKCkgLSU+IHsKICAgICAgICAgICAgPCU9IG1ldGhvZC5naXZlblByb2R1Y2VDb25zdHJ1Y3RvcigpIF8lPgogICAgICAgIH0KICAgICAgICA8JV8gfSAtJT4KICAgICAgICA8JV8gZm9yIHdyYXBwZWQgaW4gd3JhcHBlZFN1YnNjcmlwdHMgeyAtJT4KICAgICAgICA8JT0gd3JhcHBlZC5naXZlbkNvbnN0cnVjdG9yTmFtZSgpIC0lPiB7CiAgICAgICAgICAgIDwlPSB3cmFwcGVkLmdpdmVuQ29uc3RydWN0b3IoKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gLSU+CiAgICAgICAgPCVfIGZvciBtZXRob2QgaW4gd3JhcHBlZE1ldGhvZHNGb3JNZXRob2RUeXBlLmZpbHRlcih7ICgkMC5tZXRob2QudGhyb3dzIHx8ICQwLm1ldGhvZC5yZXRocm93cykgJiYgISQwLm1ldGhvZC5pc0luaXRpYWxpemVyIH0pIHsgLSU+CiAgICAgICAgPCU9IG1ldGhvZC5naXZlbkNvbnN0cnVjdG9yTmFtZVRocm93cygpIC0lPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Db25zdHJ1Y3RvclRocm93cygpIF8lPgogICAgICAgIH0KICAgICAgICA8JT0gbWV0aG9kLmdpdmVuUHJvZHVjZUNvbnN0cnVjdG9yTmFtZVRocm93cygpIC0lPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QuZ2l2ZW5Qcm9kdWNlQ29uc3RydWN0b3JUaHJvd3MoKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgfQoKICAgIHB1YmxpYyBzdHJ1Y3QgVmVyaWZ5IHsKICAgICAgICBmaWxlcHJpdmF0ZSB2YXIgbWV0aG9kOiBNZXRob2RUeXBlCgogICAgICAgIDwlXyBmb3IgbWV0aG9kIGluIHdyYXBwZWRNZXRob2RzRm9yTWV0aG9kVHlwZSB7IC0lPgogICAgICAgIDwlPSBtZXRob2QudmVyaWZpY2F0aW9uUHJveHlDb25zdHJ1Y3Rvck5hbWUoKSAtJT4geyA8JT0gbWV0aG9kLnZlcmlmaWNhdGlvblByb3h5Q29uc3RydWN0b3IoKSBfJT4gfQogICAgICAgIDwlXyB9ICU+IDwlXyAtJT4KICAgICAgICA8JV8gZm9yIHZhcmlhYmxlIGluIGFsbFZhcmlhYmxlcyB7IC0lPgogICAgICAgIDwlPSBwcm9wZXJ0eVR5cGVzKHZhcmlhYmxlKSAlPgogICAgICAgIDwlXyB9ICU+IDwlXyAtJT4KICAgICAgICA8JV8gZm9yIHdyYXBwZWQgaW4gd3JhcHBlZFN1YnNjcmlwdHMgeyAtJT4KICAgICAgICA8JT0gd3JhcHBlZC52ZXJpZnlDb25zdHJ1Y3Rvck5hbWUoKSAtJT4geyA8JT0gd3JhcHBlZC52ZXJpZnlDb25zdHJ1Y3RvcigpIF8lPiB9CiAgICAgICAgPCVfIGlmICF3cmFwcGVkLnJlYWRvbmx5IHsgLSU+CiAgICAgICAgPCU9IHdyYXBwZWQudmVyaWZ5Q29uc3RydWN0b3JOYW1lKHNldDogdHJ1ZSkgLSU+IHsgPCU9IHdyYXBwZWQudmVyaWZ5Q29uc3RydWN0b3Ioc2V0OiB0cnVlKSBfJT4gfQogICAgICAgIDwlXyB9IC0lPgogICAgICAgIDwlXyB9ICU+IDwlXyAtJT4KICAgIH0KCiAgICBwdWJsaWMgc3RydWN0IFBlcmZvcm0gewogICAgICAgIGZpbGVwcml2YXRlIHZhciBtZXRob2Q6IE1ldGhvZFR5cGUKICAgICAgICB2YXIgcGVyZm9ybXM6IEFueQoKICAgICAgICA8JV8gZm9yIG1ldGhvZCBpbiB3cmFwcGVkTWV0aG9kc0Zvck1ldGhvZFR5cGUgeyAtJT4KICAgICAgICA8JT0gbWV0aG9kLnBlcmZvcm1Qcm94eUNvbnN0cnVjdG9yTmFtZSgpIC0lPiB7CiAgICAgICAgICAgIDwlPSBtZXRob2QucGVyZm9ybVByb3h5Q29uc3RydWN0b3IoKSBfJT4KICAgICAgICB9CiAgICAgICAgPCVfIH0gJT4gPCVfIC0lPgogICAgfQoKICA8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gTU9DSyBNRVRIT0RTIC0lPjwlXyAtJT4KICAgIHB1YmxpYyBmdW5jIGdpdmVuKF8gbWV0aG9kOiBHaXZlbikgewogICAgICAgIG1ldGhvZFJldHVyblZhbHVlcy5hcHBlbmQobWV0aG9kKQogICAgfQoKICAgIHB1YmxpYyBmdW5jIHBlcmZvcm0oXyBtZXRob2Q6IFBlcmZvcm0pIHsKICAgICAgICBtZXRob2RQZXJmb3JtVmFsdWVzLmFwcGVuZChtZXRob2QpCiAgICAgICAgbWV0aG9kUGVyZm9ybVZhbHVlcy5zb3J0IHsgJDAubWV0aG9kLmludFZhbHVlKCkgPCAkMS5tZXRob2QuaW50VmFsdWUoKSB9CiAgICB9CgogICAgcHVibGljIGZ1bmMgdmVyaWZ5KF8gbWV0aG9kOiBWZXJpZnksIGNvdW50OiBDb3VudCA9IENvdW50Lm1vcmVPckVxdWFsKHRvOiAxKSwgZmlsZTogU3RhdGljU3RyaW5nID0gI2ZpbGUsIGxpbmU6IFVJbnQgPSAjbGluZSkgewogICAgICAgIGxldCBmdWxsTWF0Y2hlcyA9IG1hdGNoaW5nQ2FsbHMobWV0aG9kLCBmaWxlOiBmaWxlLCBsaW5lOiBsaW5lKQogICAgICAgIGxldCBzdWNjZXNzID0gY291bnQubWF0Y2hlcyhmdWxsTWF0Y2hlcykKICAgICAgICBsZXQgYXNzZXJ0aW9uTmFtZSA9IG1ldGhvZC5tZXRob2QuYXNzZXJ0aW9uTmFtZSgpCiAgICAgICAgbGV0IGZlZWRiYWNrOiBTdHJpbmcgPSB7CiAgICAgICAgICAgIGd1YXJkICFzdWNjZXNzIGVsc2UgeyByZXR1cm4gIiIgfQogICAgICAgICAgICByZXR1cm4gVXRpbHMuY2xvc2VzdENhbGxzTWVzc2FnZSgKICAgICAgICAgICAgICAgIGZvcjogc2VsZi5pbnZvY2F0aW9ucy5tYXAgeyBpbnZvY2F0aW9uIGluCiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlci5zZXQoZmlsZTogZmlsZSwgbGluZTogbGluZSkKICAgICAgICAgICAgICAgICAgICBkZWZlciB7IG1hdGNoZXIuY2xlYXJGaWxlQW5kTGluZSgpIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWV0aG9kVHlwZS5jb21wYXJlUGFyYW1ldGVycyhsaHM6IGludm9jYXRpb24sIHJoczogbWV0aG9kLm1ldGhvZCwgbWF0Y2hlcjogbWF0Y2hlcikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBuYW1lOiBhc3NlcnRpb25OYW1lCiAgICAgICAgICAgICkKICAgICAgICB9KCkKICAgICAgICBNb2NreUFzc2VydChzdWNjZXNzLCAiRXhwZWN0ZWQ6IFwoY291bnQpIGludm9jYXRpb25zIG9mIGBcKGFzc2VydGlvbk5hbWUpYCwgYnV0IHdhczogXChmdWxsTWF0Y2hlcykuXChmZWVkYmFjaykiLCBmaWxlOiBmaWxlLCBsaW5lOiBsaW5lKQogICAgfQoKICAgIHByaXZhdGUgZnVuYyBhZGRJbnZvY2F0aW9uKF8gY2FsbDogTWV0aG9kVHlwZSkgewogICAgICAgIHNlbGYucXVldWUuc3luYyB7IGludm9jYXRpb25zLmFwcGVuZChjYWxsKSB9CiAgICB9CiAgICBwcml2YXRlIGZ1bmMgbWV0aG9kUmV0dXJuVmFsdWUoXyBtZXRob2Q6IE1ldGhvZFR5cGUpIHRocm93cyAtPiBTdHViUHJvZHVjdCB7CiAgICAgICAgbWF0Y2hlci5zZXQoZmlsZTogc2VsZi5maWxlLCBsaW5lOiBzZWxmLmxpbmUpCiAgICAgICAgZGVmZXIgeyBtYXRjaGVyLmNsZWFyRmlsZUFuZExpbmUoKSB9CiAgICAgICAgbGV0IGNhbmRpZGF0ZXMgPSBzZXF1ZW5jaW5nUG9saWN5LnNvcnRlZChtZXRob2RSZXR1cm5WYWx1ZXMsIGJ5OiB7ICQwLm1ldGhvZC5pbnRWYWx1ZSgpID4gJDEubWV0aG9kLmludFZhbHVlKCkgfSkKICAgICAgICBsZXQgbWF0Y2hlZCA9IGNhbmRpZGF0ZXMuZmlyc3Qod2hlcmU6IHsgJDAuaXNWYWxpZCAmJiBNZXRob2RUeXBlLmNvbXBhcmVQYXJhbWV0ZXJzKGxoczogJDAubWV0aG9kLCByaHM6IG1ldGhvZCwgbWF0Y2hlcjogbWF0Y2hlcikuaXNGdWxsTWF0Y2ggfSkKICAgICAgICBndWFyZCBsZXQgcHJvZHVjdCA9IG1hdGNoZWQ/LmdldFByb2R1Y3QocG9saWN5OiBzZWxmLnN0dWJiaW5nUG9saWN5KSBlbHNlIHsgdGhyb3cgTW9ja0Vycm9yLm5vdFN0dWJlZCB9CiAgICAgICAgcmV0dXJuIHByb2R1Y3QKICAgIH0KICAgIHByaXZhdGUgZnVuYyBtZXRob2RQZXJmb3JtVmFsdWUoXyBtZXRob2Q6IE1ldGhvZFR5cGUpIC0+IEFueT8gewogICAgICAgIG1hdGNoZXIuc2V0KGZpbGU6IHNlbGYuZmlsZSwgbGluZTogc2VsZi5saW5lKQogICAgICAgIGRlZmVyIHsgbWF0Y2hlci5jbGVhckZpbGVBbmRMaW5lKCkgfQogICAgICAgIGxldCBtYXRjaGVkID0gbWV0aG9kUGVyZm9ybVZhbHVlcy5yZXZlcnNlZCgpLmZpcnN0IHsgTWV0aG9kVHlwZS5jb21wYXJlUGFyYW1ldGVycyhsaHM6ICQwLm1ldGhvZCwgcmhzOiBtZXRob2QsIG1hdGNoZXI6IG1hdGNoZXIpLmlzRnVsbE1hdGNoIH0KICAgICAgICByZXR1cm4gbWF0Y2hlZD8ucGVyZm9ybXMKICAgIH0KICAgIHByaXZhdGUgZnVuYyBtYXRjaGluZ0NhbGxzKF8gbWV0aG9kOiBNZXRob2RUeXBlLCBmaWxlOiBTdGF0aWNTdHJpbmc/LCBsaW5lOiBVSW50PykgLT4gW01ldGhvZFR5cGVdIHsKICAgICAgICBtYXRjaGVyLnNldChmaWxlOiBmaWxlID8/IHNlbGYuZmlsZSwgbGluZTogbGluZSA/PyBzZWxmLmxpbmUpCiAgICAgICAgZGVmZXIgeyBtYXRjaGVyLmNsZWFyRmlsZUFuZExpbmUoKSB9CiAgICAgICAgcmV0dXJuIGludm9jYXRpb25zLmZpbHRlciB7IE1ldGhvZFR5cGUuY29tcGFyZVBhcmFtZXRlcnMobGhzOiAkMCwgcmhzOiBtZXRob2QsIG1hdGNoZXI6IG1hdGNoZXIpLmlzRnVsbE1hdGNoIH0KICAgIH0KICAgIHByaXZhdGUgZnVuYyBtYXRjaGluZ0NhbGxzKF8gbWV0aG9kOiBWZXJpZnksIGZpbGU6IFN0YXRpY1N0cmluZz8sIGxpbmU6IFVJbnQ/KSAtPiBJbnQgewogICAgICAgIHJldHVybiBtYXRjaGluZ0NhbGxzKG1ldGhvZC5tZXRob2QsIGZpbGU6IGZpbGUsIGxpbmU6IGxpbmUpLmNvdW50CiAgICB9CiAgICBwcml2YXRlIGZ1bmMgZ2l2ZW5HZXR0ZXJWYWx1ZTxUPihfIG1ldGhvZDogTWV0aG9kVHlwZSwgXyBtZXNzYWdlOiBTdHJpbmcpIC0+IFQgewogICAgICAgIGRvIHsKICAgICAgICAgICAgcmV0dXJuIHRyeSBtZXRob2RSZXR1cm5WYWx1ZShtZXRob2QpLmNhc3RlZCgpCiAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICAgIG9uRmF0YWxGYWlsdXJlKG1lc3NhZ2UpCiAgICAgICAgICAgIEZhaWx1cmUobWVzc2FnZSkKICAgICAgICB9CiAgICB9CiAgICBwcml2YXRlIGZ1bmMgb3B0aW9uYWxHaXZlbkdldHRlclZhbHVlPFQ+KF8gbWV0aG9kOiBNZXRob2RUeXBlLCBfIG1lc3NhZ2U6IFN0cmluZykgLT4gVD8gewogICAgICAgIGRvIHsKICAgICAgICAgICAgcmV0dXJuIHRyeSBtZXRob2RSZXR1cm5WYWx1ZShtZXRob2QpLmNhc3RlZCgpCiAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICAgIHJldHVybiBuaWwKICAgICAgICB9CiAgICB9CiAgICBwcml2YXRlIGZ1bmMgb25GYXRhbEZhaWx1cmUoXyBtZXNzYWdlOiBTdHJpbmcpIHsKICAgICAgICBndWFyZCBsZXQgZmlsZSA9IHNlbGYuZmlsZSwgbGV0IGxpbmUgPSBzZWxmLmxpbmUgZWxzZSB7IHJldHVybiB9IC8vIExldCBpZiBmYWlsIGlmIGNhbm5vdCBoYW5kbGUgZ3JhdGVmdWxseQogICAgICAgIFN3aWZ0eU1vY2t5VGVzdE9ic2VydmVyLmhhbmRsZUZhdGFsRXJyb3IobWVzc2FnZTogbWVzc2FnZSwgZmlsZTogZmlsZSwgbGluZTogbGluZSkKICAgIH0KICA8JSMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gU1RBVElDIE1PQ0sgTUVUSE9EUyAtJT48JV8gLSU+CiAgICA8JV8gaWYgY29uZm9ybXNUb1N0YXRpY01vY2sgeyAtJT4KCiAgICBzdGF0aWMgcHVibGljIGZ1bmMgZ2l2ZW4oXyBtZXRob2Q6IFN0YXRpY0dpdmVuKSB7CiAgICAgICAgbWV0aG9kUmV0dXJuVmFsdWVzLmFwcGVuZChtZXRob2QpCiAgICB9CgogICAgc3RhdGljIHB1YmxpYyBmdW5jIHBlcmZvcm0oXyBtZXRob2Q6IFN0YXRpY1BlcmZvcm0pIHsKICAgICAgICBtZXRob2RQZXJmb3JtVmFsdWVzLmFwcGVuZChtZXRob2QpCiAgICAgICAgbWV0aG9kUGVyZm9ybVZhbHVlcy5zb3J0IHsgJDAubWV0aG9kLmludFZhbHVlKCkgPCAkMS5tZXRob2QuaW50VmFsdWUoKSB9CiAgICB9CgogICAgc3RhdGljIHB1YmxpYyBmdW5jIHZlcmlmeShfIG1ldGhvZDogU3RhdGljVmVyaWZ5LCBjb3VudDogQ291bnQgPSBDb3VudC5tb3JlT3JFcXVhbCh0bzogMSksIGZpbGU6IFN0YXRpY1N0cmluZyA9ICNmaWxlLCBsaW5lOiBVSW50ID0gI2xpbmUpIHsKICAgICAgICBsZXQgZnVsbE1hdGNoZXMgPSBtYXRjaGluZ0NhbGxzKG1ldGhvZCwgZmlsZTogZmlsZSwgbGluZTogbGluZSkKICAgICAgICBsZXQgc3VjY2VzcyA9IGNvdW50Lm1hdGNoZXMoZnVsbE1hdGNoZXMpCiAgICAgICAgbGV0IGFzc2VydGlvbk5hbWUgPSBtZXRob2QubWV0aG9kLmFzc2VydGlvbk5hbWUoKQogICAgICAgIGxldCBmZWVkYmFjazogU3RyaW5nID0gewogICAgICAgICAgICBndWFyZCAhc3VjY2VzcyBlbHNlIHsgcmV0dXJuICIiIH0KICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmNsb3Nlc3RDYWxsc01lc3NhZ2UoCiAgICAgICAgICAgICAgICBmb3I6IHNlbGYuaW52b2NhdGlvbnMubWFwIHsgaW52b2NhdGlvbiBpbgogICAgICAgICAgICAgICAgICAgIG1hdGNoZXIuc2V0KGZpbGU6IGZpbGUsIGxpbmU6IGxpbmUpCiAgICAgICAgICAgICAgICAgICAgZGVmZXIgeyBtYXRjaGVyLmNsZWFyRmlsZUFuZExpbmUoKSB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0YXRpY01ldGhvZFR5cGUuY29tcGFyZVBhcmFtZXRlcnMobGhzOiBpbnZvY2F0aW9uLCByaHM6IG1ldGhvZC5tZXRob2QsIG1hdGNoZXI6IG1hdGNoZXIpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbmFtZTogYXNzZXJ0aW9uTmFtZQogICAgICAgICAgICApCiAgICAgICAgfSgpCiAgICAgICAgTW9ja3lBc3NlcnQoc3VjY2VzcywgIkV4cGVjdGVkOiBcKGNvdW50KSBpbnZvY2F0aW9ucyBvZiBgXChhc3NlcnRpb25OYW1lKWAsIGJ1dCB3YXM6IFwoZnVsbE1hdGNoZXMpLlwoZmVlZGJhY2spIiwgZmlsZTogZmlsZSwgbGluZTogbGluZSkKICAgIH0KCiAgICBzdGF0aWMgcHJpdmF0ZSBmdW5jIGFkZEludm9jYXRpb24oXyBjYWxsOiBTdGF0aWNNZXRob2RUeXBlKSB7CiAgICAgICAgc2VsZi5xdWV1ZS5zeW5jIHsgaW52b2NhdGlvbnMuYXBwZW5kKGNhbGwpIH0KICAgIH0KICAgIHN0YXRpYyBwcml2YXRlIGZ1bmMgbWV0aG9kUmV0dXJuVmFsdWUoXyBtZXRob2Q6IFN0YXRpY01ldGhvZFR5cGUpIHRocm93cyAtPiBTdHViUHJvZHVjdCB7CiAgICAgICAgbGV0IGNhbmRpZGF0ZXMgPSBzZXF1ZW5jaW5nUG9saWN5LnNvcnRlZChtZXRob2RSZXR1cm5WYWx1ZXMsIGJ5OiB7ICQwLm1ldGhvZC5pbnRWYWx1ZSgpID4gJDEubWV0aG9kLmludFZhbHVlKCkgfSkKICAgICAgICBsZXQgbWF0Y2hlZCA9IGNhbmRpZGF0ZXMuZmlyc3Qod2hlcmU6IHsgJDAuaXNWYWxpZCAmJiBTdGF0aWNNZXRob2RUeXBlLmNvbXBhcmVQYXJhbWV0ZXJzKGxoczogJDAubWV0aG9kLCByaHM6IG1ldGhvZCwgbWF0Y2hlcjogbWF0Y2hlcikuaXNGdWxsTWF0Y2ggfSkKICAgICAgICBndWFyZCBsZXQgcHJvZHVjdCA9IG1hdGNoZWQ/LmdldFByb2R1Y3QocG9saWN5OiBzZWxmLnN0dWJiaW5nUG9saWN5KSBlbHNlIHsgdGhyb3cgTW9ja0Vycm9yLm5vdFN0dWJlZCB9CiAgICAgICAgcmV0dXJuIHByb2R1Y3QKICAgIH0KICAgIHN0YXRpYyBwcml2YXRlIGZ1bmMgbWV0aG9kUGVyZm9ybVZhbHVlKF8gbWV0aG9kOiBTdGF0aWNNZXRob2RUeXBlKSAtPiBBbnk/IHsKICAgICAgICBsZXQgbWF0Y2hlZCA9IG1ldGhvZFBlcmZvcm1WYWx1ZXMucmV2ZXJzZWQoKS5maXJzdCB7IFN0YXRpY01ldGhvZFR5cGUuY29tcGFyZVBhcmFtZXRlcnMobGhzOiAkMC5tZXRob2QsIHJoczogbWV0aG9kLCBtYXRjaGVyOiBtYXRjaGVyKS5pc0Z1bGxNYXRjaCB9CiAgICAgICAgcmV0dXJuIG1hdGNoZWQ/LnBlcmZvcm1zCiAgICB9CiAgICBzdGF0aWMgcHJpdmF0ZSBmdW5jIG1hdGNoaW5nQ2FsbHMoXyBtZXRob2Q6IFN0YXRpY01ldGhvZFR5cGUsIGZpbGU6IFN0YXRpY1N0cmluZz8sIGxpbmU6IFVJbnQ/KSAtPiBbU3RhdGljTWV0aG9kVHlwZV0gewogICAgICAgIG1hdGNoZXIuc2V0KGZpbGU6IGZpbGUsIGxpbmU6IGxpbmUpCiAgICAgICAgZGVmZXIgeyBtYXRjaGVyLmNsZWFyRmlsZUFuZExpbmUoKSB9CiAgICAgICAgcmV0dXJuIGludm9jYXRpb25zLmZpbHRlciB7IFN0YXRpY01ldGhvZFR5cGUuY29tcGFyZVBhcmFtZXRlcnMobGhzOiAkMCwgcmhzOiBtZXRob2QsIG1hdGNoZXI6IG1hdGNoZXIpLmlzRnVsbE1hdGNoIH0KICAgIH0KICAgIHN0YXRpYyBwcml2YXRlIGZ1bmMgbWF0Y2hpbmdDYWxscyhfIG1ldGhvZDogU3RhdGljVmVyaWZ5LCBmaWxlOiBTdGF0aWNTdHJpbmc/LCBsaW5lOiBVSW50PykgLT4gSW50IHsKICAgICAgICByZXR1cm4gbWF0Y2hpbmdDYWxscyhtZXRob2QubWV0aG9kLCBmaWxlOiBmaWxlLCBsaW5lOiBsaW5lKS5jb3VudAogICAgfQogICAgc3RhdGljIHByaXZhdGUgZnVuYyBnaXZlbkdldHRlclZhbHVlPFQ+KF8gbWV0aG9kOiBTdGF0aWNNZXRob2RUeXBlLCBfIG1lc3NhZ2U6IFN0cmluZykgLT4gVCB7CiAgICAgICAgZG8gewogICAgICAgICAgICByZXR1cm4gdHJ5IG1ldGhvZFJldHVyblZhbHVlKG1ldGhvZCkuY2FzdGVkKCkKICAgICAgICB9IGNhdGNoIHsKICAgICAgICAgICAgRmFpbHVyZShtZXNzYWdlKQogICAgICAgIH0KICAgIH0KICAgIHN0YXRpYyBwcml2YXRlIGZ1bmMgb3B0aW9uYWxHaXZlbkdldHRlclZhbHVlPFQ+KF8gbWV0aG9kOiBTdGF0aWNNZXRob2RUeXBlLCBfIG1lc3NhZ2U6IFN0cmluZykgLT4gVD8gewogICAgICAgIGRvIHsKICAgICAgICAgICAgcmV0dXJuIHRyeSBtZXRob2RSZXR1cm5WYWx1ZShtZXRob2QpLmNhc3RlZCgpCiAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICAgIHJldHVybiBuaWwKICAgICAgICB9CiAgICB9CiAgICA8JV8gfSAtJT4KPCVfIGlmIGF1dG9Nb2NrYWJsZSB7IC0lPgp9Cgo8JV8gfSBlbHNlIHsgLSU+Ci8vIHNvdXJjZXJ5OmVuZAo8JV8gfSAtJT4KPCUgfSAtJT4KPCVfIGlmIG1vY2tlZENvdW50ID09IDAgeyAtJT4KLy8gU3dpZnR5TW9ja3k6IG5vIEF1dG9Nb2NrYWJsZSBmb3VuZC4KLy8gUGxlYXNlIGRlZmluZSBhbmQgaW5oZXJpdCBmcm9tIEF1dG9Nb2NrYWJsZSwgb3IgYW5ub3RhdGUgcHJvdG9jb2xzIHRvIGJlIG1vY2tlZAo8JV8gfSAtJT4K"
    )
    static let prototype = File(
        name: "Mock.swifttemplate",
        contents: ""
    )
}
